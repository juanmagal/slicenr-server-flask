# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ipv6_addr import Ipv6Addr
import re
from openapi_server import util

from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
import re  # noqa: E501

class RemoteAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipv4_address=None, ipv6_address=None):  # noqa: E501
        """RemoteAddress - a model defined in OpenAPI

        :param ipv4_address: The ipv4_address of this RemoteAddress.  # noqa: E501
        :type ipv4_address: str
        :param ipv6_address: The ipv6_address of this RemoteAddress.  # noqa: E501
        :type ipv6_address: Ipv6Addr
        """
        self.openapi_types = {
            'ipv4_address': str,
            'ipv6_address': Ipv6Addr
        }

        self.attribute_map = {
            'ipv4_address': 'ipv4Address',
            'ipv6_address': 'ipv6Address'
        }

        self._ipv4_address = ipv4_address
        self._ipv6_address = ipv6_address

    @classmethod
    def from_dict(cls, dikt) -> 'RemoteAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RemoteAddress of this RemoteAddress.  # noqa: E501
        :rtype: RemoteAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this RemoteAddress.


        :return: The ipv4_address of this RemoteAddress.
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this RemoteAddress.


        :param ipv4_address: The ipv4_address of this RemoteAddress.
        :type ipv4_address: str
        """
        if ipv4_address is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ipv4_address):  # noqa: E501
            raise ValueError("Invalid value for `ipv4_address`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ipv4_address = ipv4_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this RemoteAddress.


        :return: The ipv6_address of this RemoteAddress.
        :rtype: Ipv6Addr
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this RemoteAddress.


        :param ipv6_address: The ipv6_address of this RemoteAddress.
        :type ipv6_address: Ipv6Addr
        """

        self._ipv6_address = ipv6_address
