# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SupportedPerfMetricGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, performance_metrics=None, granularity_periods=None, reporting_methods=None, reporting_periods=None):  # noqa: E501
        """SupportedPerfMetricGroup - a model defined in OpenAPI

        :param performance_metrics: The performance_metrics of this SupportedPerfMetricGroup.  # noqa: E501
        :type performance_metrics: List[str]
        :param granularity_periods: The granularity_periods of this SupportedPerfMetricGroup.  # noqa: E501
        :type granularity_periods: List[int]
        :param reporting_methods: The reporting_methods of this SupportedPerfMetricGroup.  # noqa: E501
        :type reporting_methods: List[str]
        :param reporting_periods: The reporting_periods of this SupportedPerfMetricGroup.  # noqa: E501
        :type reporting_periods: List[int]
        """
        self.openapi_types = {
            'performance_metrics': List[str],
            'granularity_periods': List[int],
            'reporting_methods': List[str],
            'reporting_periods': List[int]
        }

        self.attribute_map = {
            'performance_metrics': 'performanceMetrics',
            'granularity_periods': 'granularityPeriods',
            'reporting_methods': 'reportingMethods',
            'reporting_periods': 'reportingPeriods'
        }

        self._performance_metrics = performance_metrics
        self._granularity_periods = granularity_periods
        self._reporting_methods = reporting_methods
        self._reporting_periods = reporting_periods

    @classmethod
    def from_dict(cls, dikt) -> 'SupportedPerfMetricGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SupportedPerfMetricGroup of this SupportedPerfMetricGroup.  # noqa: E501
        :rtype: SupportedPerfMetricGroup
        """
        return util.deserialize_model(dikt, cls)

    @property
    def performance_metrics(self):
        """Gets the performance_metrics of this SupportedPerfMetricGroup.


        :return: The performance_metrics of this SupportedPerfMetricGroup.
        :rtype: List[str]
        """
        return self._performance_metrics

    @performance_metrics.setter
    def performance_metrics(self, performance_metrics):
        """Sets the performance_metrics of this SupportedPerfMetricGroup.


        :param performance_metrics: The performance_metrics of this SupportedPerfMetricGroup.
        :type performance_metrics: List[str]
        """

        self._performance_metrics = performance_metrics

    @property
    def granularity_periods(self):
        """Gets the granularity_periods of this SupportedPerfMetricGroup.


        :return: The granularity_periods of this SupportedPerfMetricGroup.
        :rtype: List[int]
        """
        return self._granularity_periods

    @granularity_periods.setter
    def granularity_periods(self, granularity_periods):
        """Sets the granularity_periods of this SupportedPerfMetricGroup.


        :param granularity_periods: The granularity_periods of this SupportedPerfMetricGroup.
        :type granularity_periods: List[int]
        """

        self._granularity_periods = granularity_periods

    @property
    def reporting_methods(self):
        """Gets the reporting_methods of this SupportedPerfMetricGroup.


        :return: The reporting_methods of this SupportedPerfMetricGroup.
        :rtype: List[str]
        """
        return self._reporting_methods

    @reporting_methods.setter
    def reporting_methods(self, reporting_methods):
        """Sets the reporting_methods of this SupportedPerfMetricGroup.


        :param reporting_methods: The reporting_methods of this SupportedPerfMetricGroup.
        :type reporting_methods: List[str]
        """
        allowed_values = ["FILE_BASED_LOC_SET_BY_PRODUCER", "FILE_BASED_LOC_SET_BY_CONSUMER", "STREAM_BASED"]  # noqa: E501
        if not set(reporting_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `reporting_methods` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(reporting_methods) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._reporting_methods = reporting_methods

    @property
    def reporting_periods(self):
        """Gets the reporting_periods of this SupportedPerfMetricGroup.


        :return: The reporting_periods of this SupportedPerfMetricGroup.
        :rtype: List[int]
        """
        return self._reporting_periods

    @reporting_periods.setter
    def reporting_periods(self, reporting_periods):
        """Sets the reporting_periods of this SupportedPerfMetricGroup.


        :param reporting_periods: The reporting_periods of this SupportedPerfMetricGroup.
        :type reporting_periods: List[int]
        """

        self._reporting_periods = reporting_periods
