# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EmbbEEPerfReq(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kpi_type=None, req=None):  # noqa: E501
        """EmbbEEPerfReq - a model defined in OpenAPI

        :param kpi_type: The kpi_type of this EmbbEEPerfReq.  # noqa: E501
        :type kpi_type: str
        :param req: The req of this EmbbEEPerfReq.  # noqa: E501
        :type req: float
        """
        self.openapi_types = {
            'kpi_type': str,
            'req': float
        }

        self.attribute_map = {
            'kpi_type': 'kpiType',
            'req': 'req'
        }

        self._kpi_type = kpi_type
        self._req = req

    @classmethod
    def from_dict(cls, dikt) -> 'EmbbEEPerfReq':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EmbbEEPerfReq of this EmbbEEPerfReq.  # noqa: E501
        :rtype: EmbbEEPerfReq
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kpi_type(self):
        """Gets the kpi_type of this EmbbEEPerfReq.


        :return: The kpi_type of this EmbbEEPerfReq.
        :rtype: str
        """
        return self._kpi_type

    @kpi_type.setter
    def kpi_type(self, kpi_type):
        """Sets the kpi_type of this EmbbEEPerfReq.


        :param kpi_type: The kpi_type of this EmbbEEPerfReq.
        :type kpi_type: str
        """
        allowed_values = ["NUMOFBITS", "NUMOFBITS_RANBASED"]  # noqa: E501
        if kpi_type not in allowed_values:
            raise ValueError(
                "Invalid value for `kpi_type` ({0}), must be one of {1}"
                .format(kpi_type, allowed_values)
            )

        self._kpi_type = kpi_type

    @property
    def req(self):
        """Gets the req of this EmbbEEPerfReq.


        :return: The req of this EmbbEEPerfReq.
        :rtype: float
        """
        return self._req

    @req.setter
    def req(self, req):
        """Sets the req of this EmbbEEPerfReq.


        :param req: The req of this EmbbEEPerfReq.
        :type req: float
        """

        self._req = req
