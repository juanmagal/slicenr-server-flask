# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PeeParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, site_identification=None, site_description=None, site_latitude=None, site_longitude=None, site_altitude=None, equipment_type=None, environment_type=None, power_interface=None):  # noqa: E501
        """PeeParameter - a model defined in OpenAPI

        :param site_identification: The site_identification of this PeeParameter.  # noqa: E501
        :type site_identification: str
        :param site_description: The site_description of this PeeParameter.  # noqa: E501
        :type site_description: str
        :param site_latitude: The site_latitude of this PeeParameter.  # noqa: E501
        :type site_latitude: float
        :param site_longitude: The site_longitude of this PeeParameter.  # noqa: E501
        :type site_longitude: float
        :param site_altitude: The site_altitude of this PeeParameter.  # noqa: E501
        :type site_altitude: float
        :param equipment_type: The equipment_type of this PeeParameter.  # noqa: E501
        :type equipment_type: str
        :param environment_type: The environment_type of this PeeParameter.  # noqa: E501
        :type environment_type: str
        :param power_interface: The power_interface of this PeeParameter.  # noqa: E501
        :type power_interface: str
        """
        self.openapi_types = {
            'site_identification': str,
            'site_description': str,
            'site_latitude': float,
            'site_longitude': float,
            'site_altitude': float,
            'equipment_type': str,
            'environment_type': str,
            'power_interface': str
        }

        self.attribute_map = {
            'site_identification': 'siteIdentification',
            'site_description': 'siteDescription',
            'site_latitude': 'siteLatitude',
            'site_longitude': 'siteLongitude',
            'site_altitude': 'siteAltitude',
            'equipment_type': 'equipmentType',
            'environment_type': 'environmentType',
            'power_interface': 'powerInterface'
        }

        self._site_identification = site_identification
        self._site_description = site_description
        self._site_latitude = site_latitude
        self._site_longitude = site_longitude
        self._site_altitude = site_altitude
        self._equipment_type = equipment_type
        self._environment_type = environment_type
        self._power_interface = power_interface

    @classmethod
    def from_dict(cls, dikt) -> 'PeeParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PeeParameter of this PeeParameter.  # noqa: E501
        :rtype: PeeParameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def site_identification(self):
        """Gets the site_identification of this PeeParameter.


        :return: The site_identification of this PeeParameter.
        :rtype: str
        """
        return self._site_identification

    @site_identification.setter
    def site_identification(self, site_identification):
        """Sets the site_identification of this PeeParameter.


        :param site_identification: The site_identification of this PeeParameter.
        :type site_identification: str
        """

        self._site_identification = site_identification

    @property
    def site_description(self):
        """Gets the site_description of this PeeParameter.


        :return: The site_description of this PeeParameter.
        :rtype: str
        """
        return self._site_description

    @site_description.setter
    def site_description(self, site_description):
        """Sets the site_description of this PeeParameter.


        :param site_description: The site_description of this PeeParameter.
        :type site_description: str
        """

        self._site_description = site_description

    @property
    def site_latitude(self):
        """Gets the site_latitude of this PeeParameter.


        :return: The site_latitude of this PeeParameter.
        :rtype: float
        """
        return self._site_latitude

    @site_latitude.setter
    def site_latitude(self, site_latitude):
        """Sets the site_latitude of this PeeParameter.


        :param site_latitude: The site_latitude of this PeeParameter.
        :type site_latitude: float
        """
        if site_latitude is not None and site_latitude > 90:  # noqa: E501
            raise ValueError("Invalid value for `site_latitude`, must be a value less than or equal to `90`")  # noqa: E501
        if site_latitude is not None and site_latitude < -90:  # noqa: E501
            raise ValueError("Invalid value for `site_latitude`, must be a value greater than or equal to `-90`")  # noqa: E501

        self._site_latitude = site_latitude

    @property
    def site_longitude(self):
        """Gets the site_longitude of this PeeParameter.


        :return: The site_longitude of this PeeParameter.
        :rtype: float
        """
        return self._site_longitude

    @site_longitude.setter
    def site_longitude(self, site_longitude):
        """Sets the site_longitude of this PeeParameter.


        :param site_longitude: The site_longitude of this PeeParameter.
        :type site_longitude: float
        """
        if site_longitude is not None and site_longitude > 180:  # noqa: E501
            raise ValueError("Invalid value for `site_longitude`, must be a value less than or equal to `180`")  # noqa: E501
        if site_longitude is not None and site_longitude < -180:  # noqa: E501
            raise ValueError("Invalid value for `site_longitude`, must be a value greater than or equal to `-180`")  # noqa: E501

        self._site_longitude = site_longitude

    @property
    def site_altitude(self):
        """Gets the site_altitude of this PeeParameter.


        :return: The site_altitude of this PeeParameter.
        :rtype: float
        """
        return self._site_altitude

    @site_altitude.setter
    def site_altitude(self, site_altitude):
        """Sets the site_altitude of this PeeParameter.


        :param site_altitude: The site_altitude of this PeeParameter.
        :type site_altitude: float
        """

        self._site_altitude = site_altitude

    @property
    def equipment_type(self):
        """Gets the equipment_type of this PeeParameter.


        :return: The equipment_type of this PeeParameter.
        :rtype: str
        """
        return self._equipment_type

    @equipment_type.setter
    def equipment_type(self, equipment_type):
        """Sets the equipment_type of this PeeParameter.


        :param equipment_type: The equipment_type of this PeeParameter.
        :type equipment_type: str
        """

        self._equipment_type = equipment_type

    @property
    def environment_type(self):
        """Gets the environment_type of this PeeParameter.


        :return: The environment_type of this PeeParameter.
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this PeeParameter.


        :param environment_type: The environment_type of this PeeParameter.
        :type environment_type: str
        """

        self._environment_type = environment_type

    @property
    def power_interface(self):
        """Gets the power_interface of this PeeParameter.


        :return: The power_interface of this PeeParameter.
        :rtype: str
        """
        return self._power_interface

    @power_interface.setter
    def power_interface(self, power_interface):
        """Sets the power_interface of this PeeParameter.


        :param power_interface: The power_interface of this PeeParameter.
        :type power_interface: str
        """

        self._power_interface = power_interface
