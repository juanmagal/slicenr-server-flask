# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ListOfInterfacesType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msc_server_interfaces=None, mgw_interfaces=None, rnc_interfaces=None, sgsn_interfaces=None, ggsn_interfaces=None, s_cscf_interfaces=None, p_cscf_interfaces=None, i_cscf_interfaces=None, mrfc_interfaces=None, mgcf_interfaces=None, ibcf_interfaces=None, e_cscf_interfaces=None, bgcf_interfaces=None, as_interfaces=None, hss_interfaces=None, eir_interfaces=None, bm_sc_interfaces=None, mme_interfaces=None, sgw_interfaces=None, pdn_gw_interfaces=None, e_nb_interfaces=None, en_g_nb_interfaces=None, amf_interfaces=None, ausf_interfaces=None, nef_interfaces=None, nrf_interfaces=None, nssf_interfaces=None, pcf_interfaces=None, smf_interfaces=None, smsf_interfaces=None, udm_interfaces=None, upf_interfaces=None, ng_e_nb_interfaces=None, g_nb_cu_cp_interfaces=None, g_nb_cu_up_interfaces=None, g_nb_du_interfaces=None):  # noqa: E501
        """ListOfInterfacesType - a model defined in OpenAPI

        :param msc_server_interfaces: The msc_server_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type msc_server_interfaces: List[str]
        :param mgw_interfaces: The mgw_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type mgw_interfaces: List[str]
        :param rnc_interfaces: The rnc_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type rnc_interfaces: List[str]
        :param sgsn_interfaces: The sgsn_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type sgsn_interfaces: List[str]
        :param ggsn_interfaces: The ggsn_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type ggsn_interfaces: List[str]
        :param s_cscf_interfaces: The s_cscf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type s_cscf_interfaces: List[str]
        :param p_cscf_interfaces: The p_cscf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type p_cscf_interfaces: List[str]
        :param i_cscf_interfaces: The i_cscf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type i_cscf_interfaces: List[str]
        :param mrfc_interfaces: The mrfc_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type mrfc_interfaces: List[str]
        :param mgcf_interfaces: The mgcf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type mgcf_interfaces: List[str]
        :param ibcf_interfaces: The ibcf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type ibcf_interfaces: List[str]
        :param e_cscf_interfaces: The e_cscf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type e_cscf_interfaces: List[str]
        :param bgcf_interfaces: The bgcf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type bgcf_interfaces: List[str]
        :param as_interfaces: The as_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type as_interfaces: List[str]
        :param hss_interfaces: The hss_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type hss_interfaces: List[str]
        :param eir_interfaces: The eir_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type eir_interfaces: List[str]
        :param bm_sc_interfaces: The bm_sc_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type bm_sc_interfaces: List[str]
        :param mme_interfaces: The mme_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type mme_interfaces: List[str]
        :param sgw_interfaces: The sgw_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type sgw_interfaces: List[str]
        :param pdn_gw_interfaces: The pdn_gw_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type pdn_gw_interfaces: List[str]
        :param e_nb_interfaces: The e_nb_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type e_nb_interfaces: List[str]
        :param en_g_nb_interfaces: The en_g_nb_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type en_g_nb_interfaces: List[str]
        :param amf_interfaces: The amf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type amf_interfaces: List[str]
        :param ausf_interfaces: The ausf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type ausf_interfaces: List[str]
        :param nef_interfaces: The nef_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type nef_interfaces: List[str]
        :param nrf_interfaces: The nrf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type nrf_interfaces: List[str]
        :param nssf_interfaces: The nssf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type nssf_interfaces: List[str]
        :param pcf_interfaces: The pcf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type pcf_interfaces: List[str]
        :param smf_interfaces: The smf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type smf_interfaces: List[str]
        :param smsf_interfaces: The smsf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type smsf_interfaces: List[str]
        :param udm_interfaces: The udm_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type udm_interfaces: List[str]
        :param upf_interfaces: The upf_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type upf_interfaces: List[str]
        :param ng_e_nb_interfaces: The ng_e_nb_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type ng_e_nb_interfaces: List[str]
        :param g_nb_cu_cp_interfaces: The g_nb_cu_cp_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type g_nb_cu_cp_interfaces: List[str]
        :param g_nb_cu_up_interfaces: The g_nb_cu_up_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type g_nb_cu_up_interfaces: List[str]
        :param g_nb_du_interfaces: The g_nb_du_interfaces of this ListOfInterfacesType.  # noqa: E501
        :type g_nb_du_interfaces: List[str]
        """
        self.openapi_types = {
            'msc_server_interfaces': List[str],
            'mgw_interfaces': List[str],
            'rnc_interfaces': List[str],
            'sgsn_interfaces': List[str],
            'ggsn_interfaces': List[str],
            's_cscf_interfaces': List[str],
            'p_cscf_interfaces': List[str],
            'i_cscf_interfaces': List[str],
            'mrfc_interfaces': List[str],
            'mgcf_interfaces': List[str],
            'ibcf_interfaces': List[str],
            'e_cscf_interfaces': List[str],
            'bgcf_interfaces': List[str],
            'as_interfaces': List[str],
            'hss_interfaces': List[str],
            'eir_interfaces': List[str],
            'bm_sc_interfaces': List[str],
            'mme_interfaces': List[str],
            'sgw_interfaces': List[str],
            'pdn_gw_interfaces': List[str],
            'e_nb_interfaces': List[str],
            'en_g_nb_interfaces': List[str],
            'amf_interfaces': List[str],
            'ausf_interfaces': List[str],
            'nef_interfaces': List[str],
            'nrf_interfaces': List[str],
            'nssf_interfaces': List[str],
            'pcf_interfaces': List[str],
            'smf_interfaces': List[str],
            'smsf_interfaces': List[str],
            'udm_interfaces': List[str],
            'upf_interfaces': List[str],
            'ng_e_nb_interfaces': List[str],
            'g_nb_cu_cp_interfaces': List[str],
            'g_nb_cu_up_interfaces': List[str],
            'g_nb_du_interfaces': List[str]
        }

        self.attribute_map = {
            'msc_server_interfaces': 'MSCServerInterfaces',
            'mgw_interfaces': 'MGWInterfaces',
            'rnc_interfaces': 'RNCInterfaces',
            'sgsn_interfaces': 'SGSNInterfaces',
            'ggsn_interfaces': 'GGSNInterfaces',
            's_cscf_interfaces': 'S-CSCFInterfaces',
            'p_cscf_interfaces': 'P-CSCFInterfaces',
            'i_cscf_interfaces': 'I-CSCFInterfaces',
            'mrfc_interfaces': 'MRFCInterfaces',
            'mgcf_interfaces': 'MGCFInterfaces',
            'ibcf_interfaces': 'IBCFInterfaces',
            'e_cscf_interfaces': 'E-CSCFInterfaces',
            'bgcf_interfaces': 'BGCFInterfaces',
            'as_interfaces': 'ASInterfaces',
            'hss_interfaces': 'HSSInterfaces',
            'eir_interfaces': 'EIRInterfaces',
            'bm_sc_interfaces': 'BM-SCInterfaces',
            'mme_interfaces': 'MMEInterfaces',
            'sgw_interfaces': 'SGWInterfaces',
            'pdn_gw_interfaces': 'PDN_GWInterfaces',
            'e_nb_interfaces': 'eNBInterfaces',
            'en_g_nb_interfaces': 'en-gNBInterfaces',
            'amf_interfaces': 'AMFInterfaces',
            'ausf_interfaces': 'AUSFInterfaces',
            'nef_interfaces': 'NEFInterfaces',
            'nrf_interfaces': 'NRFInterfaces',
            'nssf_interfaces': 'NSSFInterfaces',
            'pcf_interfaces': 'PCFInterfaces',
            'smf_interfaces': 'SMFInterfaces',
            'smsf_interfaces': 'SMSFInterfaces',
            'udm_interfaces': 'UDMInterfaces',
            'upf_interfaces': 'UPFInterfaces',
            'ng_e_nb_interfaces': 'ng-eNBInterfaces',
            'g_nb_cu_cp_interfaces': 'gNB-CU-CPInterfaces',
            'g_nb_cu_up_interfaces': 'gNB-CU-UPInterfaces',
            'g_nb_du_interfaces': 'gNB-DUInterfaces'
        }

        self._msc_server_interfaces = msc_server_interfaces
        self._mgw_interfaces = mgw_interfaces
        self._rnc_interfaces = rnc_interfaces
        self._sgsn_interfaces = sgsn_interfaces
        self._ggsn_interfaces = ggsn_interfaces
        self._s_cscf_interfaces = s_cscf_interfaces
        self._p_cscf_interfaces = p_cscf_interfaces
        self._i_cscf_interfaces = i_cscf_interfaces
        self._mrfc_interfaces = mrfc_interfaces
        self._mgcf_interfaces = mgcf_interfaces
        self._ibcf_interfaces = ibcf_interfaces
        self._e_cscf_interfaces = e_cscf_interfaces
        self._bgcf_interfaces = bgcf_interfaces
        self._as_interfaces = as_interfaces
        self._hss_interfaces = hss_interfaces
        self._eir_interfaces = eir_interfaces
        self._bm_sc_interfaces = bm_sc_interfaces
        self._mme_interfaces = mme_interfaces
        self._sgw_interfaces = sgw_interfaces
        self._pdn_gw_interfaces = pdn_gw_interfaces
        self._e_nb_interfaces = e_nb_interfaces
        self._en_g_nb_interfaces = en_g_nb_interfaces
        self._amf_interfaces = amf_interfaces
        self._ausf_interfaces = ausf_interfaces
        self._nef_interfaces = nef_interfaces
        self._nrf_interfaces = nrf_interfaces
        self._nssf_interfaces = nssf_interfaces
        self._pcf_interfaces = pcf_interfaces
        self._smf_interfaces = smf_interfaces
        self._smsf_interfaces = smsf_interfaces
        self._udm_interfaces = udm_interfaces
        self._upf_interfaces = upf_interfaces
        self._ng_e_nb_interfaces = ng_e_nb_interfaces
        self._g_nb_cu_cp_interfaces = g_nb_cu_cp_interfaces
        self._g_nb_cu_up_interfaces = g_nb_cu_up_interfaces
        self._g_nb_du_interfaces = g_nb_du_interfaces

    @classmethod
    def from_dict(cls, dikt) -> 'ListOfInterfacesType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The listOfInterfaces-Type of this ListOfInterfacesType.  # noqa: E501
        :rtype: ListOfInterfacesType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msc_server_interfaces(self):
        """Gets the msc_server_interfaces of this ListOfInterfacesType.


        :return: The msc_server_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._msc_server_interfaces

    @msc_server_interfaces.setter
    def msc_server_interfaces(self, msc_server_interfaces):
        """Sets the msc_server_interfaces of this ListOfInterfacesType.


        :param msc_server_interfaces: The msc_server_interfaces of this ListOfInterfacesType.
        :type msc_server_interfaces: List[str]
        """
        allowed_values = ["A", "Iu-CS", "Mc", "MAP-G", "MAP-B", "MAP-E", "MAP-F", "MAP-D", "MAP-C", "CAP"]  # noqa: E501
        if not set(msc_server_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `msc_server_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(msc_server_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._msc_server_interfaces = msc_server_interfaces

    @property
    def mgw_interfaces(self):
        """Gets the mgw_interfaces of this ListOfInterfacesType.


        :return: The mgw_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._mgw_interfaces

    @mgw_interfaces.setter
    def mgw_interfaces(self, mgw_interfaces):
        """Sets the mgw_interfaces of this ListOfInterfacesType.


        :param mgw_interfaces: The mgw_interfaces of this ListOfInterfacesType.
        :type mgw_interfaces: List[str]
        """
        allowed_values = ["Mc", "Nb-UP", "Iu-UP"]  # noqa: E501
        if not set(mgw_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `mgw_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mgw_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mgw_interfaces = mgw_interfaces

    @property
    def rnc_interfaces(self):
        """Gets the rnc_interfaces of this ListOfInterfacesType.


        :return: The rnc_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._rnc_interfaces

    @rnc_interfaces.setter
    def rnc_interfaces(self, rnc_interfaces):
        """Sets the rnc_interfaces of this ListOfInterfacesType.


        :param rnc_interfaces: The rnc_interfaces of this ListOfInterfacesType.
        :type rnc_interfaces: List[str]
        """
        allowed_values = ["Iu-CS", "Iu-PS", "Iur", "Iub", "Uu"]  # noqa: E501
        if not set(rnc_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `rnc_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(rnc_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._rnc_interfaces = rnc_interfaces

    @property
    def sgsn_interfaces(self):
        """Gets the sgsn_interfaces of this ListOfInterfacesType.


        :return: The sgsn_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._sgsn_interfaces

    @sgsn_interfaces.setter
    def sgsn_interfaces(self, sgsn_interfaces):
        """Sets the sgsn_interfaces of this ListOfInterfacesType.


        :param sgsn_interfaces: The sgsn_interfaces of this ListOfInterfacesType.
        :type sgsn_interfaces: List[str]
        """
        allowed_values = ["Gb", "Iu-PS", "Gn", "MAP-Gr", "MAP-Gd", "MAP-Gf", "Ge", "Gs", "S6d", "S4", "S3", "S13"]  # noqa: E501
        if not set(sgsn_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sgsn_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(sgsn_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._sgsn_interfaces = sgsn_interfaces

    @property
    def ggsn_interfaces(self):
        """Gets the ggsn_interfaces of this ListOfInterfacesType.


        :return: The ggsn_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._ggsn_interfaces

    @ggsn_interfaces.setter
    def ggsn_interfaces(self, ggsn_interfaces):
        """Sets the ggsn_interfaces of this ListOfInterfacesType.


        :param ggsn_interfaces: The ggsn_interfaces of this ListOfInterfacesType.
        :type ggsn_interfaces: List[str]
        """
        allowed_values = ["Gn", "Gi", "Gmb"]  # noqa: E501
        if not set(ggsn_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ggsn_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ggsn_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ggsn_interfaces = ggsn_interfaces

    @property
    def s_cscf_interfaces(self):
        """Gets the s_cscf_interfaces of this ListOfInterfacesType.


        :return: The s_cscf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._s_cscf_interfaces

    @s_cscf_interfaces.setter
    def s_cscf_interfaces(self, s_cscf_interfaces):
        """Sets the s_cscf_interfaces of this ListOfInterfacesType.


        :param s_cscf_interfaces: The s_cscf_interfaces of this ListOfInterfacesType.
        :type s_cscf_interfaces: List[str]
        """
        allowed_values = ["Mw", "Mg", "Mr", "Mi"]  # noqa: E501
        if not set(s_cscf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `s_cscf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(s_cscf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._s_cscf_interfaces = s_cscf_interfaces

    @property
    def p_cscf_interfaces(self):
        """Gets the p_cscf_interfaces of this ListOfInterfacesType.


        :return: The p_cscf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._p_cscf_interfaces

    @p_cscf_interfaces.setter
    def p_cscf_interfaces(self, p_cscf_interfaces):
        """Sets the p_cscf_interfaces of this ListOfInterfacesType.


        :param p_cscf_interfaces: The p_cscf_interfaces of this ListOfInterfacesType.
        :type p_cscf_interfaces: List[str]
        """
        allowed_values = ["Gm", "Mw"]  # noqa: E501
        if not set(p_cscf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `p_cscf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(p_cscf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._p_cscf_interfaces = p_cscf_interfaces

    @property
    def i_cscf_interfaces(self):
        """Gets the i_cscf_interfaces of this ListOfInterfacesType.


        :return: The i_cscf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._i_cscf_interfaces

    @i_cscf_interfaces.setter
    def i_cscf_interfaces(self, i_cscf_interfaces):
        """Sets the i_cscf_interfaces of this ListOfInterfacesType.


        :param i_cscf_interfaces: The i_cscf_interfaces of this ListOfInterfacesType.
        :type i_cscf_interfaces: List[str]
        """
        allowed_values = ["Cx", "Dx", "Mg", "Mw"]  # noqa: E501
        if not set(i_cscf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `i_cscf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(i_cscf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._i_cscf_interfaces = i_cscf_interfaces

    @property
    def mrfc_interfaces(self):
        """Gets the mrfc_interfaces of this ListOfInterfacesType.


        :return: The mrfc_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._mrfc_interfaces

    @mrfc_interfaces.setter
    def mrfc_interfaces(self, mrfc_interfaces):
        """Sets the mrfc_interfaces of this ListOfInterfacesType.


        :param mrfc_interfaces: The mrfc_interfaces of this ListOfInterfacesType.
        :type mrfc_interfaces: List[str]
        """
        allowed_values = ["Mp", "Mr"]  # noqa: E501
        if not set(mrfc_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `mrfc_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mrfc_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mrfc_interfaces = mrfc_interfaces

    @property
    def mgcf_interfaces(self):
        """Gets the mgcf_interfaces of this ListOfInterfacesType.


        :return: The mgcf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._mgcf_interfaces

    @mgcf_interfaces.setter
    def mgcf_interfaces(self, mgcf_interfaces):
        """Sets the mgcf_interfaces of this ListOfInterfacesType.


        :param mgcf_interfaces: The mgcf_interfaces of this ListOfInterfacesType.
        :type mgcf_interfaces: List[str]
        """
        allowed_values = ["Mg", "Mj", "Mn"]  # noqa: E501
        if not set(mgcf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `mgcf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mgcf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mgcf_interfaces = mgcf_interfaces

    @property
    def ibcf_interfaces(self):
        """Gets the ibcf_interfaces of this ListOfInterfacesType.


        :return: The ibcf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._ibcf_interfaces

    @ibcf_interfaces.setter
    def ibcf_interfaces(self, ibcf_interfaces):
        """Sets the ibcf_interfaces of this ListOfInterfacesType.


        :param ibcf_interfaces: The ibcf_interfaces of this ListOfInterfacesType.
        :type ibcf_interfaces: List[str]
        """
        allowed_values = ["Ix", "Mx"]  # noqa: E501
        if not set(ibcf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ibcf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ibcf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ibcf_interfaces = ibcf_interfaces

    @property
    def e_cscf_interfaces(self):
        """Gets the e_cscf_interfaces of this ListOfInterfacesType.


        :return: The e_cscf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._e_cscf_interfaces

    @e_cscf_interfaces.setter
    def e_cscf_interfaces(self, e_cscf_interfaces):
        """Sets the e_cscf_interfaces of this ListOfInterfacesType.


        :param e_cscf_interfaces: The e_cscf_interfaces of this ListOfInterfacesType.
        :type e_cscf_interfaces: List[str]
        """
        allowed_values = ["Mw", "Ml", "Mm", "Mi/Mg"]  # noqa: E501
        if not set(e_cscf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `e_cscf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(e_cscf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._e_cscf_interfaces = e_cscf_interfaces

    @property
    def bgcf_interfaces(self):
        """Gets the bgcf_interfaces of this ListOfInterfacesType.


        :return: The bgcf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._bgcf_interfaces

    @bgcf_interfaces.setter
    def bgcf_interfaces(self, bgcf_interfaces):
        """Sets the bgcf_interfaces of this ListOfInterfacesType.


        :param bgcf_interfaces: The bgcf_interfaces of this ListOfInterfacesType.
        :type bgcf_interfaces: List[str]
        """
        allowed_values = ["Mi", "Mj", "Mk"]  # noqa: E501
        if not set(bgcf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `bgcf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(bgcf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._bgcf_interfaces = bgcf_interfaces

    @property
    def as_interfaces(self):
        """Gets the as_interfaces of this ListOfInterfacesType.


        :return: The as_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._as_interfaces

    @as_interfaces.setter
    def as_interfaces(self, as_interfaces):
        """Sets the as_interfaces of this ListOfInterfacesType.


        :param as_interfaces: The as_interfaces of this ListOfInterfacesType.
        :type as_interfaces: List[str]
        """
        allowed_values = ["Dh", "Sh", "ISC", "Ut"]  # noqa: E501
        if not set(as_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `as_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(as_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._as_interfaces = as_interfaces

    @property
    def hss_interfaces(self):
        """Gets the hss_interfaces of this ListOfInterfacesType.


        :return: The hss_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._hss_interfaces

    @hss_interfaces.setter
    def hss_interfaces(self, hss_interfaces):
        """Sets the hss_interfaces of this ListOfInterfacesType.


        :param hss_interfaces: The hss_interfaces of this ListOfInterfacesType.
        :type hss_interfaces: List[str]
        """
        allowed_values = ["MAP-C", "MAP-D", "Gc", "Gr", "Cx", "S6d", "S6a", "Sh", "N70", "N71", "NU1"]  # noqa: E501
        if not set(hss_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `hss_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(hss_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._hss_interfaces = hss_interfaces

    @property
    def eir_interfaces(self):
        """Gets the eir_interfaces of this ListOfInterfacesType.


        :return: The eir_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._eir_interfaces

    @eir_interfaces.setter
    def eir_interfaces(self, eir_interfaces):
        """Sets the eir_interfaces of this ListOfInterfacesType.


        :param eir_interfaces: The eir_interfaces of this ListOfInterfacesType.
        :type eir_interfaces: List[str]
        """
        allowed_values = ["MAP-F", "S13", "MAP-Gf"]  # noqa: E501
        if not set(eir_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `eir_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(eir_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._eir_interfaces = eir_interfaces

    @property
    def bm_sc_interfaces(self):
        """Gets the bm_sc_interfaces of this ListOfInterfacesType.


        :return: The bm_sc_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._bm_sc_interfaces

    @bm_sc_interfaces.setter
    def bm_sc_interfaces(self, bm_sc_interfaces):
        """Sets the bm_sc_interfaces of this ListOfInterfacesType.


        :param bm_sc_interfaces: The bm_sc_interfaces of this ListOfInterfacesType.
        :type bm_sc_interfaces: List[str]
        """
        allowed_values = ["Gmb"]  # noqa: E501
        if not set(bm_sc_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `bm_sc_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(bm_sc_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._bm_sc_interfaces = bm_sc_interfaces

    @property
    def mme_interfaces(self):
        """Gets the mme_interfaces of this ListOfInterfacesType.


        :return: The mme_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._mme_interfaces

    @mme_interfaces.setter
    def mme_interfaces(self, mme_interfaces):
        """Sets the mme_interfaces of this ListOfInterfacesType.


        :param mme_interfaces: The mme_interfaces of this ListOfInterfacesType.
        :type mme_interfaces: List[str]
        """
        allowed_values = ["S1-MME", "S3", "S6a", "S10", "S11", "S13"]  # noqa: E501
        if not set(mme_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `mme_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mme_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mme_interfaces = mme_interfaces

    @property
    def sgw_interfaces(self):
        """Gets the sgw_interfaces of this ListOfInterfacesType.


        :return: The sgw_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._sgw_interfaces

    @sgw_interfaces.setter
    def sgw_interfaces(self, sgw_interfaces):
        """Sets the sgw_interfaces of this ListOfInterfacesType.


        :param sgw_interfaces: The sgw_interfaces of this ListOfInterfacesType.
        :type sgw_interfaces: List[str]
        """
        allowed_values = ["S4", "S5", "S8", "S11", "Gxc"]  # noqa: E501
        if not set(sgw_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sgw_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(sgw_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._sgw_interfaces = sgw_interfaces

    @property
    def pdn_gw_interfaces(self):
        """Gets the pdn_gw_interfaces of this ListOfInterfacesType.


        :return: The pdn_gw_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._pdn_gw_interfaces

    @pdn_gw_interfaces.setter
    def pdn_gw_interfaces(self, pdn_gw_interfaces):
        """Sets the pdn_gw_interfaces of this ListOfInterfacesType.


        :param pdn_gw_interfaces: The pdn_gw_interfaces of this ListOfInterfacesType.
        :type pdn_gw_interfaces: List[str]
        """
        allowed_values = ["S2a", "S2b", "S2c", "S5", "S6b", "Gx", "S8", "SGi"]  # noqa: E501
        if not set(pdn_gw_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `pdn_gw_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(pdn_gw_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._pdn_gw_interfaces = pdn_gw_interfaces

    @property
    def e_nb_interfaces(self):
        """Gets the e_nb_interfaces of this ListOfInterfacesType.


        :return: The e_nb_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._e_nb_interfaces

    @e_nb_interfaces.setter
    def e_nb_interfaces(self, e_nb_interfaces):
        """Sets the e_nb_interfaces of this ListOfInterfacesType.


        :param e_nb_interfaces: The e_nb_interfaces of this ListOfInterfacesType.
        :type e_nb_interfaces: List[str]
        """
        allowed_values = ["S1-MME", "X2"]  # noqa: E501
        if not set(e_nb_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `e_nb_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(e_nb_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._e_nb_interfaces = e_nb_interfaces

    @property
    def en_g_nb_interfaces(self):
        """Gets the en_g_nb_interfaces of this ListOfInterfacesType.


        :return: The en_g_nb_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._en_g_nb_interfaces

    @en_g_nb_interfaces.setter
    def en_g_nb_interfaces(self, en_g_nb_interfaces):
        """Sets the en_g_nb_interfaces of this ListOfInterfacesType.


        :param en_g_nb_interfaces: The en_g_nb_interfaces of this ListOfInterfacesType.
        :type en_g_nb_interfaces: List[str]
        """
        allowed_values = ["S1-MME", "X2", "Uu", "F1-C", "E1"]  # noqa: E501
        if not set(en_g_nb_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `en_g_nb_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(en_g_nb_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._en_g_nb_interfaces = en_g_nb_interfaces

    @property
    def amf_interfaces(self):
        """Gets the amf_interfaces of this ListOfInterfacesType.


        :return: The amf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._amf_interfaces

    @amf_interfaces.setter
    def amf_interfaces(self, amf_interfaces):
        """Sets the amf_interfaces of this ListOfInterfacesType.


        :param amf_interfaces: The amf_interfaces of this ListOfInterfacesType.
        :type amf_interfaces: List[str]
        """
        allowed_values = ["N1", "N2", "N8", "N11", "N12", "N14", "N15", "N20", "N22", "N26"]  # noqa: E501
        if not set(amf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `amf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(amf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._amf_interfaces = amf_interfaces

    @property
    def ausf_interfaces(self):
        """Gets the ausf_interfaces of this ListOfInterfacesType.


        :return: The ausf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._ausf_interfaces

    @ausf_interfaces.setter
    def ausf_interfaces(self, ausf_interfaces):
        """Sets the ausf_interfaces of this ListOfInterfacesType.


        :param ausf_interfaces: The ausf_interfaces of this ListOfInterfacesType.
        :type ausf_interfaces: List[str]
        """
        allowed_values = ["N12", "N13"]  # noqa: E501
        if not set(ausf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ausf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ausf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ausf_interfaces = ausf_interfaces

    @property
    def nef_interfaces(self):
        """Gets the nef_interfaces of this ListOfInterfacesType.


        :return: The nef_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._nef_interfaces

    @nef_interfaces.setter
    def nef_interfaces(self, nef_interfaces):
        """Sets the nef_interfaces of this ListOfInterfacesType.


        :param nef_interfaces: The nef_interfaces of this ListOfInterfacesType.
        :type nef_interfaces: List[str]
        """
        allowed_values = ["N29", "N30", "N33"]  # noqa: E501
        if not set(nef_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nef_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(nef_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._nef_interfaces = nef_interfaces

    @property
    def nrf_interfaces(self):
        """Gets the nrf_interfaces of this ListOfInterfacesType.


        :return: The nrf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._nrf_interfaces

    @nrf_interfaces.setter
    def nrf_interfaces(self, nrf_interfaces):
        """Sets the nrf_interfaces of this ListOfInterfacesType.


        :param nrf_interfaces: The nrf_interfaces of this ListOfInterfacesType.
        :type nrf_interfaces: List[str]
        """
        allowed_values = ["N27"]  # noqa: E501
        if not set(nrf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nrf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(nrf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._nrf_interfaces = nrf_interfaces

    @property
    def nssf_interfaces(self):
        """Gets the nssf_interfaces of this ListOfInterfacesType.


        :return: The nssf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._nssf_interfaces

    @nssf_interfaces.setter
    def nssf_interfaces(self, nssf_interfaces):
        """Sets the nssf_interfaces of this ListOfInterfacesType.


        :param nssf_interfaces: The nssf_interfaces of this ListOfInterfacesType.
        :type nssf_interfaces: List[str]
        """
        allowed_values = ["N22", "N31"]  # noqa: E501
        if not set(nssf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nssf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(nssf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._nssf_interfaces = nssf_interfaces

    @property
    def pcf_interfaces(self):
        """Gets the pcf_interfaces of this ListOfInterfacesType.


        :return: The pcf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._pcf_interfaces

    @pcf_interfaces.setter
    def pcf_interfaces(self, pcf_interfaces):
        """Sets the pcf_interfaces of this ListOfInterfacesType.


        :param pcf_interfaces: The pcf_interfaces of this ListOfInterfacesType.
        :type pcf_interfaces: List[str]
        """
        allowed_values = ["N5", "N7", "N15"]  # noqa: E501
        if not set(pcf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `pcf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(pcf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._pcf_interfaces = pcf_interfaces

    @property
    def smf_interfaces(self):
        """Gets the smf_interfaces of this ListOfInterfacesType.


        :return: The smf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._smf_interfaces

    @smf_interfaces.setter
    def smf_interfaces(self, smf_interfaces):
        """Sets the smf_interfaces of this ListOfInterfacesType.


        :param smf_interfaces: The smf_interfaces of this ListOfInterfacesType.
        :type smf_interfaces: List[str]
        """
        allowed_values = ["N4", "N7", "N10", "N11", "S5-C", "N16", "N16a"]  # noqa: E501
        if not set(smf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `smf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(smf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._smf_interfaces = smf_interfaces

    @property
    def smsf_interfaces(self):
        """Gets the smsf_interfaces of this ListOfInterfacesType.


        :return: The smsf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._smsf_interfaces

    @smsf_interfaces.setter
    def smsf_interfaces(self, smsf_interfaces):
        """Sets the smsf_interfaces of this ListOfInterfacesType.


        :param smsf_interfaces: The smsf_interfaces of this ListOfInterfacesType.
        :type smsf_interfaces: List[str]
        """
        allowed_values = ["N20", "N21"]  # noqa: E501
        if not set(smsf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `smsf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(smsf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._smsf_interfaces = smsf_interfaces

    @property
    def udm_interfaces(self):
        """Gets the udm_interfaces of this ListOfInterfacesType.


        :return: The udm_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._udm_interfaces

    @udm_interfaces.setter
    def udm_interfaces(self, udm_interfaces):
        """Sets the udm_interfaces of this ListOfInterfacesType.


        :param udm_interfaces: The udm_interfaces of this ListOfInterfacesType.
        :type udm_interfaces: List[str]
        """
        allowed_values = ["N8", "N10", "N13", "N21", "NU1"]  # noqa: E501
        if not set(udm_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `udm_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(udm_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._udm_interfaces = udm_interfaces

    @property
    def upf_interfaces(self):
        """Gets the upf_interfaces of this ListOfInterfacesType.


        :return: The upf_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._upf_interfaces

    @upf_interfaces.setter
    def upf_interfaces(self, upf_interfaces):
        """Sets the upf_interfaces of this ListOfInterfacesType.


        :param upf_interfaces: The upf_interfaces of this ListOfInterfacesType.
        :type upf_interfaces: List[str]
        """
        allowed_values = ["N4"]  # noqa: E501
        if not set(upf_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `upf_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(upf_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._upf_interfaces = upf_interfaces

    @property
    def ng_e_nb_interfaces(self):
        """Gets the ng_e_nb_interfaces of this ListOfInterfacesType.


        :return: The ng_e_nb_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._ng_e_nb_interfaces

    @ng_e_nb_interfaces.setter
    def ng_e_nb_interfaces(self, ng_e_nb_interfaces):
        """Sets the ng_e_nb_interfaces of this ListOfInterfacesType.


        :param ng_e_nb_interfaces: The ng_e_nb_interfaces of this ListOfInterfacesType.
        :type ng_e_nb_interfaces: List[str]
        """
        allowed_values = ["NG-C", "Xn-C", "Uu"]  # noqa: E501
        if not set(ng_e_nb_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ng_e_nb_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ng_e_nb_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ng_e_nb_interfaces = ng_e_nb_interfaces

    @property
    def g_nb_cu_cp_interfaces(self):
        """Gets the g_nb_cu_cp_interfaces of this ListOfInterfacesType.


        :return: The g_nb_cu_cp_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._g_nb_cu_cp_interfaces

    @g_nb_cu_cp_interfaces.setter
    def g_nb_cu_cp_interfaces(self, g_nb_cu_cp_interfaces):
        """Sets the g_nb_cu_cp_interfaces of this ListOfInterfacesType.


        :param g_nb_cu_cp_interfaces: The g_nb_cu_cp_interfaces of this ListOfInterfacesType.
        :type g_nb_cu_cp_interfaces: List[str]
        """
        allowed_values = ["NG-C", "Xn-C", "Uu", "F1-C", "E1", "X2-C"]  # noqa: E501
        if not set(g_nb_cu_cp_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `g_nb_cu_cp_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(g_nb_cu_cp_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._g_nb_cu_cp_interfaces = g_nb_cu_cp_interfaces

    @property
    def g_nb_cu_up_interfaces(self):
        """Gets the g_nb_cu_up_interfaces of this ListOfInterfacesType.


        :return: The g_nb_cu_up_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._g_nb_cu_up_interfaces

    @g_nb_cu_up_interfaces.setter
    def g_nb_cu_up_interfaces(self, g_nb_cu_up_interfaces):
        """Sets the g_nb_cu_up_interfaces of this ListOfInterfacesType.


        :param g_nb_cu_up_interfaces: The g_nb_cu_up_interfaces of this ListOfInterfacesType.
        :type g_nb_cu_up_interfaces: List[str]
        """
        allowed_values = ["E1"]  # noqa: E501
        if not set(g_nb_cu_up_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `g_nb_cu_up_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(g_nb_cu_up_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._g_nb_cu_up_interfaces = g_nb_cu_up_interfaces

    @property
    def g_nb_du_interfaces(self):
        """Gets the g_nb_du_interfaces of this ListOfInterfacesType.


        :return: The g_nb_du_interfaces of this ListOfInterfacesType.
        :rtype: List[str]
        """
        return self._g_nb_du_interfaces

    @g_nb_du_interfaces.setter
    def g_nb_du_interfaces(self, g_nb_du_interfaces):
        """Sets the g_nb_du_interfaces of this ListOfInterfacesType.


        :param g_nb_du_interfaces: The g_nb_du_interfaces of this ListOfInterfacesType.
        :type g_nb_du_interfaces: List[str]
        """
        allowed_values = ["F1-C"]  # noqa: E501
        if not set(g_nb_du_interfaces).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `g_nb_du_interfaces` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(g_nb_du_interfaces) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._g_nb_du_interfaces = g_nb_du_interfaces
