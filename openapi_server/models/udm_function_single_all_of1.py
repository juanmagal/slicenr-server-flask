# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.epn10_single import EPN10Single
from openapi_server.models.epn13_single import EPN13Single
from openapi_server.models.epn8_single import EPN8Single
from openapi_server import util

from openapi_server.models.epn10_single import EPN10Single  # noqa: E501
from openapi_server.models.epn13_single import EPN13Single  # noqa: E501
from openapi_server.models.epn8_single import EPN8Single  # noqa: E501

class UdmFunctionSingleAllOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ep_n8=None, ep_n10=None, ep_n13=None):  # noqa: E501
        """UdmFunctionSingleAllOf1 - a model defined in OpenAPI

        :param ep_n8: The ep_n8 of this UdmFunctionSingleAllOf1.  # noqa: E501
        :type ep_n8: List[EPN8Single]
        :param ep_n10: The ep_n10 of this UdmFunctionSingleAllOf1.  # noqa: E501
        :type ep_n10: List[EPN10Single]
        :param ep_n13: The ep_n13 of this UdmFunctionSingleAllOf1.  # noqa: E501
        :type ep_n13: List[EPN13Single]
        """
        self.openapi_types = {
            'ep_n8': List[EPN8Single],
            'ep_n10': List[EPN10Single],
            'ep_n13': List[EPN13Single]
        }

        self.attribute_map = {
            'ep_n8': 'EP_N8',
            'ep_n10': 'EP_N10',
            'ep_n13': 'EP_N13'
        }

        self._ep_n8 = ep_n8
        self._ep_n10 = ep_n10
        self._ep_n13 = ep_n13

    @classmethod
    def from_dict(cls, dikt) -> 'UdmFunctionSingleAllOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UdmFunction_Single_allOf_1 of this UdmFunctionSingleAllOf1.  # noqa: E501
        :rtype: UdmFunctionSingleAllOf1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ep_n8(self):
        """Gets the ep_n8 of this UdmFunctionSingleAllOf1.


        :return: The ep_n8 of this UdmFunctionSingleAllOf1.
        :rtype: List[EPN8Single]
        """
        return self._ep_n8

    @ep_n8.setter
    def ep_n8(self, ep_n8):
        """Sets the ep_n8 of this UdmFunctionSingleAllOf1.


        :param ep_n8: The ep_n8 of this UdmFunctionSingleAllOf1.
        :type ep_n8: List[EPN8Single]
        """

        self._ep_n8 = ep_n8

    @property
    def ep_n10(self):
        """Gets the ep_n10 of this UdmFunctionSingleAllOf1.


        :return: The ep_n10 of this UdmFunctionSingleAllOf1.
        :rtype: List[EPN10Single]
        """
        return self._ep_n10

    @ep_n10.setter
    def ep_n10(self, ep_n10):
        """Sets the ep_n10 of this UdmFunctionSingleAllOf1.


        :param ep_n10: The ep_n10 of this UdmFunctionSingleAllOf1.
        :type ep_n10: List[EPN10Single]
        """

        self._ep_n10 = ep_n10

    @property
    def ep_n13(self):
        """Gets the ep_n13 of this UdmFunctionSingleAllOf1.


        :return: The ep_n13 of this UdmFunctionSingleAllOf1.
        :rtype: List[EPN13Single]
        """
        return self._ep_n13

    @ep_n13.setter
    def ep_n13(self, ep_n13):
        """Sets the ep_n13 of this UdmFunctionSingleAllOf1.


        :param ep_n13: The ep_n13 of this UdmFunctionSingleAllOf1.
        :type ep_n13: List[EPN13Single]
        """

        self._ep_n13 = ep_n13
