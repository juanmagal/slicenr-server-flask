# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SequenceDomainPara(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nrof_rimrs_sequence_candidatesof_rs1=None, rim_rs_scramble_id_listof_rs1=None, nrof_rimrs_sequence_candidatesof_rs2=None, rim_rs_scramble_id_listof_rs2=None, enable_enough_not_enough_indication=None, rimrs_scramble_timer_multiplier=None, rimrs_scramble_timer_offset=None):  # noqa: E501
        """SequenceDomainPara - a model defined in OpenAPI

        :param nrof_rimrs_sequence_candidatesof_rs1: The nrof_rimrs_sequence_candidatesof_rs1 of this SequenceDomainPara.  # noqa: E501
        :type nrof_rimrs_sequence_candidatesof_rs1: int
        :param rim_rs_scramble_id_listof_rs1: The rim_rs_scramble_id_listof_rs1 of this SequenceDomainPara.  # noqa: E501
        :type rim_rs_scramble_id_listof_rs1: List[int]
        :param nrof_rimrs_sequence_candidatesof_rs2: The nrof_rimrs_sequence_candidatesof_rs2 of this SequenceDomainPara.  # noqa: E501
        :type nrof_rimrs_sequence_candidatesof_rs2: int
        :param rim_rs_scramble_id_listof_rs2: The rim_rs_scramble_id_listof_rs2 of this SequenceDomainPara.  # noqa: E501
        :type rim_rs_scramble_id_listof_rs2: List[int]
        :param enable_enough_not_enough_indication: The enable_enough_not_enough_indication of this SequenceDomainPara.  # noqa: E501
        :type enable_enough_not_enough_indication: str
        :param rimrs_scramble_timer_multiplier: The rimrs_scramble_timer_multiplier of this SequenceDomainPara.  # noqa: E501
        :type rimrs_scramble_timer_multiplier: int
        :param rimrs_scramble_timer_offset: The rimrs_scramble_timer_offset of this SequenceDomainPara.  # noqa: E501
        :type rimrs_scramble_timer_offset: int
        """
        self.openapi_types = {
            'nrof_rimrs_sequence_candidatesof_rs1': int,
            'rim_rs_scramble_id_listof_rs1': List[int],
            'nrof_rimrs_sequence_candidatesof_rs2': int,
            'rim_rs_scramble_id_listof_rs2': List[int],
            'enable_enough_not_enough_indication': str,
            'rimrs_scramble_timer_multiplier': int,
            'rimrs_scramble_timer_offset': int
        }

        self.attribute_map = {
            'nrof_rimrs_sequence_candidatesof_rs1': 'nrofRIMRSSequenceCandidatesofRS1',
            'rim_rs_scramble_id_listof_rs1': 'rimRSScrambleIdListofRS1',
            'nrof_rimrs_sequence_candidatesof_rs2': 'nrofRIMRSSequenceCandidatesofRS2',
            'rim_rs_scramble_id_listof_rs2': 'rimRSScrambleIdListofRS2',
            'enable_enough_not_enough_indication': 'enableEnoughNotEnoughIndication',
            'rimrs_scramble_timer_multiplier': 'RIMRSScrambleTimerMultiplier',
            'rimrs_scramble_timer_offset': 'RIMRSScrambleTimerOffset'
        }

        self._nrof_rimrs_sequence_candidatesof_rs1 = nrof_rimrs_sequence_candidatesof_rs1
        self._rim_rs_scramble_id_listof_rs1 = rim_rs_scramble_id_listof_rs1
        self._nrof_rimrs_sequence_candidatesof_rs2 = nrof_rimrs_sequence_candidatesof_rs2
        self._rim_rs_scramble_id_listof_rs2 = rim_rs_scramble_id_listof_rs2
        self._enable_enough_not_enough_indication = enable_enough_not_enough_indication
        self._rimrs_scramble_timer_multiplier = rimrs_scramble_timer_multiplier
        self._rimrs_scramble_timer_offset = rimrs_scramble_timer_offset

    @classmethod
    def from_dict(cls, dikt) -> 'SequenceDomainPara':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SequenceDomainPara of this SequenceDomainPara.  # noqa: E501
        :rtype: SequenceDomainPara
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nrof_rimrs_sequence_candidatesof_rs1(self):
        """Gets the nrof_rimrs_sequence_candidatesof_rs1 of this SequenceDomainPara.


        :return: The nrof_rimrs_sequence_candidatesof_rs1 of this SequenceDomainPara.
        :rtype: int
        """
        return self._nrof_rimrs_sequence_candidatesof_rs1

    @nrof_rimrs_sequence_candidatesof_rs1.setter
    def nrof_rimrs_sequence_candidatesof_rs1(self, nrof_rimrs_sequence_candidatesof_rs1):
        """Sets the nrof_rimrs_sequence_candidatesof_rs1 of this SequenceDomainPara.


        :param nrof_rimrs_sequence_candidatesof_rs1: The nrof_rimrs_sequence_candidatesof_rs1 of this SequenceDomainPara.
        :type nrof_rimrs_sequence_candidatesof_rs1: int
        """

        self._nrof_rimrs_sequence_candidatesof_rs1 = nrof_rimrs_sequence_candidatesof_rs1

    @property
    def rim_rs_scramble_id_listof_rs1(self):
        """Gets the rim_rs_scramble_id_listof_rs1 of this SequenceDomainPara.


        :return: The rim_rs_scramble_id_listof_rs1 of this SequenceDomainPara.
        :rtype: List[int]
        """
        return self._rim_rs_scramble_id_listof_rs1

    @rim_rs_scramble_id_listof_rs1.setter
    def rim_rs_scramble_id_listof_rs1(self, rim_rs_scramble_id_listof_rs1):
        """Sets the rim_rs_scramble_id_listof_rs1 of this SequenceDomainPara.


        :param rim_rs_scramble_id_listof_rs1: The rim_rs_scramble_id_listof_rs1 of this SequenceDomainPara.
        :type rim_rs_scramble_id_listof_rs1: List[int]
        """

        self._rim_rs_scramble_id_listof_rs1 = rim_rs_scramble_id_listof_rs1

    @property
    def nrof_rimrs_sequence_candidatesof_rs2(self):
        """Gets the nrof_rimrs_sequence_candidatesof_rs2 of this SequenceDomainPara.


        :return: The nrof_rimrs_sequence_candidatesof_rs2 of this SequenceDomainPara.
        :rtype: int
        """
        return self._nrof_rimrs_sequence_candidatesof_rs2

    @nrof_rimrs_sequence_candidatesof_rs2.setter
    def nrof_rimrs_sequence_candidatesof_rs2(self, nrof_rimrs_sequence_candidatesof_rs2):
        """Sets the nrof_rimrs_sequence_candidatesof_rs2 of this SequenceDomainPara.


        :param nrof_rimrs_sequence_candidatesof_rs2: The nrof_rimrs_sequence_candidatesof_rs2 of this SequenceDomainPara.
        :type nrof_rimrs_sequence_candidatesof_rs2: int
        """

        self._nrof_rimrs_sequence_candidatesof_rs2 = nrof_rimrs_sequence_candidatesof_rs2

    @property
    def rim_rs_scramble_id_listof_rs2(self):
        """Gets the rim_rs_scramble_id_listof_rs2 of this SequenceDomainPara.


        :return: The rim_rs_scramble_id_listof_rs2 of this SequenceDomainPara.
        :rtype: List[int]
        """
        return self._rim_rs_scramble_id_listof_rs2

    @rim_rs_scramble_id_listof_rs2.setter
    def rim_rs_scramble_id_listof_rs2(self, rim_rs_scramble_id_listof_rs2):
        """Sets the rim_rs_scramble_id_listof_rs2 of this SequenceDomainPara.


        :param rim_rs_scramble_id_listof_rs2: The rim_rs_scramble_id_listof_rs2 of this SequenceDomainPara.
        :type rim_rs_scramble_id_listof_rs2: List[int]
        """

        self._rim_rs_scramble_id_listof_rs2 = rim_rs_scramble_id_listof_rs2

    @property
    def enable_enough_not_enough_indication(self):
        """Gets the enable_enough_not_enough_indication of this SequenceDomainPara.


        :return: The enable_enough_not_enough_indication of this SequenceDomainPara.
        :rtype: str
        """
        return self._enable_enough_not_enough_indication

    @enable_enough_not_enough_indication.setter
    def enable_enough_not_enough_indication(self, enable_enough_not_enough_indication):
        """Sets the enable_enough_not_enough_indication of this SequenceDomainPara.


        :param enable_enough_not_enough_indication: The enable_enough_not_enough_indication of this SequenceDomainPara.
        :type enable_enough_not_enough_indication: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if enable_enough_not_enough_indication not in allowed_values:
            raise ValueError(
                "Invalid value for `enable_enough_not_enough_indication` ({0}), must be one of {1}"
                .format(enable_enough_not_enough_indication, allowed_values)
            )

        self._enable_enough_not_enough_indication = enable_enough_not_enough_indication

    @property
    def rimrs_scramble_timer_multiplier(self):
        """Gets the rimrs_scramble_timer_multiplier of this SequenceDomainPara.


        :return: The rimrs_scramble_timer_multiplier of this SequenceDomainPara.
        :rtype: int
        """
        return self._rimrs_scramble_timer_multiplier

    @rimrs_scramble_timer_multiplier.setter
    def rimrs_scramble_timer_multiplier(self, rimrs_scramble_timer_multiplier):
        """Sets the rimrs_scramble_timer_multiplier of this SequenceDomainPara.


        :param rimrs_scramble_timer_multiplier: The rimrs_scramble_timer_multiplier of this SequenceDomainPara.
        :type rimrs_scramble_timer_multiplier: int
        """

        self._rimrs_scramble_timer_multiplier = rimrs_scramble_timer_multiplier

    @property
    def rimrs_scramble_timer_offset(self):
        """Gets the rimrs_scramble_timer_offset of this SequenceDomainPara.


        :return: The rimrs_scramble_timer_offset of this SequenceDomainPara.
        :rtype: int
        """
        return self._rimrs_scramble_timer_offset

    @rimrs_scramble_timer_offset.setter
    def rimrs_scramble_timer_offset(self, rimrs_scramble_timer_offset):
        """Sets the rimrs_scramble_timer_offset of this SequenceDomainPara.


        :param rimrs_scramble_timer_offset: The rimrs_scramble_timer_offset of this SequenceDomainPara.
        :type rimrs_scramble_timer_offset: int
        """

        self._rimrs_scramble_timer_offset = rimrs_scramble_timer_offset
