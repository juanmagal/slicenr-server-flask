# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MnsInfoSingle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mns_label=None, mns_type=None, mns_version=None, mns_address=None, mns_scope=None):  # noqa: E501
        """MnsInfoSingle - a model defined in OpenAPI

        :param mns_label: The mns_label of this MnsInfoSingle.  # noqa: E501
        :type mns_label: str
        :param mns_type: The mns_type of this MnsInfoSingle.  # noqa: E501
        :type mns_type: str
        :param mns_version: The mns_version of this MnsInfoSingle.  # noqa: E501
        :type mns_version: str
        :param mns_address: The mns_address of this MnsInfoSingle.  # noqa: E501
        :type mns_address: str
        :param mns_scope: The mns_scope of this MnsInfoSingle.  # noqa: E501
        :type mns_scope: List[str]
        """
        self.openapi_types = {
            'mns_label': str,
            'mns_type': str,
            'mns_version': str,
            'mns_address': str,
            'mns_scope': List[str]
        }

        self.attribute_map = {
            'mns_label': 'mnsLabel',
            'mns_type': 'mnsType',
            'mns_version': 'mnsVersion',
            'mns_address': 'mnsAddress',
            'mns_scope': 'mnsScope'
        }

        self._mns_label = mns_label
        self._mns_type = mns_type
        self._mns_version = mns_version
        self._mns_address = mns_address
        self._mns_scope = mns_scope

    @classmethod
    def from_dict(cls, dikt) -> 'MnsInfoSingle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MnsInfo-Single of this MnsInfoSingle.  # noqa: E501
        :rtype: MnsInfoSingle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mns_label(self):
        """Gets the mns_label of this MnsInfoSingle.


        :return: The mns_label of this MnsInfoSingle.
        :rtype: str
        """
        return self._mns_label

    @mns_label.setter
    def mns_label(self, mns_label):
        """Sets the mns_label of this MnsInfoSingle.


        :param mns_label: The mns_label of this MnsInfoSingle.
        :type mns_label: str
        """

        self._mns_label = mns_label

    @property
    def mns_type(self):
        """Gets the mns_type of this MnsInfoSingle.


        :return: The mns_type of this MnsInfoSingle.
        :rtype: str
        """
        return self._mns_type

    @mns_type.setter
    def mns_type(self, mns_type):
        """Sets the mns_type of this MnsInfoSingle.


        :param mns_type: The mns_type of this MnsInfoSingle.
        :type mns_type: str
        """
        allowed_values = ["ProvMnS", "FaultSupervisionMnS", "StreamingDataReportingMnS", "FileDataReportingMnS"]  # noqa: E501
        if mns_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mns_type` ({0}), must be one of {1}"
                .format(mns_type, allowed_values)
            )

        self._mns_type = mns_type

    @property
    def mns_version(self):
        """Gets the mns_version of this MnsInfoSingle.


        :return: The mns_version of this MnsInfoSingle.
        :rtype: str
        """
        return self._mns_version

    @mns_version.setter
    def mns_version(self, mns_version):
        """Sets the mns_version of this MnsInfoSingle.


        :param mns_version: The mns_version of this MnsInfoSingle.
        :type mns_version: str
        """

        self._mns_version = mns_version

    @property
    def mns_address(self):
        """Gets the mns_address of this MnsInfoSingle.


        :return: The mns_address of this MnsInfoSingle.
        :rtype: str
        """
        return self._mns_address

    @mns_address.setter
    def mns_address(self, mns_address):
        """Sets the mns_address of this MnsInfoSingle.


        :param mns_address: The mns_address of this MnsInfoSingle.
        :type mns_address: str
        """

        self._mns_address = mns_address

    @property
    def mns_scope(self):
        """Gets the mns_scope of this MnsInfoSingle.

        List of the managed object instances that can be accessed using the MnS. If a complete SubNetwork can be accessed using the MnS, this attribute may contain the DN of the SubNetwork instead of the DNs of the individual managed entities within the SubNetwork.  # noqa: E501

        :return: The mns_scope of this MnsInfoSingle.
        :rtype: List[str]
        """
        return self._mns_scope

    @mns_scope.setter
    def mns_scope(self, mns_scope):
        """Sets the mns_scope of this MnsInfoSingle.

        List of the managed object instances that can be accessed using the MnS. If a complete SubNetwork can be accessed using the MnS, this attribute may contain the DN of the SubNetwork instead of the DNs of the individual managed entities within the SubNetwork.  # noqa: E501

        :param mns_scope: The mns_scope of this MnsInfoSingle.
        :type mns_scope: List[str]
        """

        self._mns_scope = mns_scope
