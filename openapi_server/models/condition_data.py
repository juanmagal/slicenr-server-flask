# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.access_type import AccessType
from openapi_server.models.rat_type import RatType
from openapi_server import util

from openapi_server.models.access_type import AccessType  # noqa: E501
from openapi_server.models.rat_type import RatType  # noqa: E501

class ConditionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cond_id=None, activation_time=None, deactivation_time=None, access_type=None, rat_type=None):  # noqa: E501
        """ConditionData - a model defined in OpenAPI

        :param cond_id: The cond_id of this ConditionData.  # noqa: E501
        :type cond_id: str
        :param activation_time: The activation_time of this ConditionData.  # noqa: E501
        :type activation_time: datetime
        :param deactivation_time: The deactivation_time of this ConditionData.  # noqa: E501
        :type deactivation_time: datetime
        :param access_type: The access_type of this ConditionData.  # noqa: E501
        :type access_type: AccessType
        :param rat_type: The rat_type of this ConditionData.  # noqa: E501
        :type rat_type: RatType
        """
        self.openapi_types = {
            'cond_id': str,
            'activation_time': datetime,
            'deactivation_time': datetime,
            'access_type': AccessType,
            'rat_type': RatType
        }

        self.attribute_map = {
            'cond_id': 'condId',
            'activation_time': 'activationTime',
            'deactivation_time': 'deactivationTime',
            'access_type': 'accessType',
            'rat_type': 'ratType'
        }

        self._cond_id = cond_id
        self._activation_time = activation_time
        self._deactivation_time = deactivation_time
        self._access_type = access_type
        self._rat_type = rat_type

    @classmethod
    def from_dict(cls, dikt) -> 'ConditionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConditionData of this ConditionData.  # noqa: E501
        :rtype: ConditionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cond_id(self):
        """Gets the cond_id of this ConditionData.

        Uniquely identifies the condition data within a PDU session.  # noqa: E501

        :return: The cond_id of this ConditionData.
        :rtype: str
        """
        return self._cond_id

    @cond_id.setter
    def cond_id(self, cond_id):
        """Sets the cond_id of this ConditionData.

        Uniquely identifies the condition data within a PDU session.  # noqa: E501

        :param cond_id: The cond_id of this ConditionData.
        :type cond_id: str
        """
        if cond_id is None:
            raise ValueError("Invalid value for `cond_id`, must not be `None`")  # noqa: E501

        self._cond_id = cond_id

    @property
    def activation_time(self):
        """Gets the activation_time of this ConditionData.

        string with format 'date-time' as defined in OpenAPI with 'nullable:true' property.    # noqa: E501

        :return: The activation_time of this ConditionData.
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this ConditionData.

        string with format 'date-time' as defined in OpenAPI with 'nullable:true' property.    # noqa: E501

        :param activation_time: The activation_time of this ConditionData.
        :type activation_time: datetime
        """

        self._activation_time = activation_time

    @property
    def deactivation_time(self):
        """Gets the deactivation_time of this ConditionData.

        string with format 'date-time' as defined in OpenAPI with 'nullable:true' property.    # noqa: E501

        :return: The deactivation_time of this ConditionData.
        :rtype: datetime
        """
        return self._deactivation_time

    @deactivation_time.setter
    def deactivation_time(self, deactivation_time):
        """Sets the deactivation_time of this ConditionData.

        string with format 'date-time' as defined in OpenAPI with 'nullable:true' property.    # noqa: E501

        :param deactivation_time: The deactivation_time of this ConditionData.
        :type deactivation_time: datetime
        """

        self._deactivation_time = deactivation_time

    @property
    def access_type(self):
        """Gets the access_type of this ConditionData.


        :return: The access_type of this ConditionData.
        :rtype: AccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this ConditionData.


        :param access_type: The access_type of this ConditionData.
        :type access_type: AccessType
        """

        self._access_type = access_type

    @property
    def rat_type(self):
        """Gets the rat_type of this ConditionData.


        :return: The rat_type of this ConditionData.
        :rtype: RatType
        """
        return self._rat_type

    @rat_type.setter
    def rat_type(self, rat_type):
        """Sets the rat_type of this ConditionData.


        :param rat_type: The rat_type of this ConditionData.
        :type rat_type: RatType
        """

        self._rat_type = rat_type
