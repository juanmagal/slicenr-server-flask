# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TriggeringEventsType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msc_server=None, sgsn=None, mgw=None, ggsn=None, ims=None, bm_sc=None, mme=None, sgw=None, pgw=None, amf=None, smf=None, pcf=None, upf=None, ausf=None, nef=None, nrf=None, nssf=None, smsf=None, udm=None):  # noqa: E501
        """TriggeringEventsType - a model defined in OpenAPI

        :param msc_server: The msc_server of this TriggeringEventsType.  # noqa: E501
        :type msc_server: List[str]
        :param sgsn: The sgsn of this TriggeringEventsType.  # noqa: E501
        :type sgsn: List[str]
        :param mgw: The mgw of this TriggeringEventsType.  # noqa: E501
        :type mgw: List[str]
        :param ggsn: The ggsn of this TriggeringEventsType.  # noqa: E501
        :type ggsn: List[str]
        :param ims: The ims of this TriggeringEventsType.  # noqa: E501
        :type ims: List[str]
        :param bm_sc: The bm_sc of this TriggeringEventsType.  # noqa: E501
        :type bm_sc: List[str]
        :param mme: The mme of this TriggeringEventsType.  # noqa: E501
        :type mme: List[str]
        :param sgw: The sgw of this TriggeringEventsType.  # noqa: E501
        :type sgw: List[str]
        :param pgw: The pgw of this TriggeringEventsType.  # noqa: E501
        :type pgw: List[str]
        :param amf: The amf of this TriggeringEventsType.  # noqa: E501
        :type amf: List[str]
        :param smf: The smf of this TriggeringEventsType.  # noqa: E501
        :type smf: List[str]
        :param pcf: The pcf of this TriggeringEventsType.  # noqa: E501
        :type pcf: List[str]
        :param upf: The upf of this TriggeringEventsType.  # noqa: E501
        :type upf: List[str]
        :param ausf: The ausf of this TriggeringEventsType.  # noqa: E501
        :type ausf: List[str]
        :param nef: The nef of this TriggeringEventsType.  # noqa: E501
        :type nef: List[str]
        :param nrf: The nrf of this TriggeringEventsType.  # noqa: E501
        :type nrf: List[str]
        :param nssf: The nssf of this TriggeringEventsType.  # noqa: E501
        :type nssf: List[str]
        :param smsf: The smsf of this TriggeringEventsType.  # noqa: E501
        :type smsf: List[str]
        :param udm: The udm of this TriggeringEventsType.  # noqa: E501
        :type udm: List[str]
        """
        self.openapi_types = {
            'msc_server': List[str],
            'sgsn': List[str],
            'mgw': List[str],
            'ggsn': List[str],
            'ims': List[str],
            'bm_sc': List[str],
            'mme': List[str],
            'sgw': List[str],
            'pgw': List[str],
            'amf': List[str],
            'smf': List[str],
            'pcf': List[str],
            'upf': List[str],
            'ausf': List[str],
            'nef': List[str],
            'nrf': List[str],
            'nssf': List[str],
            'smsf': List[str],
            'udm': List[str]
        }

        self.attribute_map = {
            'msc_server': 'MSC_SERVER',
            'sgsn': 'SGSN',
            'mgw': 'MGW',
            'ggsn': 'GGSN',
            'ims': 'IMS',
            'bm_sc': 'BM_SC',
            'mme': 'MME',
            'sgw': 'SGW',
            'pgw': 'PGW',
            'amf': 'AMF',
            'smf': 'SMF',
            'pcf': 'PCF',
            'upf': 'UPF',
            'ausf': 'AUSF',
            'nef': 'NEF',
            'nrf': 'NRF',
            'nssf': 'NSSF',
            'smsf': 'SMSF',
            'udm': 'UDM'
        }

        self._msc_server = msc_server
        self._sgsn = sgsn
        self._mgw = mgw
        self._ggsn = ggsn
        self._ims = ims
        self._bm_sc = bm_sc
        self._mme = mme
        self._sgw = sgw
        self._pgw = pgw
        self._amf = amf
        self._smf = smf
        self._pcf = pcf
        self._upf = upf
        self._ausf = ausf
        self._nef = nef
        self._nrf = nrf
        self._nssf = nssf
        self._smsf = smsf
        self._udm = udm

    @classmethod
    def from_dict(cls, dikt) -> 'TriggeringEventsType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The triggeringEvents-Type of this TriggeringEventsType.  # noqa: E501
        :rtype: TriggeringEventsType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msc_server(self):
        """Gets the msc_server of this TriggeringEventsType.


        :return: The msc_server of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._msc_server

    @msc_server.setter
    def msc_server(self, msc_server):
        """Sets the msc_server of this TriggeringEventsType.


        :param msc_server: The msc_server of this TriggeringEventsType.
        :type msc_server: List[str]
        """
        allowed_values = ["MO_MT_CALLS", "MO_MT_SMS", "LU_IMSIattach_IMSIdetach", "HANDOVER", "SS"]  # noqa: E501
        if not set(msc_server).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `msc_server` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(msc_server) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._msc_server = msc_server

    @property
    def sgsn(self):
        """Gets the sgsn of this TriggeringEventsType.


        :return: The sgsn of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._sgsn

    @sgsn.setter
    def sgsn(self, sgsn):
        """Sets the sgsn of this TriggeringEventsType.


        :param sgsn: The sgsn of this TriggeringEventsType.
        :type sgsn: List[str]
        """
        allowed_values = ["PDPcontext", "MO_MT_SMS", "RAU_GPRSattach_GPRSdetach", "MBMScontext"]  # noqa: E501
        if not set(sgsn).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sgsn` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(sgsn) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._sgsn = sgsn

    @property
    def mgw(self):
        """Gets the mgw of this TriggeringEventsType.


        :return: The mgw of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._mgw

    @mgw.setter
    def mgw(self, mgw):
        """Sets the mgw of this TriggeringEventsType.


        :param mgw: The mgw of this TriggeringEventsType.
        :type mgw: List[str]
        """
        allowed_values = ["CONTEXT"]  # noqa: E501
        if not set(mgw).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `mgw` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mgw) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mgw = mgw

    @property
    def ggsn(self):
        """Gets the ggsn of this TriggeringEventsType.


        :return: The ggsn of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._ggsn

    @ggsn.setter
    def ggsn(self, ggsn):
        """Sets the ggsn of this TriggeringEventsType.


        :param ggsn: The ggsn of this TriggeringEventsType.
        :type ggsn: List[str]
        """
        allowed_values = ["PDPcontext", "MBMScontext"]  # noqa: E501
        if not set(ggsn).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ggsn` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ggsn) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ggsn = ggsn

    @property
    def ims(self):
        """Gets the ims of this TriggeringEventsType.


        :return: The ims of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._ims

    @ims.setter
    def ims(self, ims):
        """Sets the ims of this TriggeringEventsType.


        :param ims: The ims of this TriggeringEventsType.
        :type ims: List[str]
        """
        allowed_values = ["SIPsession_StandaloneTransaction"]  # noqa: E501
        if not set(ims).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ims` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ims) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ims = ims

    @property
    def bm_sc(self):
        """Gets the bm_sc of this TriggeringEventsType.


        :return: The bm_sc of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._bm_sc

    @bm_sc.setter
    def bm_sc(self, bm_sc):
        """Sets the bm_sc of this TriggeringEventsType.


        :param bm_sc: The bm_sc of this TriggeringEventsType.
        :type bm_sc: List[str]
        """
        allowed_values = ["MBMSactivation"]  # noqa: E501
        if not set(bm_sc).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `bm_sc` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(bm_sc) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._bm_sc = bm_sc

    @property
    def mme(self):
        """Gets the mme of this TriggeringEventsType.


        :return: The mme of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._mme

    @mme.setter
    def mme(self, mme):
        """Sets the mme of this TriggeringEventsType.


        :param mme: The mme of this TriggeringEventsType.
        :type mme: List[str]
        """
        allowed_values = ["UEinitiatedPDNconnectivityRequest", "ServiceRequest", "InitialAttach_TAU_Detach", "UEinitiatedPDNdisconnection", "BearerActivationModificationDeletion", "Handover"]  # noqa: E501
        if not set(mme).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `mme` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mme) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mme = mme

    @property
    def sgw(self):
        """Gets the sgw of this TriggeringEventsType.


        :return: The sgw of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._sgw

    @sgw.setter
    def sgw(self, sgw):
        """Sets the sgw of this TriggeringEventsType.


        :param sgw: The sgw of this TriggeringEventsType.
        :type sgw: List[str]
        """
        allowed_values = ["PDNconnectionCreation", "PDNconnectionTermination", "BearerActivationModificationDeletion"]  # noqa: E501
        if not set(sgw).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sgw` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(sgw) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._sgw = sgw

    @property
    def pgw(self):
        """Gets the pgw of this TriggeringEventsType.


        :return: The pgw of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._pgw

    @pgw.setter
    def pgw(self, pgw):
        """Sets the pgw of this TriggeringEventsType.


        :param pgw: The pgw of this TriggeringEventsType.
        :type pgw: List[str]
        """
        allowed_values = ["PDNconnectionCreation", "PDNconnectionTermination", "BearerActivationModificationDeletion"]  # noqa: E501
        if not set(pgw).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `pgw` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(pgw) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._pgw = pgw

    @property
    def amf(self):
        """Gets the amf of this TriggeringEventsType.


        :return: The amf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._amf

    @amf.setter
    def amf(self, amf):
        """Sets the amf of this TriggeringEventsType.


        :param amf: The amf of this TriggeringEventsType.
        :type amf: List[str]
        """
        allowed_values = ["Registration", "ServiceRequest", "Handover", "UEderegistration", "NetworkDeregistration", "UEMobilityFromEPC", "UEMobilityToEPC"]  # noqa: E501
        if not set(amf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `amf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(amf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._amf = amf

    @property
    def smf(self):
        """Gets the smf of this TriggeringEventsType.


        :return: The smf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._smf

    @smf.setter
    def smf(self, smf):
        """Sets the smf of this TriggeringEventsType.


        :param smf: The smf of this TriggeringEventsType.
        :type smf: List[str]
        """
        allowed_values = ["PDUsessionEstablishment", "PDUsessionModification", "PDUsessionRelease", "PDUsessionUPactivationDeactivation", "MobilityBtw3gppAndN3gppTo5GC", "MobilityFromEpc"]  # noqa: E501
        if not set(smf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `smf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(smf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._smf = smf

    @property
    def pcf(self):
        """Gets the pcf of this TriggeringEventsType.


        :return: The pcf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._pcf

    @pcf.setter
    def pcf(self, pcf):
        """Sets the pcf of this TriggeringEventsType.


        :param pcf: The pcf of this TriggeringEventsType.
        :type pcf: List[str]
        """
        allowed_values = ["AMpolicy", "SMpolicy", "Authorization", "BDTpolicy"]  # noqa: E501
        if not set(pcf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `pcf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(pcf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._pcf = pcf

    @property
    def upf(self):
        """Gets the upf of this TriggeringEventsType.


        :return: The upf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._upf

    @upf.setter
    def upf(self, upf):
        """Sets the upf of this TriggeringEventsType.


        :param upf: The upf of this TriggeringEventsType.
        :type upf: List[str]
        """
        allowed_values = ["N4Session"]  # noqa: E501
        if not set(upf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `upf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(upf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._upf = upf

    @property
    def ausf(self):
        """Gets the ausf of this TriggeringEventsType.


        :return: The ausf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._ausf

    @ausf.setter
    def ausf(self, ausf):
        """Sets the ausf of this TriggeringEventsType.


        :param ausf: The ausf of this TriggeringEventsType.
        :type ausf: List[str]
        """
        allowed_values = ["UEauthentication"]  # noqa: E501
        if not set(ausf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ausf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ausf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ausf = ausf

    @property
    def nef(self):
        """Gets the nef of this TriggeringEventsType.


        :return: The nef of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._nef

    @nef.setter
    def nef(self, nef):
        """Sets the nef of this TriggeringEventsType.


        :param nef: The nef of this TriggeringEventsType.
        :type nef: List[str]
        """
        allowed_values = ["EventExposure", "PFDmanagement", "ParameterProvision", "Trigger"]  # noqa: E501
        if not set(nef).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nef` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(nef) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._nef = nef

    @property
    def nrf(self):
        """Gets the nrf of this TriggeringEventsType.


        :return: The nrf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._nrf

    @nrf.setter
    def nrf(self, nrf):
        """Sets the nrf of this TriggeringEventsType.


        :param nrf: The nrf of this TriggeringEventsType.
        :type nrf: List[str]
        """
        allowed_values = ["NFmanagement", "NFdiscovery"]  # noqa: E501
        if not set(nrf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nrf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(nrf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._nrf = nrf

    @property
    def nssf(self):
        """Gets the nssf of this TriggeringEventsType.


        :return: The nssf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._nssf

    @nssf.setter
    def nssf(self, nssf):
        """Sets the nssf of this TriggeringEventsType.


        :param nssf: The nssf of this TriggeringEventsType.
        :type nssf: List[str]
        """
        allowed_values = ["NSSelection", "NSSAI"]  # noqa: E501
        if not set(nssf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nssf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(nssf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._nssf = nssf

    @property
    def smsf(self):
        """Gets the smsf of this TriggeringEventsType.


        :return: The smsf of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._smsf

    @smsf.setter
    def smsf(self, smsf):
        """Sets the smsf of this TriggeringEventsType.


        :param smsf: The smsf of this TriggeringEventsType.
        :type smsf: List[str]
        """
        allowed_values = ["SMservice"]  # noqa: E501
        if not set(smsf).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `smsf` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(smsf) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._smsf = smsf

    @property
    def udm(self):
        """Gets the udm of this TriggeringEventsType.


        :return: The udm of this TriggeringEventsType.
        :rtype: List[str]
        """
        return self._udm

    @udm.setter
    def udm(self, udm):
        """Sets the udm of this TriggeringEventsType.


        :param udm: The udm of this TriggeringEventsType.
        :type udm: List[str]
        """
        allowed_values = ["UEcontext", "SubscriberData", "UEauthentication", "EventExposure"]  # noqa: E501
        if not set(udm).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `udm` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(udm) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._udm = udm
