# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.reporting_ctrl_one_of import ReportingCtrlOneOf
from openapi_server.models.reporting_ctrl_one_of1 import ReportingCtrlOneOf1
from openapi_server.models.reporting_ctrl_one_of2 import ReportingCtrlOneOf2
from openapi_server import util

from openapi_server.models.reporting_ctrl_one_of import ReportingCtrlOneOf  # noqa: E501
from openapi_server.models.reporting_ctrl_one_of1 import ReportingCtrlOneOf1  # noqa: E501
from openapi_server.models.reporting_ctrl_one_of2 import ReportingCtrlOneOf2  # noqa: E501

class ReportingCtrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_reporting_period=None, file_location=None, stream_target=None):  # noqa: E501
        """ReportingCtrl - a model defined in OpenAPI

        :param file_reporting_period: The file_reporting_period of this ReportingCtrl.  # noqa: E501
        :type file_reporting_period: int
        :param file_location: The file_location of this ReportingCtrl.  # noqa: E501
        :type file_location: str
        :param stream_target: The stream_target of this ReportingCtrl.  # noqa: E501
        :type stream_target: str
        """
        self.openapi_types = {
            'file_reporting_period': int,
            'file_location': str,
            'stream_target': str
        }

        self.attribute_map = {
            'file_reporting_period': 'fileReportingPeriod',
            'file_location': 'fileLocation',
            'stream_target': 'streamTarget'
        }

        self._file_reporting_period = file_reporting_period
        self._file_location = file_location
        self._stream_target = stream_target

    @classmethod
    def from_dict(cls, dikt) -> 'ReportingCtrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportingCtrl of this ReportingCtrl.  # noqa: E501
        :rtype: ReportingCtrl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_reporting_period(self):
        """Gets the file_reporting_period of this ReportingCtrl.


        :return: The file_reporting_period of this ReportingCtrl.
        :rtype: int
        """
        return self._file_reporting_period

    @file_reporting_period.setter
    def file_reporting_period(self, file_reporting_period):
        """Sets the file_reporting_period of this ReportingCtrl.


        :param file_reporting_period: The file_reporting_period of this ReportingCtrl.
        :type file_reporting_period: int
        """

        self._file_reporting_period = file_reporting_period

    @property
    def file_location(self):
        """Gets the file_location of this ReportingCtrl.


        :return: The file_location of this ReportingCtrl.
        :rtype: str
        """
        return self._file_location

    @file_location.setter
    def file_location(self, file_location):
        """Sets the file_location of this ReportingCtrl.


        :param file_location: The file_location of this ReportingCtrl.
        :type file_location: str
        """

        self._file_location = file_location

    @property
    def stream_target(self):
        """Gets the stream_target of this ReportingCtrl.


        :return: The stream_target of this ReportingCtrl.
        :rtype: str
        """
        return self._stream_target

    @stream_target.setter
    def stream_target(self, stream_target):
        """Sets the stream_target of this ReportingCtrl.


        :param stream_target: The stream_target of this ReportingCtrl.
        :type stream_target: str
        """

        self._stream_target = stream_target
