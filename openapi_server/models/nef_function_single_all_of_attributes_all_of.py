# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.managed_nf_profile import ManagedNFProfile
from openapi_server.models.snssai import Snssai
from openapi_server.models.tai import Tai
from openapi_server.models.tai_range import TaiRange
from openapi_server import util

from openapi_server.models.managed_nf_profile import ManagedNFProfile  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501
from openapi_server.models.tai_range import TaiRange  # noqa: E501

class NefFunctionSingleAllOfAttributesAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s_bi_fqdn=None, snssai_list=None, managed_nf_profile=None, capability_list=None, is_capif_sup=None, tai_list=None, tai_range_list=None, dnai=None):  # noqa: E501
        """NefFunctionSingleAllOfAttributesAllOf - a model defined in OpenAPI

        :param s_bi_fqdn: The s_bi_fqdn of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type s_bi_fqdn: str
        :param snssai_list: The snssai_list of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type snssai_list: List[Snssai]
        :param managed_nf_profile: The managed_nf_profile of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type managed_nf_profile: ManagedNFProfile
        :param capability_list: The capability_list of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type capability_list: List[str]
        :param is_capif_sup: The is_capif_sup of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type is_capif_sup: bool
        :param tai_list: The tai_list of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type tai_list: List[Tai]
        :param tai_range_list: The tai_range_list of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param dnai: The dnai of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type dnai: str
        """
        self.openapi_types = {
            's_bi_fqdn': str,
            'snssai_list': List[Snssai],
            'managed_nf_profile': ManagedNFProfile,
            'capability_list': List[str],
            'is_capif_sup': bool,
            'tai_list': List[Tai],
            'tai_range_list': List[TaiRange],
            'dnai': str
        }

        self.attribute_map = {
            's_bi_fqdn': 'sBIFqdn',
            'snssai_list': 'snssaiList',
            'managed_nf_profile': 'managedNFProfile',
            'capability_list': 'capabilityList',
            'is_capif_sup': 'isCAPIFSup',
            'tai_list': 'taiList',
            'tai_range_list': 'taiRangeList',
            'dnai': 'dnai'
        }

        self._s_bi_fqdn = s_bi_fqdn
        self._snssai_list = snssai_list
        self._managed_nf_profile = managed_nf_profile
        self._capability_list = capability_list
        self._is_capif_sup = is_capif_sup
        self._tai_list = tai_list
        self._tai_range_list = tai_range_list
        self._dnai = dnai

    @classmethod
    def from_dict(cls, dikt) -> 'NefFunctionSingleAllOfAttributesAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NefFunction_Single_allOf_attributes_allOf of this NefFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :rtype: NefFunctionSingleAllOfAttributesAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s_bi_fqdn(self):
        """Gets the s_bi_fqdn of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The s_bi_fqdn of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: str
        """
        return self._s_bi_fqdn

    @s_bi_fqdn.setter
    def s_bi_fqdn(self, s_bi_fqdn):
        """Sets the s_bi_fqdn of this NefFunctionSingleAllOfAttributesAllOf.


        :param s_bi_fqdn: The s_bi_fqdn of this NefFunctionSingleAllOfAttributesAllOf.
        :type s_bi_fqdn: str
        """

        self._s_bi_fqdn = s_bi_fqdn

    @property
    def snssai_list(self):
        """Gets the snssai_list of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The snssai_list of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: List[Snssai]
        """
        return self._snssai_list

    @snssai_list.setter
    def snssai_list(self, snssai_list):
        """Sets the snssai_list of this NefFunctionSingleAllOfAttributesAllOf.


        :param snssai_list: The snssai_list of this NefFunctionSingleAllOfAttributesAllOf.
        :type snssai_list: List[Snssai]
        """

        self._snssai_list = snssai_list

    @property
    def managed_nf_profile(self):
        """Gets the managed_nf_profile of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The managed_nf_profile of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: ManagedNFProfile
        """
        return self._managed_nf_profile

    @managed_nf_profile.setter
    def managed_nf_profile(self, managed_nf_profile):
        """Sets the managed_nf_profile of this NefFunctionSingleAllOfAttributesAllOf.


        :param managed_nf_profile: The managed_nf_profile of this NefFunctionSingleAllOfAttributesAllOf.
        :type managed_nf_profile: ManagedNFProfile
        """

        self._managed_nf_profile = managed_nf_profile

    @property
    def capability_list(self):
        """Gets the capability_list of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The capability_list of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: List[str]
        """
        return self._capability_list

    @capability_list.setter
    def capability_list(self, capability_list):
        """Sets the capability_list of this NefFunctionSingleAllOfAttributesAllOf.


        :param capability_list: The capability_list of this NefFunctionSingleAllOfAttributesAllOf.
        :type capability_list: List[str]
        """

        self._capability_list = capability_list

    @property
    def is_capif_sup(self):
        """Gets the is_capif_sup of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The is_capif_sup of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: bool
        """
        return self._is_capif_sup

    @is_capif_sup.setter
    def is_capif_sup(self, is_capif_sup):
        """Sets the is_capif_sup of this NefFunctionSingleAllOfAttributesAllOf.


        :param is_capif_sup: The is_capif_sup of this NefFunctionSingleAllOfAttributesAllOf.
        :type is_capif_sup: bool
        """

        self._is_capif_sup = is_capif_sup

    @property
    def tai_list(self):
        """Gets the tai_list of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The tai_list of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: List[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this NefFunctionSingleAllOfAttributesAllOf.


        :param tai_list: The tai_list of this NefFunctionSingleAllOfAttributesAllOf.
        :type tai_list: List[Tai]
        """

        self._tai_list = tai_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The tai_range_list of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this NefFunctionSingleAllOfAttributesAllOf.


        :param tai_range_list: The tai_range_list of this NefFunctionSingleAllOfAttributesAllOf.
        :type tai_range_list: List[TaiRange]
        """

        self._tai_range_list = tai_range_list

    @property
    def dnai(self):
        """Gets the dnai of this NefFunctionSingleAllOfAttributesAllOf.


        :return: The dnai of this NefFunctionSingleAllOfAttributesAllOf.
        :rtype: str
        """
        return self._dnai

    @dnai.setter
    def dnai(self, dnai):
        """Sets the dnai of this NefFunctionSingleAllOfAttributesAllOf.


        :param dnai: The dnai of this NefFunctionSingleAllOfAttributesAllOf.
        :type dnai: str
        """

        self._dnai = dnai
