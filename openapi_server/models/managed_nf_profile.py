# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.host_addr import HostAddr
from openapi_server.models.nf_info import NFInfo
from openapi_server.models.nf_type import NFType
from openapi_server.models.plmn_id import PlmnId
from openapi_server.models.snpn_info import SnpnInfo
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.host_addr import HostAddr  # noqa: E501
from openapi_server.models.nf_info import NFInfo  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.plmn_id import PlmnId  # noqa: E501
from openapi_server.models.snpn_info import SnpnInfo  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class ManagedNFProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_instance_id=None, nf_type=None, heartbeat_timer=None, authz_info=None, host_addr=None, allowed_plmns=None, allowed_snpns=None, allowed_nf_types=None, allowed_nf_domains=None, allowed_nssais=None, locality=None, n_f_info=None, capacity=None, nf_set_id_list=None, serving_scope=None, nf_set_recovery_time_list=None, scp_domains=None, vendor_id=None):  # noqa: E501
        """ManagedNFProfile - a model defined in OpenAPI

        :param nf_instance_id: The nf_instance_id of this ManagedNFProfile.  # noqa: E501
        :type nf_instance_id: str
        :param nf_type: The nf_type of this ManagedNFProfile.  # noqa: E501
        :type nf_type: NFType
        :param heartbeat_timer: The heartbeat_timer of this ManagedNFProfile.  # noqa: E501
        :type heartbeat_timer: int
        :param authz_info: The authz_info of this ManagedNFProfile.  # noqa: E501
        :type authz_info: str
        :param host_addr: The host_addr of this ManagedNFProfile.  # noqa: E501
        :type host_addr: HostAddr
        :param allowed_plmns: The allowed_plmns of this ManagedNFProfile.  # noqa: E501
        :type allowed_plmns: List[PlmnId]
        :param allowed_snpns: The allowed_snpns of this ManagedNFProfile.  # noqa: E501
        :type allowed_snpns: List[SnpnInfo]
        :param allowed_nf_types: The allowed_nf_types of this ManagedNFProfile.  # noqa: E501
        :type allowed_nf_types: List[NFType]
        :param allowed_nf_domains: The allowed_nf_domains of this ManagedNFProfile.  # noqa: E501
        :type allowed_nf_domains: List[str]
        :param allowed_nssais: The allowed_nssais of this ManagedNFProfile.  # noqa: E501
        :type allowed_nssais: List[Snssai]
        :param locality: The locality of this ManagedNFProfile.  # noqa: E501
        :type locality: str
        :param n_f_info: The n_f_info of this ManagedNFProfile.  # noqa: E501
        :type n_f_info: NFInfo
        :param capacity: The capacity of this ManagedNFProfile.  # noqa: E501
        :type capacity: int
        :param nf_set_id_list: The nf_set_id_list of this ManagedNFProfile.  # noqa: E501
        :type nf_set_id_list: List[str]
        :param serving_scope: The serving_scope of this ManagedNFProfile.  # noqa: E501
        :type serving_scope: List[str]
        :param nf_set_recovery_time_list: The nf_set_recovery_time_list of this ManagedNFProfile.  # noqa: E501
        :type nf_set_recovery_time_list: List[datetime]
        :param scp_domains: The scp_domains of this ManagedNFProfile.  # noqa: E501
        :type scp_domains: List[str]
        :param vendor_id: The vendor_id of this ManagedNFProfile.  # noqa: E501
        :type vendor_id: str
        """
        self.openapi_types = {
            'nf_instance_id': str,
            'nf_type': NFType,
            'heartbeat_timer': int,
            'authz_info': str,
            'host_addr': HostAddr,
            'allowed_plmns': List[PlmnId],
            'allowed_snpns': List[SnpnInfo],
            'allowed_nf_types': List[NFType],
            'allowed_nf_domains': List[str],
            'allowed_nssais': List[Snssai],
            'locality': str,
            'n_f_info': NFInfo,
            'capacity': int,
            'nf_set_id_list': List[str],
            'serving_scope': List[str],
            'nf_set_recovery_time_list': List[datetime],
            'scp_domains': List[str],
            'vendor_id': str
        }

        self.attribute_map = {
            'nf_instance_id': 'nfInstanceID',
            'nf_type': 'nfType',
            'heartbeat_timer': 'heartbeatTimer',
            'authz_info': 'authzInfo',
            'host_addr': 'hostAddr',
            'allowed_plmns': 'allowedPLMNs',
            'allowed_snpns': 'allowedSNPNs',
            'allowed_nf_types': 'allowedNfTypes',
            'allowed_nf_domains': 'allowedNfDomains',
            'allowed_nssais': 'allowedNSSAIs',
            'locality': 'locality',
            'n_f_info': 'nFInfo',
            'capacity': 'capacity',
            'nf_set_id_list': 'nfSetIdList',
            'serving_scope': 'servingScope',
            'nf_set_recovery_time_list': 'nfSetRecoveryTimeList',
            'scp_domains': 'scpDomains',
            'vendor_id': 'vendorId'
        }

        self._nf_instance_id = nf_instance_id
        self._nf_type = nf_type
        self._heartbeat_timer = heartbeat_timer
        self._authz_info = authz_info
        self._host_addr = host_addr
        self._allowed_plmns = allowed_plmns
        self._allowed_snpns = allowed_snpns
        self._allowed_nf_types = allowed_nf_types
        self._allowed_nf_domains = allowed_nf_domains
        self._allowed_nssais = allowed_nssais
        self._locality = locality
        self._n_f_info = n_f_info
        self._capacity = capacity
        self._nf_set_id_list = nf_set_id_list
        self._serving_scope = serving_scope
        self._nf_set_recovery_time_list = nf_set_recovery_time_list
        self._scp_domains = scp_domains
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt) -> 'ManagedNFProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManagedNFProfile of this ManagedNFProfile.  # noqa: E501
        :rtype: ManagedNFProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_instance_id(self):
        """Gets the nf_instance_id of this ManagedNFProfile.


        :return: The nf_instance_id of this ManagedNFProfile.
        :rtype: str
        """
        return self._nf_instance_id

    @nf_instance_id.setter
    def nf_instance_id(self, nf_instance_id):
        """Sets the nf_instance_id of this ManagedNFProfile.


        :param nf_instance_id: The nf_instance_id of this ManagedNFProfile.
        :type nf_instance_id: str
        """

        self._nf_instance_id = nf_instance_id

    @property
    def nf_type(self):
        """Gets the nf_type of this ManagedNFProfile.


        :return: The nf_type of this ManagedNFProfile.
        :rtype: NFType
        """
        return self._nf_type

    @nf_type.setter
    def nf_type(self, nf_type):
        """Sets the nf_type of this ManagedNFProfile.


        :param nf_type: The nf_type of this ManagedNFProfile.
        :type nf_type: NFType
        """

        self._nf_type = nf_type

    @property
    def heartbeat_timer(self):
        """Gets the heartbeat_timer of this ManagedNFProfile.


        :return: The heartbeat_timer of this ManagedNFProfile.
        :rtype: int
        """
        return self._heartbeat_timer

    @heartbeat_timer.setter
    def heartbeat_timer(self, heartbeat_timer):
        """Sets the heartbeat_timer of this ManagedNFProfile.


        :param heartbeat_timer: The heartbeat_timer of this ManagedNFProfile.
        :type heartbeat_timer: int
        """

        self._heartbeat_timer = heartbeat_timer

    @property
    def authz_info(self):
        """Gets the authz_info of this ManagedNFProfile.


        :return: The authz_info of this ManagedNFProfile.
        :rtype: str
        """
        return self._authz_info

    @authz_info.setter
    def authz_info(self, authz_info):
        """Sets the authz_info of this ManagedNFProfile.


        :param authz_info: The authz_info of this ManagedNFProfile.
        :type authz_info: str
        """

        self._authz_info = authz_info

    @property
    def host_addr(self):
        """Gets the host_addr of this ManagedNFProfile.


        :return: The host_addr of this ManagedNFProfile.
        :rtype: HostAddr
        """
        return self._host_addr

    @host_addr.setter
    def host_addr(self, host_addr):
        """Sets the host_addr of this ManagedNFProfile.


        :param host_addr: The host_addr of this ManagedNFProfile.
        :type host_addr: HostAddr
        """

        self._host_addr = host_addr

    @property
    def allowed_plmns(self):
        """Gets the allowed_plmns of this ManagedNFProfile.


        :return: The allowed_plmns of this ManagedNFProfile.
        :rtype: List[PlmnId]
        """
        return self._allowed_plmns

    @allowed_plmns.setter
    def allowed_plmns(self, allowed_plmns):
        """Sets the allowed_plmns of this ManagedNFProfile.


        :param allowed_plmns: The allowed_plmns of this ManagedNFProfile.
        :type allowed_plmns: List[PlmnId]
        """

        self._allowed_plmns = allowed_plmns

    @property
    def allowed_snpns(self):
        """Gets the allowed_snpns of this ManagedNFProfile.


        :return: The allowed_snpns of this ManagedNFProfile.
        :rtype: List[SnpnInfo]
        """
        return self._allowed_snpns

    @allowed_snpns.setter
    def allowed_snpns(self, allowed_snpns):
        """Sets the allowed_snpns of this ManagedNFProfile.


        :param allowed_snpns: The allowed_snpns of this ManagedNFProfile.
        :type allowed_snpns: List[SnpnInfo]
        """

        self._allowed_snpns = allowed_snpns

    @property
    def allowed_nf_types(self):
        """Gets the allowed_nf_types of this ManagedNFProfile.


        :return: The allowed_nf_types of this ManagedNFProfile.
        :rtype: List[NFType]
        """
        return self._allowed_nf_types

    @allowed_nf_types.setter
    def allowed_nf_types(self, allowed_nf_types):
        """Sets the allowed_nf_types of this ManagedNFProfile.


        :param allowed_nf_types: The allowed_nf_types of this ManagedNFProfile.
        :type allowed_nf_types: List[NFType]
        """

        self._allowed_nf_types = allowed_nf_types

    @property
    def allowed_nf_domains(self):
        """Gets the allowed_nf_domains of this ManagedNFProfile.


        :return: The allowed_nf_domains of this ManagedNFProfile.
        :rtype: List[str]
        """
        return self._allowed_nf_domains

    @allowed_nf_domains.setter
    def allowed_nf_domains(self, allowed_nf_domains):
        """Sets the allowed_nf_domains of this ManagedNFProfile.


        :param allowed_nf_domains: The allowed_nf_domains of this ManagedNFProfile.
        :type allowed_nf_domains: List[str]
        """

        self._allowed_nf_domains = allowed_nf_domains

    @property
    def allowed_nssais(self):
        """Gets the allowed_nssais of this ManagedNFProfile.


        :return: The allowed_nssais of this ManagedNFProfile.
        :rtype: List[Snssai]
        """
        return self._allowed_nssais

    @allowed_nssais.setter
    def allowed_nssais(self, allowed_nssais):
        """Sets the allowed_nssais of this ManagedNFProfile.


        :param allowed_nssais: The allowed_nssais of this ManagedNFProfile.
        :type allowed_nssais: List[Snssai]
        """

        self._allowed_nssais = allowed_nssais

    @property
    def locality(self):
        """Gets the locality of this ManagedNFProfile.


        :return: The locality of this ManagedNFProfile.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this ManagedNFProfile.


        :param locality: The locality of this ManagedNFProfile.
        :type locality: str
        """

        self._locality = locality

    @property
    def n_f_info(self):
        """Gets the n_f_info of this ManagedNFProfile.


        :return: The n_f_info of this ManagedNFProfile.
        :rtype: NFInfo
        """
        return self._n_f_info

    @n_f_info.setter
    def n_f_info(self, n_f_info):
        """Sets the n_f_info of this ManagedNFProfile.


        :param n_f_info: The n_f_info of this ManagedNFProfile.
        :type n_f_info: NFInfo
        """

        self._n_f_info = n_f_info

    @property
    def capacity(self):
        """Gets the capacity of this ManagedNFProfile.


        :return: The capacity of this ManagedNFProfile.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ManagedNFProfile.


        :param capacity: The capacity of this ManagedNFProfile.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def nf_set_id_list(self):
        """Gets the nf_set_id_list of this ManagedNFProfile.


        :return: The nf_set_id_list of this ManagedNFProfile.
        :rtype: List[str]
        """
        return self._nf_set_id_list

    @nf_set_id_list.setter
    def nf_set_id_list(self, nf_set_id_list):
        """Sets the nf_set_id_list of this ManagedNFProfile.


        :param nf_set_id_list: The nf_set_id_list of this ManagedNFProfile.
        :type nf_set_id_list: List[str]
        """

        self._nf_set_id_list = nf_set_id_list

    @property
    def serving_scope(self):
        """Gets the serving_scope of this ManagedNFProfile.


        :return: The serving_scope of this ManagedNFProfile.
        :rtype: List[str]
        """
        return self._serving_scope

    @serving_scope.setter
    def serving_scope(self, serving_scope):
        """Sets the serving_scope of this ManagedNFProfile.


        :param serving_scope: The serving_scope of this ManagedNFProfile.
        :type serving_scope: List[str]
        """

        self._serving_scope = serving_scope

    @property
    def nf_set_recovery_time_list(self):
        """Gets the nf_set_recovery_time_list of this ManagedNFProfile.


        :return: The nf_set_recovery_time_list of this ManagedNFProfile.
        :rtype: List[datetime]
        """
        return self._nf_set_recovery_time_list

    @nf_set_recovery_time_list.setter
    def nf_set_recovery_time_list(self, nf_set_recovery_time_list):
        """Sets the nf_set_recovery_time_list of this ManagedNFProfile.


        :param nf_set_recovery_time_list: The nf_set_recovery_time_list of this ManagedNFProfile.
        :type nf_set_recovery_time_list: List[datetime]
        """

        self._nf_set_recovery_time_list = nf_set_recovery_time_list

    @property
    def scp_domains(self):
        """Gets the scp_domains of this ManagedNFProfile.


        :return: The scp_domains of this ManagedNFProfile.
        :rtype: List[str]
        """
        return self._scp_domains

    @scp_domains.setter
    def scp_domains(self, scp_domains):
        """Sets the scp_domains of this ManagedNFProfile.


        :param scp_domains: The scp_domains of this ManagedNFProfile.
        :type scp_domains: List[str]
        """

        self._scp_domains = scp_domains

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ManagedNFProfile.


        :return: The vendor_id of this ManagedNFProfile.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ManagedNFProfile.


        :param vendor_id: The vendor_id of this ManagedNFProfile.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id
