# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class HeartbeatControlSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, heartbeat_ntf_period=None, trigger_heartbeat_ntf=None):  # noqa: E501
        """HeartbeatControlSingleAllOfAttributes - a model defined in OpenAPI

        :param heartbeat_ntf_period: The heartbeat_ntf_period of this HeartbeatControlSingleAllOfAttributes.  # noqa: E501
        :type heartbeat_ntf_period: int
        :param trigger_heartbeat_ntf: The trigger_heartbeat_ntf of this HeartbeatControlSingleAllOfAttributes.  # noqa: E501
        :type trigger_heartbeat_ntf: bool
        """
        self.openapi_types = {
            'heartbeat_ntf_period': int,
            'trigger_heartbeat_ntf': bool
        }

        self.attribute_map = {
            'heartbeat_ntf_period': 'heartbeatNtfPeriod',
            'trigger_heartbeat_ntf': 'triggerHeartbeatNtf'
        }

        self._heartbeat_ntf_period = heartbeat_ntf_period
        self._trigger_heartbeat_ntf = trigger_heartbeat_ntf

    @classmethod
    def from_dict(cls, dikt) -> 'HeartbeatControlSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HeartbeatControl_Single_allOf_attributes of this HeartbeatControlSingleAllOfAttributes.  # noqa: E501
        :rtype: HeartbeatControlSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def heartbeat_ntf_period(self):
        """Gets the heartbeat_ntf_period of this HeartbeatControlSingleAllOfAttributes.


        :return: The heartbeat_ntf_period of this HeartbeatControlSingleAllOfAttributes.
        :rtype: int
        """
        return self._heartbeat_ntf_period

    @heartbeat_ntf_period.setter
    def heartbeat_ntf_period(self, heartbeat_ntf_period):
        """Sets the heartbeat_ntf_period of this HeartbeatControlSingleAllOfAttributes.


        :param heartbeat_ntf_period: The heartbeat_ntf_period of this HeartbeatControlSingleAllOfAttributes.
        :type heartbeat_ntf_period: int
        """
        if heartbeat_ntf_period is not None and heartbeat_ntf_period < 0:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_ntf_period`, must be a value greater than or equal to `0`")  # noqa: E501

        self._heartbeat_ntf_period = heartbeat_ntf_period

    @property
    def trigger_heartbeat_ntf(self):
        """Gets the trigger_heartbeat_ntf of this HeartbeatControlSingleAllOfAttributes.


        :return: The trigger_heartbeat_ntf of this HeartbeatControlSingleAllOfAttributes.
        :rtype: bool
        """
        return self._trigger_heartbeat_ntf

    @trigger_heartbeat_ntf.setter
    def trigger_heartbeat_ntf(self, trigger_heartbeat_ntf):
        """Sets the trigger_heartbeat_ntf of this HeartbeatControlSingleAllOfAttributes.


        :param trigger_heartbeat_ntf: The trigger_heartbeat_ntf of this HeartbeatControlSingleAllOfAttributes.
        :type trigger_heartbeat_ntf: bool
        """

        self._trigger_heartbeat_ntf = trigger_heartbeat_ntf
