# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.syn_availability import SynAvailability
from openapi_server import util

from openapi_server.models.syn_availability import SynAvailability  # noqa: E501

class SynchronicityRANSubnet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability=None, accuracy=None):  # noqa: E501
        """SynchronicityRANSubnet - a model defined in OpenAPI

        :param availability: The availability of this SynchronicityRANSubnet.  # noqa: E501
        :type availability: SynAvailability
        :param accuracy: The accuracy of this SynchronicityRANSubnet.  # noqa: E501
        :type accuracy: float
        """
        self.openapi_types = {
            'availability': SynAvailability,
            'accuracy': float
        }

        self.attribute_map = {
            'availability': 'availability',
            'accuracy': 'accuracy'
        }

        self._availability = availability
        self._accuracy = accuracy

    @classmethod
    def from_dict(cls, dikt) -> 'SynchronicityRANSubnet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SynchronicityRANSubnet of this SynchronicityRANSubnet.  # noqa: E501
        :rtype: SynchronicityRANSubnet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this SynchronicityRANSubnet.


        :return: The availability of this SynchronicityRANSubnet.
        :rtype: SynAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this SynchronicityRANSubnet.


        :param availability: The availability of this SynchronicityRANSubnet.
        :type availability: SynAvailability
        """

        self._availability = availability

    @property
    def accuracy(self):
        """Gets the accuracy of this SynchronicityRANSubnet.


        :return: The accuracy of this SynchronicityRANSubnet.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this SynchronicityRANSubnet.


        :param accuracy: The accuracy of this SynchronicityRANSubnet.
        :type accuracy: float
        """

        self._accuracy = accuracy
