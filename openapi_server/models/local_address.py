# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.address_with_vlan import AddressWithVlan
from openapi_server import util

from openapi_server.models.address_with_vlan import AddressWithVlan  # noqa: E501

class LocalAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_with_vlan=None, port=None):  # noqa: E501
        """LocalAddress - a model defined in OpenAPI

        :param address_with_vlan: The address_with_vlan of this LocalAddress.  # noqa: E501
        :type address_with_vlan: AddressWithVlan
        :param port: The port of this LocalAddress.  # noqa: E501
        :type port: int
        """
        self.openapi_types = {
            'address_with_vlan': AddressWithVlan,
            'port': int
        }

        self.attribute_map = {
            'address_with_vlan': 'addressWithVlan',
            'port': 'port'
        }

        self._address_with_vlan = address_with_vlan
        self._port = port

    @classmethod
    def from_dict(cls, dikt) -> 'LocalAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocalAddress of this LocalAddress.  # noqa: E501
        :rtype: LocalAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_with_vlan(self):
        """Gets the address_with_vlan of this LocalAddress.


        :return: The address_with_vlan of this LocalAddress.
        :rtype: AddressWithVlan
        """
        return self._address_with_vlan

    @address_with_vlan.setter
    def address_with_vlan(self, address_with_vlan):
        """Sets the address_with_vlan of this LocalAddress.


        :param address_with_vlan: The address_with_vlan of this LocalAddress.
        :type address_with_vlan: AddressWithVlan
        """

        self._address_with_vlan = address_with_vlan

    @property
    def port(self):
        """Gets the port of this LocalAddress.


        :return: The port of this LocalAddress.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LocalAddress.


        :param port: The port of this LocalAddress.
        :type port: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port
