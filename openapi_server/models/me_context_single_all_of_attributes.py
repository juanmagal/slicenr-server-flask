# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MeContextSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dn_prefix=None):  # noqa: E501
        """MeContextSingleAllOfAttributes - a model defined in OpenAPI

        :param dn_prefix: The dn_prefix of this MeContextSingleAllOfAttributes.  # noqa: E501
        :type dn_prefix: str
        """
        self.openapi_types = {
            'dn_prefix': str
        }

        self.attribute_map = {
            'dn_prefix': 'dnPrefix'
        }

        self._dn_prefix = dn_prefix

    @classmethod
    def from_dict(cls, dikt) -> 'MeContextSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MeContext_Single_allOf_attributes of this MeContextSingleAllOfAttributes.  # noqa: E501
        :rtype: MeContextSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dn_prefix(self):
        """Gets the dn_prefix of this MeContextSingleAllOfAttributes.


        :return: The dn_prefix of this MeContextSingleAllOfAttributes.
        :rtype: str
        """
        return self._dn_prefix

    @dn_prefix.setter
    def dn_prefix(self, dn_prefix):
        """Sets the dn_prefix of this MeContextSingleAllOfAttributes.


        :param dn_prefix: The dn_prefix of this MeContextSingleAllOfAttributes.
        :type dn_prefix: str
        """

        self._dn_prefix = dn_prefix
