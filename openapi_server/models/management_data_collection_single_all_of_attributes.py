# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.management_data import ManagementData
from openapi_server.models.node_filter import NodeFilter
from openapi_server.models.reporting_ctrl import ReportingCtrl
from openapi_server.models.time_window import TimeWindow
from openapi_server import util

from openapi_server.models.management_data import ManagementData  # noqa: E501
from openapi_server.models.node_filter import NodeFilter  # noqa: E501
from openapi_server.models.reporting_ctrl import ReportingCtrl  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501

class ManagementDataCollectionSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, management_data=None, target_node_filter=None, collection_time_window=None, reporting_ctrl=None, data_scope=None):  # noqa: E501
        """ManagementDataCollectionSingleAllOfAttributes - a model defined in OpenAPI

        :param management_data: The management_data of this ManagementDataCollectionSingleAllOfAttributes.  # noqa: E501
        :type management_data: ManagementData
        :param target_node_filter: The target_node_filter of this ManagementDataCollectionSingleAllOfAttributes.  # noqa: E501
        :type target_node_filter: NodeFilter
        :param collection_time_window: The collection_time_window of this ManagementDataCollectionSingleAllOfAttributes.  # noqa: E501
        :type collection_time_window: TimeWindow
        :param reporting_ctrl: The reporting_ctrl of this ManagementDataCollectionSingleAllOfAttributes.  # noqa: E501
        :type reporting_ctrl: ReportingCtrl
        :param data_scope: The data_scope of this ManagementDataCollectionSingleAllOfAttributes.  # noqa: E501
        :type data_scope: str
        """
        self.openapi_types = {
            'management_data': ManagementData,
            'target_node_filter': NodeFilter,
            'collection_time_window': TimeWindow,
            'reporting_ctrl': ReportingCtrl,
            'data_scope': str
        }

        self.attribute_map = {
            'management_data': 'managementData',
            'target_node_filter': 'targetNodeFilter',
            'collection_time_window': 'collectionTimeWindow',
            'reporting_ctrl': 'reportingCtrl',
            'data_scope': 'dataScope'
        }

        self._management_data = management_data
        self._target_node_filter = target_node_filter
        self._collection_time_window = collection_time_window
        self._reporting_ctrl = reporting_ctrl
        self._data_scope = data_scope

    @classmethod
    def from_dict(cls, dikt) -> 'ManagementDataCollectionSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManagementDataCollection_Single_allOf_attributes of this ManagementDataCollectionSingleAllOfAttributes.  # noqa: E501
        :rtype: ManagementDataCollectionSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def management_data(self):
        """Gets the management_data of this ManagementDataCollectionSingleAllOfAttributes.


        :return: The management_data of this ManagementDataCollectionSingleAllOfAttributes.
        :rtype: ManagementData
        """
        return self._management_data

    @management_data.setter
    def management_data(self, management_data):
        """Sets the management_data of this ManagementDataCollectionSingleAllOfAttributes.


        :param management_data: The management_data of this ManagementDataCollectionSingleAllOfAttributes.
        :type management_data: ManagementData
        """

        self._management_data = management_data

    @property
    def target_node_filter(self):
        """Gets the target_node_filter of this ManagementDataCollectionSingleAllOfAttributes.


        :return: The target_node_filter of this ManagementDataCollectionSingleAllOfAttributes.
        :rtype: NodeFilter
        """
        return self._target_node_filter

    @target_node_filter.setter
    def target_node_filter(self, target_node_filter):
        """Sets the target_node_filter of this ManagementDataCollectionSingleAllOfAttributes.


        :param target_node_filter: The target_node_filter of this ManagementDataCollectionSingleAllOfAttributes.
        :type target_node_filter: NodeFilter
        """

        self._target_node_filter = target_node_filter

    @property
    def collection_time_window(self):
        """Gets the collection_time_window of this ManagementDataCollectionSingleAllOfAttributes.


        :return: The collection_time_window of this ManagementDataCollectionSingleAllOfAttributes.
        :rtype: TimeWindow
        """
        return self._collection_time_window

    @collection_time_window.setter
    def collection_time_window(self, collection_time_window):
        """Sets the collection_time_window of this ManagementDataCollectionSingleAllOfAttributes.


        :param collection_time_window: The collection_time_window of this ManagementDataCollectionSingleAllOfAttributes.
        :type collection_time_window: TimeWindow
        """

        self._collection_time_window = collection_time_window

    @property
    def reporting_ctrl(self):
        """Gets the reporting_ctrl of this ManagementDataCollectionSingleAllOfAttributes.


        :return: The reporting_ctrl of this ManagementDataCollectionSingleAllOfAttributes.
        :rtype: ReportingCtrl
        """
        return self._reporting_ctrl

    @reporting_ctrl.setter
    def reporting_ctrl(self, reporting_ctrl):
        """Sets the reporting_ctrl of this ManagementDataCollectionSingleAllOfAttributes.


        :param reporting_ctrl: The reporting_ctrl of this ManagementDataCollectionSingleAllOfAttributes.
        :type reporting_ctrl: ReportingCtrl
        """

        self._reporting_ctrl = reporting_ctrl

    @property
    def data_scope(self):
        """Gets the data_scope of this ManagementDataCollectionSingleAllOfAttributes.


        :return: The data_scope of this ManagementDataCollectionSingleAllOfAttributes.
        :rtype: str
        """
        return self._data_scope

    @data_scope.setter
    def data_scope(self, data_scope):
        """Sets the data_scope of this ManagementDataCollectionSingleAllOfAttributes.


        :param data_scope: The data_scope of this ManagementDataCollectionSingleAllOfAttributes.
        :type data_scope: str
        """
        allowed_values = ["SNSSAI", "5QI"]  # noqa: E501
        if data_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `data_scope` ({0}), must be one of {1}"
                .format(data_scope, allowed_values)
            )

        self._data_scope = data_scope
