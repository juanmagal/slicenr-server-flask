# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MbsfnArea(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mbsfn_area_id=None, earfcn=None):  # noqa: E501
        """MbsfnArea - a model defined in OpenAPI

        :param mbsfn_area_id: The mbsfn_area_id of this MbsfnArea.  # noqa: E501
        :type mbsfn_area_id: int
        :param earfcn: The earfcn of this MbsfnArea.  # noqa: E501
        :type earfcn: int
        """
        self.openapi_types = {
            'mbsfn_area_id': int,
            'earfcn': int
        }

        self.attribute_map = {
            'mbsfn_area_id': 'mbsfnAreaId',
            'earfcn': 'earfcn'
        }

        self._mbsfn_area_id = mbsfn_area_id
        self._earfcn = earfcn

    @classmethod
    def from_dict(cls, dikt) -> 'MbsfnArea':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MbsfnArea of this MbsfnArea.  # noqa: E501
        :rtype: MbsfnArea
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mbsfn_area_id(self):
        """Gets the mbsfn_area_id of this MbsfnArea.


        :return: The mbsfn_area_id of this MbsfnArea.
        :rtype: int
        """
        return self._mbsfn_area_id

    @mbsfn_area_id.setter
    def mbsfn_area_id(self, mbsfn_area_id):
        """Sets the mbsfn_area_id of this MbsfnArea.


        :param mbsfn_area_id: The mbsfn_area_id of this MbsfnArea.
        :type mbsfn_area_id: int
        """
        if mbsfn_area_id is not None and mbsfn_area_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `mbsfn_area_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._mbsfn_area_id = mbsfn_area_id

    @property
    def earfcn(self):
        """Gets the earfcn of this MbsfnArea.


        :return: The earfcn of this MbsfnArea.
        :rtype: int
        """
        return self._earfcn

    @earfcn.setter
    def earfcn(self, earfcn):
        """Sets the earfcn of this MbsfnArea.


        :param earfcn: The earfcn of this MbsfnArea.
        :type earfcn: int
        """
        if earfcn is not None and earfcn < 1:  # noqa: E501
            raise ValueError("Invalid value for `earfcn`, must be a value greater than or equal to `1`")  # noqa: E501

        self._earfcn = earfcn
