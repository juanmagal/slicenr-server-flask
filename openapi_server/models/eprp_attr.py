# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.supported_perf_metric_group import SupportedPerfMetricGroup
from openapi_server import util

from openapi_server.models.supported_perf_metric_group import SupportedPerfMetricGroup  # noqa: E501

class EPRPAttr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_label=None, far_end_entity=None, supported_perf_metric_groups=None):  # noqa: E501
        """EPRPAttr - a model defined in OpenAPI

        :param user_label: The user_label of this EPRPAttr.  # noqa: E501
        :type user_label: str
        :param far_end_entity: The far_end_entity of this EPRPAttr.  # noqa: E501
        :type far_end_entity: str
        :param supported_perf_metric_groups: The supported_perf_metric_groups of this EPRPAttr.  # noqa: E501
        :type supported_perf_metric_groups: List[SupportedPerfMetricGroup]
        """
        self.openapi_types = {
            'user_label': str,
            'far_end_entity': str,
            'supported_perf_metric_groups': List[SupportedPerfMetricGroup]
        }

        self.attribute_map = {
            'user_label': 'userLabel',
            'far_end_entity': 'farEndEntity',
            'supported_perf_metric_groups': 'supportedPerfMetricGroups'
        }

        self._user_label = user_label
        self._far_end_entity = far_end_entity
        self._supported_perf_metric_groups = supported_perf_metric_groups

    @classmethod
    def from_dict(cls, dikt) -> 'EPRPAttr':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EP_RP-Attr of this EPRPAttr.  # noqa: E501
        :rtype: EPRPAttr
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_label(self):
        """Gets the user_label of this EPRPAttr.


        :return: The user_label of this EPRPAttr.
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """Sets the user_label of this EPRPAttr.


        :param user_label: The user_label of this EPRPAttr.
        :type user_label: str
        """

        self._user_label = user_label

    @property
    def far_end_entity(self):
        """Gets the far_end_entity of this EPRPAttr.


        :return: The far_end_entity of this EPRPAttr.
        :rtype: str
        """
        return self._far_end_entity

    @far_end_entity.setter
    def far_end_entity(self, far_end_entity):
        """Sets the far_end_entity of this EPRPAttr.


        :param far_end_entity: The far_end_entity of this EPRPAttr.
        :type far_end_entity: str
        """

        self._far_end_entity = far_end_entity

    @property
    def supported_perf_metric_groups(self):
        """Gets the supported_perf_metric_groups of this EPRPAttr.


        :return: The supported_perf_metric_groups of this EPRPAttr.
        :rtype: List[SupportedPerfMetricGroup]
        """
        return self._supported_perf_metric_groups

    @supported_perf_metric_groups.setter
    def supported_perf_metric_groups(self, supported_perf_metric_groups):
        """Sets the supported_perf_metric_groups of this EPRPAttr.


        :param supported_perf_metric_groups: The supported_perf_metric_groups of this EPRPAttr.
        :type supported_perf_metric_groups: List[SupportedPerfMetricGroup]
        """

        self._supported_perf_metric_groups = supported_perf_metric_groups
