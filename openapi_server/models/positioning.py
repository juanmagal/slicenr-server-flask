# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.predictionfrequency import Predictionfrequency
from openapi_server.models.serv_attr_com import ServAttrCom
from openapi_server import util

from openapi_server.models.predictionfrequency import Predictionfrequency  # noqa: E501
from openapi_server.models.serv_attr_com import ServAttrCom  # noqa: E501

class Positioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, serv_attr_com=None, availability=None, predictionfrequency=None, accuracy=None):  # noqa: E501
        """Positioning - a model defined in OpenAPI

        :param serv_attr_com: The serv_attr_com of this Positioning.  # noqa: E501
        :type serv_attr_com: ServAttrCom
        :param availability: The availability of this Positioning.  # noqa: E501
        :type availability: List[str]
        :param predictionfrequency: The predictionfrequency of this Positioning.  # noqa: E501
        :type predictionfrequency: Predictionfrequency
        :param accuracy: The accuracy of this Positioning.  # noqa: E501
        :type accuracy: float
        """
        self.openapi_types = {
            'serv_attr_com': ServAttrCom,
            'availability': List[str],
            'predictionfrequency': Predictionfrequency,
            'accuracy': float
        }

        self.attribute_map = {
            'serv_attr_com': 'servAttrCom',
            'availability': 'availability',
            'predictionfrequency': 'predictionfrequency',
            'accuracy': 'accuracy'
        }

        self._serv_attr_com = serv_attr_com
        self._availability = availability
        self._predictionfrequency = predictionfrequency
        self._accuracy = accuracy

    @classmethod
    def from_dict(cls, dikt) -> 'Positioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Positioning of this Positioning.  # noqa: E501
        :rtype: Positioning
        """
        return util.deserialize_model(dikt, cls)

    @property
    def serv_attr_com(self):
        """Gets the serv_attr_com of this Positioning.


        :return: The serv_attr_com of this Positioning.
        :rtype: ServAttrCom
        """
        return self._serv_attr_com

    @serv_attr_com.setter
    def serv_attr_com(self, serv_attr_com):
        """Sets the serv_attr_com of this Positioning.


        :param serv_attr_com: The serv_attr_com of this Positioning.
        :type serv_attr_com: ServAttrCom
        """

        self._serv_attr_com = serv_attr_com

    @property
    def availability(self):
        """Gets the availability of this Positioning.


        :return: The availability of this Positioning.
        :rtype: List[str]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Positioning.


        :param availability: The availability of this Positioning.
        :type availability: List[str]
        """
        allowed_values = ["CIDE-CID", "OTDOA", "RF FINGERPRINTING", "AECID", "HYBRID POSITIONING", "NET-RTK"]  # noqa: E501
        if not set(availability).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `availability` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(availability) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._availability = availability

    @property
    def predictionfrequency(self):
        """Gets the predictionfrequency of this Positioning.


        :return: The predictionfrequency of this Positioning.
        :rtype: Predictionfrequency
        """
        return self._predictionfrequency

    @predictionfrequency.setter
    def predictionfrequency(self, predictionfrequency):
        """Sets the predictionfrequency of this Positioning.


        :param predictionfrequency: The predictionfrequency of this Positioning.
        :type predictionfrequency: Predictionfrequency
        """

        self._predictionfrequency = predictionfrequency

    @property
    def accuracy(self):
        """Gets the accuracy of this Positioning.


        :return: The accuracy of this Positioning.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this Positioning.


        :param accuracy: The accuracy of this Positioning.
        :type accuracy: float
        """

        self._accuracy = accuracy
