# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dnai_change_type import DnaiChangeType
from openapi_server import util

from openapi_server.models.dnai_change_type import DnaiChangeType  # noqa: E501

class UpPathChgEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification_uri=None, notif_corre_id=None, dnai_chg_type=None, af_ack_ind=None):  # noqa: E501
        """UpPathChgEvent - a model defined in OpenAPI

        :param notification_uri: The notification_uri of this UpPathChgEvent.  # noqa: E501
        :type notification_uri: str
        :param notif_corre_id: The notif_corre_id of this UpPathChgEvent.  # noqa: E501
        :type notif_corre_id: str
        :param dnai_chg_type: The dnai_chg_type of this UpPathChgEvent.  # noqa: E501
        :type dnai_chg_type: DnaiChangeType
        :param af_ack_ind: The af_ack_ind of this UpPathChgEvent.  # noqa: E501
        :type af_ack_ind: bool
        """
        self.openapi_types = {
            'notification_uri': str,
            'notif_corre_id': str,
            'dnai_chg_type': DnaiChangeType,
            'af_ack_ind': bool
        }

        self.attribute_map = {
            'notification_uri': 'notificationUri',
            'notif_corre_id': 'notifCorreId',
            'dnai_chg_type': 'dnaiChgType',
            'af_ack_ind': 'afAckInd'
        }

        self._notification_uri = notification_uri
        self._notif_corre_id = notif_corre_id
        self._dnai_chg_type = dnai_chg_type
        self._af_ack_ind = af_ack_ind

    @classmethod
    def from_dict(cls, dikt) -> 'UpPathChgEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpPathChgEvent of this UpPathChgEvent.  # noqa: E501
        :rtype: UpPathChgEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_uri(self):
        """Gets the notification_uri of this UpPathChgEvent.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The notification_uri of this UpPathChgEvent.
        :rtype: str
        """
        return self._notification_uri

    @notification_uri.setter
    def notification_uri(self, notification_uri):
        """Sets the notification_uri of this UpPathChgEvent.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param notification_uri: The notification_uri of this UpPathChgEvent.
        :type notification_uri: str
        """
        if notification_uri is None:
            raise ValueError("Invalid value for `notification_uri`, must not be `None`")  # noqa: E501

        self._notification_uri = notification_uri

    @property
    def notif_corre_id(self):
        """Gets the notif_corre_id of this UpPathChgEvent.

        It is used to set the value of Notification Correlation ID in the notification sent by the SMF.  # noqa: E501

        :return: The notif_corre_id of this UpPathChgEvent.
        :rtype: str
        """
        return self._notif_corre_id

    @notif_corre_id.setter
    def notif_corre_id(self, notif_corre_id):
        """Sets the notif_corre_id of this UpPathChgEvent.

        It is used to set the value of Notification Correlation ID in the notification sent by the SMF.  # noqa: E501

        :param notif_corre_id: The notif_corre_id of this UpPathChgEvent.
        :type notif_corre_id: str
        """
        if notif_corre_id is None:
            raise ValueError("Invalid value for `notif_corre_id`, must not be `None`")  # noqa: E501

        self._notif_corre_id = notif_corre_id

    @property
    def dnai_chg_type(self):
        """Gets the dnai_chg_type of this UpPathChgEvent.


        :return: The dnai_chg_type of this UpPathChgEvent.
        :rtype: DnaiChangeType
        """
        return self._dnai_chg_type

    @dnai_chg_type.setter
    def dnai_chg_type(self, dnai_chg_type):
        """Sets the dnai_chg_type of this UpPathChgEvent.


        :param dnai_chg_type: The dnai_chg_type of this UpPathChgEvent.
        :type dnai_chg_type: DnaiChangeType
        """
        if dnai_chg_type is None:
            raise ValueError("Invalid value for `dnai_chg_type`, must not be `None`")  # noqa: E501

        self._dnai_chg_type = dnai_chg_type

    @property
    def af_ack_ind(self):
        """Gets the af_ack_ind of this UpPathChgEvent.


        :return: The af_ack_ind of this UpPathChgEvent.
        :rtype: bool
        """
        return self._af_ack_ind

    @af_ack_ind.setter
    def af_ack_ind(self, af_ack_ind):
        """Sets the af_ack_ind of this UpPathChgEvent.


        :param af_ack_ind: The af_ack_ind of this UpPathChgEvent.
        :type af_ack_ind: bool
        """

        self._af_ack_ind = af_ack_ind
