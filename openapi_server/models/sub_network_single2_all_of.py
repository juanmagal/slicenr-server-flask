# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ep_transport_single import EPTransportSingle
from openapi_server.models.feasibility_check_and_reservation_job_single import FeasibilityCheckAndReservationJobSingle
from openapi_server.models.network_slice_single import NetworkSliceSingle
from openapi_server.models.network_slice_subnet_provider_capabilities_single import NetworkSliceSubnetProviderCapabilitiesSingle
from openapi_server.models.network_slice_subnet_single import NetworkSliceSubnetSingle
from openapi_server.models.sub_network_single import SubNetworkSingle
from openapi_server import util

from openapi_server.models.ep_transport_single import EPTransportSingle  # noqa: E501
from openapi_server.models.feasibility_check_and_reservation_job_single import FeasibilityCheckAndReservationJobSingle  # noqa: E501
from openapi_server.models.network_slice_single import NetworkSliceSingle  # noqa: E501
from openapi_server.models.network_slice_subnet_provider_capabilities_single import NetworkSliceSubnetProviderCapabilitiesSingle  # noqa: E501
from openapi_server.models.network_slice_subnet_single import NetworkSliceSubnetSingle  # noqa: E501
from openapi_server.models.sub_network_single import SubNetworkSingle  # noqa: E501

class SubNetworkSingle2AllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_network=None, network_slice=None, network_slice_subnet=None, ep_transport=None, network_slice_subnet_provider_capabilities=None, feasibility_check_and_reservation_job=None):  # noqa: E501
        """SubNetworkSingle2AllOf - a model defined in OpenAPI

        :param sub_network: The sub_network of this SubNetworkSingle2AllOf.  # noqa: E501
        :type sub_network: List[SubNetworkSingle]
        :param network_slice: The network_slice of this SubNetworkSingle2AllOf.  # noqa: E501
        :type network_slice: List[NetworkSliceSingle]
        :param network_slice_subnet: The network_slice_subnet of this SubNetworkSingle2AllOf.  # noqa: E501
        :type network_slice_subnet: List[NetworkSliceSubnetSingle]
        :param ep_transport: The ep_transport of this SubNetworkSingle2AllOf.  # noqa: E501
        :type ep_transport: List[EPTransportSingle]
        :param network_slice_subnet_provider_capabilities: The network_slice_subnet_provider_capabilities of this SubNetworkSingle2AllOf.  # noqa: E501
        :type network_slice_subnet_provider_capabilities: List[NetworkSliceSubnetProviderCapabilitiesSingle]
        :param feasibility_check_and_reservation_job: The feasibility_check_and_reservation_job of this SubNetworkSingle2AllOf.  # noqa: E501
        :type feasibility_check_and_reservation_job: List[FeasibilityCheckAndReservationJobSingle]
        """
        self.openapi_types = {
            'sub_network': List[SubNetworkSingle],
            'network_slice': List[NetworkSliceSingle],
            'network_slice_subnet': List[NetworkSliceSubnetSingle],
            'ep_transport': List[EPTransportSingle],
            'network_slice_subnet_provider_capabilities': List[NetworkSliceSubnetProviderCapabilitiesSingle],
            'feasibility_check_and_reservation_job': List[FeasibilityCheckAndReservationJobSingle]
        }

        self.attribute_map = {
            'sub_network': 'SubNetwork',
            'network_slice': 'NetworkSlice',
            'network_slice_subnet': 'NetworkSliceSubnet',
            'ep_transport': 'EP_Transport',
            'network_slice_subnet_provider_capabilities': 'NetworkSliceSubnetProviderCapabilities',
            'feasibility_check_and_reservation_job': 'FeasibilityCheckAndReservationJob'
        }

        self._sub_network = sub_network
        self._network_slice = network_slice
        self._network_slice_subnet = network_slice_subnet
        self._ep_transport = ep_transport
        self._network_slice_subnet_provider_capabilities = network_slice_subnet_provider_capabilities
        self._feasibility_check_and_reservation_job = feasibility_check_and_reservation_job

    @classmethod
    def from_dict(cls, dikt) -> 'SubNetworkSingle2AllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubNetwork_Single_2_allOf of this SubNetworkSingle2AllOf.  # noqa: E501
        :rtype: SubNetworkSingle2AllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_network(self):
        """Gets the sub_network of this SubNetworkSingle2AllOf.


        :return: The sub_network of this SubNetworkSingle2AllOf.
        :rtype: List[SubNetworkSingle]
        """
        return self._sub_network

    @sub_network.setter
    def sub_network(self, sub_network):
        """Sets the sub_network of this SubNetworkSingle2AllOf.


        :param sub_network: The sub_network of this SubNetworkSingle2AllOf.
        :type sub_network: List[SubNetworkSingle]
        """

        self._sub_network = sub_network

    @property
    def network_slice(self):
        """Gets the network_slice of this SubNetworkSingle2AllOf.


        :return: The network_slice of this SubNetworkSingle2AllOf.
        :rtype: List[NetworkSliceSingle]
        """
        return self._network_slice

    @network_slice.setter
    def network_slice(self, network_slice):
        """Sets the network_slice of this SubNetworkSingle2AllOf.


        :param network_slice: The network_slice of this SubNetworkSingle2AllOf.
        :type network_slice: List[NetworkSliceSingle]
        """

        self._network_slice = network_slice

    @property
    def network_slice_subnet(self):
        """Gets the network_slice_subnet of this SubNetworkSingle2AllOf.


        :return: The network_slice_subnet of this SubNetworkSingle2AllOf.
        :rtype: List[NetworkSliceSubnetSingle]
        """
        return self._network_slice_subnet

    @network_slice_subnet.setter
    def network_slice_subnet(self, network_slice_subnet):
        """Sets the network_slice_subnet of this SubNetworkSingle2AllOf.


        :param network_slice_subnet: The network_slice_subnet of this SubNetworkSingle2AllOf.
        :type network_slice_subnet: List[NetworkSliceSubnetSingle]
        """

        self._network_slice_subnet = network_slice_subnet

    @property
    def ep_transport(self):
        """Gets the ep_transport of this SubNetworkSingle2AllOf.


        :return: The ep_transport of this SubNetworkSingle2AllOf.
        :rtype: List[EPTransportSingle]
        """
        return self._ep_transport

    @ep_transport.setter
    def ep_transport(self, ep_transport):
        """Sets the ep_transport of this SubNetworkSingle2AllOf.


        :param ep_transport: The ep_transport of this SubNetworkSingle2AllOf.
        :type ep_transport: List[EPTransportSingle]
        """

        self._ep_transport = ep_transport

    @property
    def network_slice_subnet_provider_capabilities(self):
        """Gets the network_slice_subnet_provider_capabilities of this SubNetworkSingle2AllOf.


        :return: The network_slice_subnet_provider_capabilities of this SubNetworkSingle2AllOf.
        :rtype: List[NetworkSliceSubnetProviderCapabilitiesSingle]
        """
        return self._network_slice_subnet_provider_capabilities

    @network_slice_subnet_provider_capabilities.setter
    def network_slice_subnet_provider_capabilities(self, network_slice_subnet_provider_capabilities):
        """Sets the network_slice_subnet_provider_capabilities of this SubNetworkSingle2AllOf.


        :param network_slice_subnet_provider_capabilities: The network_slice_subnet_provider_capabilities of this SubNetworkSingle2AllOf.
        :type network_slice_subnet_provider_capabilities: List[NetworkSliceSubnetProviderCapabilitiesSingle]
        """

        self._network_slice_subnet_provider_capabilities = network_slice_subnet_provider_capabilities

    @property
    def feasibility_check_and_reservation_job(self):
        """Gets the feasibility_check_and_reservation_job of this SubNetworkSingle2AllOf.


        :return: The feasibility_check_and_reservation_job of this SubNetworkSingle2AllOf.
        :rtype: List[FeasibilityCheckAndReservationJobSingle]
        """
        return self._feasibility_check_and_reservation_job

    @feasibility_check_and_reservation_job.setter
    def feasibility_check_and_reservation_job(self, feasibility_check_and_reservation_job):
        """Sets the feasibility_check_and_reservation_job of this SubNetworkSingle2AllOf.


        :param feasibility_check_and_reservation_job: The feasibility_check_and_reservation_job of this SubNetworkSingle2AllOf.
        :type feasibility_check_and_reservation_job: List[FeasibilityCheckAndReservationJobSingle]
        """

        self._feasibility_check_and_reservation_job = feasibility_check_and_reservation_job
