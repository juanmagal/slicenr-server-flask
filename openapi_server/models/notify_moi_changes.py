# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.moi_change import MoiChange
from openapi_server.models.notification_type import NotificationType
from openapi_server import util

from openapi_server.models.moi_change import MoiChange  # noqa: E501
from openapi_server.models.notification_type import NotificationType  # noqa: E501

class NotifyMoiChanges(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href=None, notification_id=None, notification_type=None, event_time=None, system_dn=None, moi_changes=None):  # noqa: E501
        """NotifyMoiChanges - a model defined in OpenAPI

        :param href: The href of this NotifyMoiChanges.  # noqa: E501
        :type href: str
        :param notification_id: The notification_id of this NotifyMoiChanges.  # noqa: E501
        :type notification_id: int
        :param notification_type: The notification_type of this NotifyMoiChanges.  # noqa: E501
        :type notification_type: NotificationType
        :param event_time: The event_time of this NotifyMoiChanges.  # noqa: E501
        :type event_time: datetime
        :param system_dn: The system_dn of this NotifyMoiChanges.  # noqa: E501
        :type system_dn: str
        :param moi_changes: The moi_changes of this NotifyMoiChanges.  # noqa: E501
        :type moi_changes: List[MoiChange]
        """
        self.openapi_types = {
            'href': str,
            'notification_id': int,
            'notification_type': NotificationType,
            'event_time': datetime,
            'system_dn': str,
            'moi_changes': List[MoiChange]
        }

        self.attribute_map = {
            'href': 'href',
            'notification_id': 'notificationId',
            'notification_type': 'notificationType',
            'event_time': 'eventTime',
            'system_dn': 'systemDN',
            'moi_changes': 'moiChanges'
        }

        self._href = href
        self._notification_id = notification_id
        self._notification_type = notification_type
        self._event_time = event_time
        self._system_dn = system_dn
        self._moi_changes = moi_changes

    @classmethod
    def from_dict(cls, dikt) -> 'NotifyMoiChanges':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotifyMoiChanges of this NotifyMoiChanges.  # noqa: E501
        :rtype: NotifyMoiChanges
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this NotifyMoiChanges.


        :return: The href of this NotifyMoiChanges.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this NotifyMoiChanges.


        :param href: The href of this NotifyMoiChanges.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def notification_id(self):
        """Gets the notification_id of this NotifyMoiChanges.


        :return: The notification_id of this NotifyMoiChanges.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this NotifyMoiChanges.


        :param notification_id: The notification_id of this NotifyMoiChanges.
        :type notification_id: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")  # noqa: E501

        self._notification_id = notification_id

    @property
    def notification_type(self):
        """Gets the notification_type of this NotifyMoiChanges.


        :return: The notification_type of this NotifyMoiChanges.
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this NotifyMoiChanges.


        :param notification_type: The notification_type of this NotifyMoiChanges.
        :type notification_type: NotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def event_time(self):
        """Gets the event_time of this NotifyMoiChanges.


        :return: The event_time of this NotifyMoiChanges.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this NotifyMoiChanges.


        :param event_time: The event_time of this NotifyMoiChanges.
        :type event_time: datetime
        """
        if event_time is None:
            raise ValueError("Invalid value for `event_time`, must not be `None`")  # noqa: E501

        self._event_time = event_time

    @property
    def system_dn(self):
        """Gets the system_dn of this NotifyMoiChanges.


        :return: The system_dn of this NotifyMoiChanges.
        :rtype: str
        """
        return self._system_dn

    @system_dn.setter
    def system_dn(self, system_dn):
        """Sets the system_dn of this NotifyMoiChanges.


        :param system_dn: The system_dn of this NotifyMoiChanges.
        :type system_dn: str
        """
        if system_dn is None:
            raise ValueError("Invalid value for `system_dn`, must not be `None`")  # noqa: E501

        self._system_dn = system_dn

    @property
    def moi_changes(self):
        """Gets the moi_changes of this NotifyMoiChanges.


        :return: The moi_changes of this NotifyMoiChanges.
        :rtype: List[MoiChange]
        """
        return self._moi_changes

    @moi_changes.setter
    def moi_changes(self, moi_changes):
        """Sets the moi_changes of this NotifyMoiChanges.


        :param moi_changes: The moi_changes of this NotifyMoiChanges.
        :type moi_changes: List[MoiChange]
        """
        if moi_changes is None:
            raise ValueError("Invalid value for `moi_changes`, must not be `None`")  # noqa: E501

        self._moi_changes = moi_changes
