# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.rim_rs_report_conf import RimRSReportConf
from openapi_server import util

from openapi_server.models.rim_rs_report_conf import RimRSReportConf  # noqa: E501

class GnbDuFunctionSingleAllOfAttributesAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gnb_du_id=None, gnb_du_name=None, gnb_id=None, gnb_id_length=None, rim_rs_report_conf=None):  # noqa: E501
        """GnbDuFunctionSingleAllOfAttributesAllOf - a model defined in OpenAPI

        :param gnb_du_id: The gnb_du_id of this GnbDuFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type gnb_du_id: float
        :param gnb_du_name: The gnb_du_name of this GnbDuFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type gnb_du_name: str
        :param gnb_id: The gnb_id of this GnbDuFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type gnb_id: str
        :param gnb_id_length: The gnb_id_length of this GnbDuFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type gnb_id_length: int
        :param rim_rs_report_conf: The rim_rs_report_conf of this GnbDuFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type rim_rs_report_conf: RimRSReportConf
        """
        self.openapi_types = {
            'gnb_du_id': float,
            'gnb_du_name': str,
            'gnb_id': str,
            'gnb_id_length': int,
            'rim_rs_report_conf': RimRSReportConf
        }

        self.attribute_map = {
            'gnb_du_id': 'gnbDuId',
            'gnb_du_name': 'gnbDuName',
            'gnb_id': 'gnbId',
            'gnb_id_length': 'gnbIdLength',
            'rim_rs_report_conf': 'rimRSReportConf'
        }

        self._gnb_du_id = gnb_du_id
        self._gnb_du_name = gnb_du_name
        self._gnb_id = gnb_id
        self._gnb_id_length = gnb_id_length
        self._rim_rs_report_conf = rim_rs_report_conf

    @classmethod
    def from_dict(cls, dikt) -> 'GnbDuFunctionSingleAllOfAttributesAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GnbDuFunction_Single_allOf_attributes_allOf of this GnbDuFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :rtype: GnbDuFunctionSingleAllOfAttributesAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gnb_du_id(self):
        """Gets the gnb_du_id of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :return: The gnb_du_id of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :rtype: float
        """
        return self._gnb_du_id

    @gnb_du_id.setter
    def gnb_du_id(self, gnb_du_id):
        """Sets the gnb_du_id of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :param gnb_du_id: The gnb_du_id of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :type gnb_du_id: float
        """
        if gnb_du_id is not None and gnb_du_id > 68719476735:  # noqa: E501
            raise ValueError("Invalid value for `gnb_du_id`, must be a value less than or equal to `68719476735`")  # noqa: E501
        if gnb_du_id is not None and gnb_du_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `gnb_du_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._gnb_du_id = gnb_du_id

    @property
    def gnb_du_name(self):
        """Gets the gnb_du_name of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :return: The gnb_du_name of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :rtype: str
        """
        return self._gnb_du_name

    @gnb_du_name.setter
    def gnb_du_name(self, gnb_du_name):
        """Sets the gnb_du_name of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :param gnb_du_name: The gnb_du_name of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :type gnb_du_name: str
        """
        if gnb_du_name is not None and len(gnb_du_name) > 150:
            raise ValueError("Invalid value for `gnb_du_name`, length must be less than or equal to `150`")  # noqa: E501

        self._gnb_du_name = gnb_du_name

    @property
    def gnb_id(self):
        """Gets the gnb_id of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :return: The gnb_id of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :rtype: str
        """
        return self._gnb_id

    @gnb_id.setter
    def gnb_id(self, gnb_id):
        """Sets the gnb_id of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :param gnb_id: The gnb_id of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :type gnb_id: str
        """

        self._gnb_id = gnb_id

    @property
    def gnb_id_length(self):
        """Gets the gnb_id_length of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :return: The gnb_id_length of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :rtype: int
        """
        return self._gnb_id_length

    @gnb_id_length.setter
    def gnb_id_length(self, gnb_id_length):
        """Sets the gnb_id_length of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :param gnb_id_length: The gnb_id_length of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :type gnb_id_length: int
        """
        if gnb_id_length is not None and gnb_id_length > 32:  # noqa: E501
            raise ValueError("Invalid value for `gnb_id_length`, must be a value less than or equal to `32`")  # noqa: E501
        if gnb_id_length is not None and gnb_id_length < 22:  # noqa: E501
            raise ValueError("Invalid value for `gnb_id_length`, must be a value greater than or equal to `22`")  # noqa: E501

        self._gnb_id_length = gnb_id_length

    @property
    def rim_rs_report_conf(self):
        """Gets the rim_rs_report_conf of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :return: The rim_rs_report_conf of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :rtype: RimRSReportConf
        """
        return self._rim_rs_report_conf

    @rim_rs_report_conf.setter
    def rim_rs_report_conf(self, rim_rs_report_conf):
        """Sets the rim_rs_report_conf of this GnbDuFunctionSingleAllOfAttributesAllOf.


        :param rim_rs_report_conf: The rim_rs_report_conf of this GnbDuFunctionSingleAllOfAttributesAllOf.
        :type rim_rs_report_conf: RimRSReportConf
        """

        self._rim_rs_report_conf = rim_rs_report_conf
