# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.predictionfrequency import Predictionfrequency
from openapi_server import util

from openapi_server.models.predictionfrequency import Predictionfrequency  # noqa: E501

class PositioningRANSubnet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability=None, predictionfrequency=None, accuracy=None):  # noqa: E501
        """PositioningRANSubnet - a model defined in OpenAPI

        :param availability: The availability of this PositioningRANSubnet.  # noqa: E501
        :type availability: List[str]
        :param predictionfrequency: The predictionfrequency of this PositioningRANSubnet.  # noqa: E501
        :type predictionfrequency: Predictionfrequency
        :param accuracy: The accuracy of this PositioningRANSubnet.  # noqa: E501
        :type accuracy: float
        """
        self.openapi_types = {
            'availability': List[str],
            'predictionfrequency': Predictionfrequency,
            'accuracy': float
        }

        self.attribute_map = {
            'availability': 'availability',
            'predictionfrequency': 'predictionfrequency',
            'accuracy': 'accuracy'
        }

        self._availability = availability
        self._predictionfrequency = predictionfrequency
        self._accuracy = accuracy

    @classmethod
    def from_dict(cls, dikt) -> 'PositioningRANSubnet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PositioningRANSubnet of this PositioningRANSubnet.  # noqa: E501
        :rtype: PositioningRANSubnet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this PositioningRANSubnet.


        :return: The availability of this PositioningRANSubnet.
        :rtype: List[str]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this PositioningRANSubnet.


        :param availability: The availability of this PositioningRANSubnet.
        :type availability: List[str]
        """
        allowed_values = ["CIDE-CID", "OTDOA", "RF FINGERPRINTING", "AECID", "HYBRID POSITIONING", "NET-RTK"]  # noqa: E501
        if not set(availability).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `availability` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(availability) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._availability = availability

    @property
    def predictionfrequency(self):
        """Gets the predictionfrequency of this PositioningRANSubnet.


        :return: The predictionfrequency of this PositioningRANSubnet.
        :rtype: Predictionfrequency
        """
        return self._predictionfrequency

    @predictionfrequency.setter
    def predictionfrequency(self, predictionfrequency):
        """Sets the predictionfrequency of this PositioningRANSubnet.


        :param predictionfrequency: The predictionfrequency of this PositioningRANSubnet.
        :type predictionfrequency: Predictionfrequency
        """

        self._predictionfrequency = predictionfrequency

    @property
    def accuracy(self):
        """Gets the accuracy of this PositioningRANSubnet.


        :return: The accuracy of this PositioningRANSubnet.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this PositioningRANSubnet.


        :param accuracy: The accuracy of this PositioningRANSubnet.
        :type accuracy: float
        """

        self._accuracy = accuracy
