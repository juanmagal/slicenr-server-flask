# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SecFunc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sec_fun_id=None, sec_fun_type=None, sec_rules=None):  # noqa: E501
        """SecFunc - a model defined in OpenAPI

        :param sec_fun_id: The sec_fun_id of this SecFunc.  # noqa: E501
        :type sec_fun_id: str
        :param sec_fun_type: The sec_fun_type of this SecFunc.  # noqa: E501
        :type sec_fun_type: str
        :param sec_rules: The sec_rules of this SecFunc.  # noqa: E501
        :type sec_rules: List[str]
        """
        self.openapi_types = {
            'sec_fun_id': str,
            'sec_fun_type': str,
            'sec_rules': List[str]
        }

        self.attribute_map = {
            'sec_fun_id': 'secFunId',
            'sec_fun_type': 'secFunType',
            'sec_rules': 'secRules'
        }

        self._sec_fun_id = sec_fun_id
        self._sec_fun_type = sec_fun_type
        self._sec_rules = sec_rules

    @classmethod
    def from_dict(cls, dikt) -> 'SecFunc':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SecFunc of this SecFunc.  # noqa: E501
        :rtype: SecFunc
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sec_fun_id(self):
        """Gets the sec_fun_id of this SecFunc.


        :return: The sec_fun_id of this SecFunc.
        :rtype: str
        """
        return self._sec_fun_id

    @sec_fun_id.setter
    def sec_fun_id(self, sec_fun_id):
        """Sets the sec_fun_id of this SecFunc.


        :param sec_fun_id: The sec_fun_id of this SecFunc.
        :type sec_fun_id: str
        """

        self._sec_fun_id = sec_fun_id

    @property
    def sec_fun_type(self):
        """Gets the sec_fun_type of this SecFunc.


        :return: The sec_fun_type of this SecFunc.
        :rtype: str
        """
        return self._sec_fun_type

    @sec_fun_type.setter
    def sec_fun_type(self, sec_fun_type):
        """Sets the sec_fun_type of this SecFunc.


        :param sec_fun_type: The sec_fun_type of this SecFunc.
        :type sec_fun_type: str
        """

        self._sec_fun_type = sec_fun_type

    @property
    def sec_rules(self):
        """Gets the sec_rules of this SecFunc.


        :return: The sec_rules of this SecFunc.
        :rtype: List[str]
        """
        return self._sec_rules

    @sec_rules.setter
    def sec_rules(self, sec_rules):
        """Sets the sec_rules of this SecFunc.


        :param sec_rules: The sec_rules of this SecFunc.
        :type sec_rules: List[str]
        """

        self._sec_rules = sec_rules
