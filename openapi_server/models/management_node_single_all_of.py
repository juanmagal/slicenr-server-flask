# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.management_node_single_all_of_attributes import ManagementNodeSingleAllOfAttributes
from openapi_server.models.mns_agent_single import MnsAgentSingle
from openapi_server import util

from openapi_server.models.management_node_single_all_of_attributes import ManagementNodeSingleAllOfAttributes  # noqa: E501
from openapi_server.models.mns_agent_single import MnsAgentSingle  # noqa: E501

class ManagementNodeSingleAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes=None, mns_agent=None):  # noqa: E501
        """ManagementNodeSingleAllOf - a model defined in OpenAPI

        :param attributes: The attributes of this ManagementNodeSingleAllOf.  # noqa: E501
        :type attributes: ManagementNodeSingleAllOfAttributes
        :param mns_agent: The mns_agent of this ManagementNodeSingleAllOf.  # noqa: E501
        :type mns_agent: List[MnsAgentSingle]
        """
        self.openapi_types = {
            'attributes': ManagementNodeSingleAllOfAttributes,
            'mns_agent': List[MnsAgentSingle]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'mns_agent': 'MnsAgent'
        }

        self._attributes = attributes
        self._mns_agent = mns_agent

    @classmethod
    def from_dict(cls, dikt) -> 'ManagementNodeSingleAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManagementNode_Single_allOf of this ManagementNodeSingleAllOf.  # noqa: E501
        :rtype: ManagementNodeSingleAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ManagementNodeSingleAllOf.


        :return: The attributes of this ManagementNodeSingleAllOf.
        :rtype: ManagementNodeSingleAllOfAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ManagementNodeSingleAllOf.


        :param attributes: The attributes of this ManagementNodeSingleAllOf.
        :type attributes: ManagementNodeSingleAllOfAttributes
        """

        self._attributes = attributes

    @property
    def mns_agent(self):
        """Gets the mns_agent of this ManagementNodeSingleAllOf.


        :return: The mns_agent of this ManagementNodeSingleAllOf.
        :rtype: List[MnsAgentSingle]
        """
        return self._mns_agent

    @mns_agent.setter
    def mns_agent(self, mns_agent):
        """Sets the mns_agent of this ManagementNodeSingleAllOf.


        :param mns_agent: The mns_agent of this ManagementNodeSingleAllOf.
        :type mns_agent: List[MnsAgentSingle]
        """

        self._mns_agent = mns_agent
