# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.alarm_list_single import AlarmListSingle
from openapi_server.models.ep_transport_single import EPTransportSingle
from openapi_server.models.feasibility_check_and_reservation_job_single import FeasibilityCheckAndReservationJobSingle
from openapi_server.models.feasibility_check_and_reservation_job_single_all_of_attributes import FeasibilityCheckAndReservationJobSingleAllOfAttributes
from openapi_server.models.file_download_job_single import FileDownloadJobSingle
from openapi_server.models.files_single import FilesSingle
from openapi_server.models.management_data_collection_single import ManagementDataCollectionSingle
from openapi_server.models.management_node_single import ManagementNodeSingle
from openapi_server.models.me_context_single import MeContextSingle
from openapi_server.models.mn_s1 import MnS1
from openapi_server.models.mns_agent_single import MnsAgentSingle
from openapi_server.models.mns_registry_single import MnsRegistrySingle
from openapi_server.models.network_slice_single import NetworkSliceSingle
from openapi_server.models.network_slice_subnet_provider_capabilities_single import NetworkSliceSubnetProviderCapabilitiesSingle
from openapi_server.models.network_slice_subnet_single import NetworkSliceSubnetSingle
from openapi_server.models.ntf_subscription_control_single import NtfSubscriptionControlSingle
from openapi_server.models.perf_metric_job_single import PerfMetricJobSingle
from openapi_server.models.sub_network_single import SubNetworkSingle
from openapi_server.models.sub_network_single2 import SubNetworkSingle2
from openapi_server.models.threshold_monitor_single import ThresholdMonitorSingle
from openapi_server.models.trace_job_single import TraceJobSingle
from openapi_server.models.vs_data_container_single import VsDataContainerSingle
from openapi_server import util

from openapi_server.models.alarm_list_single import AlarmListSingle  # noqa: E501
from openapi_server.models.ep_transport_single import EPTransportSingle  # noqa: E501
from openapi_server.models.feasibility_check_and_reservation_job_single import FeasibilityCheckAndReservationJobSingle  # noqa: E501
from openapi_server.models.feasibility_check_and_reservation_job_single_all_of_attributes import FeasibilityCheckAndReservationJobSingleAllOfAttributes  # noqa: E501
from openapi_server.models.file_download_job_single import FileDownloadJobSingle  # noqa: E501
from openapi_server.models.files_single import FilesSingle  # noqa: E501
from openapi_server.models.management_data_collection_single import ManagementDataCollectionSingle  # noqa: E501
from openapi_server.models.management_node_single import ManagementNodeSingle  # noqa: E501
from openapi_server.models.me_context_single import MeContextSingle  # noqa: E501
from openapi_server.models.mn_s1 import MnS1  # noqa: E501
from openapi_server.models.mns_agent_single import MnsAgentSingle  # noqa: E501
from openapi_server.models.mns_registry_single import MnsRegistrySingle  # noqa: E501
from openapi_server.models.network_slice_single import NetworkSliceSingle  # noqa: E501
from openapi_server.models.network_slice_subnet_provider_capabilities_single import NetworkSliceSubnetProviderCapabilitiesSingle  # noqa: E501
from openapi_server.models.network_slice_subnet_single import NetworkSliceSubnetSingle  # noqa: E501
from openapi_server.models.ntf_subscription_control_single import NtfSubscriptionControlSingle  # noqa: E501
from openapi_server.models.perf_metric_job_single import PerfMetricJobSingle  # noqa: E501
from openapi_server.models.sub_network_single import SubNetworkSingle  # noqa: E501
from openapi_server.models.sub_network_single2 import SubNetworkSingle2  # noqa: E501
from openapi_server.models.threshold_monitor_single import ThresholdMonitorSingle  # noqa: E501
from openapi_server.models.trace_job_single import TraceJobSingle  # noqa: E501
from openapi_server.models.vs_data_container_single import VsDataContainerSingle  # noqa: E501

class ResourcesSliceNrm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_network=None, id=None, object_class=None, object_instance=None, vs_data_container=None, attributes=None, management_node=None, mns_agent=None, me_context=None, perf_metric_job=None, threshold_monitor=None, trace_job=None, management_data_collection=None, ntf_subscription_control=None, alarm_list=None, file_download_job=None, files=None, mns_registry=None, network_slice=None, network_slice_subnet=None, ep_transport=None, network_slice_subnet_provider_capabilities=None, feasibility_check_and_reservation_job=None):  # noqa: E501
        """ResourcesSliceNrm - a model defined in OpenAPI

        :param sub_network: The sub_network of this ResourcesSliceNrm.  # noqa: E501
        :type sub_network: List[SubNetworkSingle]
        :param id: The id of this ResourcesSliceNrm.  # noqa: E501
        :type id: str
        :param object_class: The object_class of this ResourcesSliceNrm.  # noqa: E501
        :type object_class: str
        :param object_instance: The object_instance of this ResourcesSliceNrm.  # noqa: E501
        :type object_instance: str
        :param vs_data_container: The vs_data_container of this ResourcesSliceNrm.  # noqa: E501
        :type vs_data_container: List[VsDataContainerSingle]
        :param attributes: The attributes of this ResourcesSliceNrm.  # noqa: E501
        :type attributes: FeasibilityCheckAndReservationJobSingleAllOfAttributes
        :param management_node: The management_node of this ResourcesSliceNrm.  # noqa: E501
        :type management_node: List[ManagementNodeSingle]
        :param mns_agent: The mns_agent of this ResourcesSliceNrm.  # noqa: E501
        :type mns_agent: List[MnsAgentSingle]
        :param me_context: The me_context of this ResourcesSliceNrm.  # noqa: E501
        :type me_context: List[MeContextSingle]
        :param perf_metric_job: The perf_metric_job of this ResourcesSliceNrm.  # noqa: E501
        :type perf_metric_job: List[PerfMetricJobSingle]
        :param threshold_monitor: The threshold_monitor of this ResourcesSliceNrm.  # noqa: E501
        :type threshold_monitor: List[ThresholdMonitorSingle]
        :param trace_job: The trace_job of this ResourcesSliceNrm.  # noqa: E501
        :type trace_job: List[TraceJobSingle]
        :param management_data_collection: The management_data_collection of this ResourcesSliceNrm.  # noqa: E501
        :type management_data_collection: List[ManagementDataCollectionSingle]
        :param ntf_subscription_control: The ntf_subscription_control of this ResourcesSliceNrm.  # noqa: E501
        :type ntf_subscription_control: List[NtfSubscriptionControlSingle]
        :param alarm_list: The alarm_list of this ResourcesSliceNrm.  # noqa: E501
        :type alarm_list: AlarmListSingle
        :param file_download_job: The file_download_job of this ResourcesSliceNrm.  # noqa: E501
        :type file_download_job: List[FileDownloadJobSingle]
        :param files: The files of this ResourcesSliceNrm.  # noqa: E501
        :type files: List[FilesSingle]
        :param mns_registry: The mns_registry of this ResourcesSliceNrm.  # noqa: E501
        :type mns_registry: MnsRegistrySingle
        :param network_slice: The network_slice of this ResourcesSliceNrm.  # noqa: E501
        :type network_slice: List[NetworkSliceSingle]
        :param network_slice_subnet: The network_slice_subnet of this ResourcesSliceNrm.  # noqa: E501
        :type network_slice_subnet: List[NetworkSliceSubnetSingle]
        :param ep_transport: The ep_transport of this ResourcesSliceNrm.  # noqa: E501
        :type ep_transport: List[EPTransportSingle]
        :param network_slice_subnet_provider_capabilities: The network_slice_subnet_provider_capabilities of this ResourcesSliceNrm.  # noqa: E501
        :type network_slice_subnet_provider_capabilities: List[NetworkSliceSubnetProviderCapabilitiesSingle]
        :param feasibility_check_and_reservation_job: The feasibility_check_and_reservation_job of this ResourcesSliceNrm.  # noqa: E501
        :type feasibility_check_and_reservation_job: List[FeasibilityCheckAndReservationJobSingle]
        """
        self.openapi_types = {
            'sub_network': List[SubNetworkSingle],
            'id': str,
            'object_class': str,
            'object_instance': str,
            'vs_data_container': List[VsDataContainerSingle],
            'attributes': FeasibilityCheckAndReservationJobSingleAllOfAttributes,
            'management_node': List[ManagementNodeSingle],
            'mns_agent': List[MnsAgentSingle],
            'me_context': List[MeContextSingle],
            'perf_metric_job': List[PerfMetricJobSingle],
            'threshold_monitor': List[ThresholdMonitorSingle],
            'trace_job': List[TraceJobSingle],
            'management_data_collection': List[ManagementDataCollectionSingle],
            'ntf_subscription_control': List[NtfSubscriptionControlSingle],
            'alarm_list': AlarmListSingle,
            'file_download_job': List[FileDownloadJobSingle],
            'files': List[FilesSingle],
            'mns_registry': MnsRegistrySingle,
            'network_slice': List[NetworkSliceSingle],
            'network_slice_subnet': List[NetworkSliceSubnetSingle],
            'ep_transport': List[EPTransportSingle],
            'network_slice_subnet_provider_capabilities': List[NetworkSliceSubnetProviderCapabilitiesSingle],
            'feasibility_check_and_reservation_job': List[FeasibilityCheckAndReservationJobSingle]
        }

        self.attribute_map = {
            'sub_network': 'SubNetwork',
            'id': 'id',
            'object_class': 'objectClass',
            'object_instance': 'objectInstance',
            'vs_data_container': 'VsDataContainer',
            'attributes': 'attributes',
            'management_node': 'ManagementNode',
            'mns_agent': 'MnsAgent',
            'me_context': 'MeContext',
            'perf_metric_job': 'PerfMetricJob',
            'threshold_monitor': 'ThresholdMonitor',
            'trace_job': 'TraceJob',
            'management_data_collection': 'ManagementDataCollection',
            'ntf_subscription_control': 'NtfSubscriptionControl',
            'alarm_list': 'AlarmList',
            'file_download_job': 'FileDownloadJob',
            'files': 'Files',
            'mns_registry': 'MnsRegistry',
            'network_slice': 'NetworkSlice',
            'network_slice_subnet': 'NetworkSliceSubnet',
            'ep_transport': 'EP_Transport',
            'network_slice_subnet_provider_capabilities': 'NetworkSliceSubnetProviderCapabilities',
            'feasibility_check_and_reservation_job': 'FeasibilityCheckAndReservationJob'
        }

        self._sub_network = sub_network
        self._id = id
        self._object_class = object_class
        self._object_instance = object_instance
        self._vs_data_container = vs_data_container
        self._attributes = attributes
        self._management_node = management_node
        self._mns_agent = mns_agent
        self._me_context = me_context
        self._perf_metric_job = perf_metric_job
        self._threshold_monitor = threshold_monitor
        self._trace_job = trace_job
        self._management_data_collection = management_data_collection
        self._ntf_subscription_control = ntf_subscription_control
        self._alarm_list = alarm_list
        self._file_download_job = file_download_job
        self._files = files
        self._mns_registry = mns_registry
        self._network_slice = network_slice
        self._network_slice_subnet = network_slice_subnet
        self._ep_transport = ep_transport
        self._network_slice_subnet_provider_capabilities = network_slice_subnet_provider_capabilities
        self._feasibility_check_and_reservation_job = feasibility_check_and_reservation_job

    @classmethod
    def from_dict(cls, dikt) -> 'ResourcesSliceNrm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The resources-sliceNrm of this ResourcesSliceNrm.  # noqa: E501
        :rtype: ResourcesSliceNrm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_network(self):
        """Gets the sub_network of this ResourcesSliceNrm.


        :return: The sub_network of this ResourcesSliceNrm.
        :rtype: List[SubNetworkSingle]
        """
        return self._sub_network

    @sub_network.setter
    def sub_network(self, sub_network):
        """Sets the sub_network of this ResourcesSliceNrm.


        :param sub_network: The sub_network of this ResourcesSliceNrm.
        :type sub_network: List[SubNetworkSingle]
        """

        self._sub_network = sub_network

    @property
    def id(self):
        """Gets the id of this ResourcesSliceNrm.


        :return: The id of this ResourcesSliceNrm.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourcesSliceNrm.


        :param id: The id of this ResourcesSliceNrm.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object_class(self):
        """Gets the object_class of this ResourcesSliceNrm.


        :return: The object_class of this ResourcesSliceNrm.
        :rtype: str
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """Sets the object_class of this ResourcesSliceNrm.


        :param object_class: The object_class of this ResourcesSliceNrm.
        :type object_class: str
        """

        self._object_class = object_class

    @property
    def object_instance(self):
        """Gets the object_instance of this ResourcesSliceNrm.


        :return: The object_instance of this ResourcesSliceNrm.
        :rtype: str
        """
        return self._object_instance

    @object_instance.setter
    def object_instance(self, object_instance):
        """Sets the object_instance of this ResourcesSliceNrm.


        :param object_instance: The object_instance of this ResourcesSliceNrm.
        :type object_instance: str
        """

        self._object_instance = object_instance

    @property
    def vs_data_container(self):
        """Gets the vs_data_container of this ResourcesSliceNrm.


        :return: The vs_data_container of this ResourcesSliceNrm.
        :rtype: List[VsDataContainerSingle]
        """
        return self._vs_data_container

    @vs_data_container.setter
    def vs_data_container(self, vs_data_container):
        """Sets the vs_data_container of this ResourcesSliceNrm.


        :param vs_data_container: The vs_data_container of this ResourcesSliceNrm.
        :type vs_data_container: List[VsDataContainerSingle]
        """

        self._vs_data_container = vs_data_container

    @property
    def attributes(self):
        """Gets the attributes of this ResourcesSliceNrm.


        :return: The attributes of this ResourcesSliceNrm.
        :rtype: FeasibilityCheckAndReservationJobSingleAllOfAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ResourcesSliceNrm.


        :param attributes: The attributes of this ResourcesSliceNrm.
        :type attributes: FeasibilityCheckAndReservationJobSingleAllOfAttributes
        """

        self._attributes = attributes

    @property
    def management_node(self):
        """Gets the management_node of this ResourcesSliceNrm.


        :return: The management_node of this ResourcesSliceNrm.
        :rtype: List[ManagementNodeSingle]
        """
        return self._management_node

    @management_node.setter
    def management_node(self, management_node):
        """Sets the management_node of this ResourcesSliceNrm.


        :param management_node: The management_node of this ResourcesSliceNrm.
        :type management_node: List[ManagementNodeSingle]
        """

        self._management_node = management_node

    @property
    def mns_agent(self):
        """Gets the mns_agent of this ResourcesSliceNrm.


        :return: The mns_agent of this ResourcesSliceNrm.
        :rtype: List[MnsAgentSingle]
        """
        return self._mns_agent

    @mns_agent.setter
    def mns_agent(self, mns_agent):
        """Sets the mns_agent of this ResourcesSliceNrm.


        :param mns_agent: The mns_agent of this ResourcesSliceNrm.
        :type mns_agent: List[MnsAgentSingle]
        """

        self._mns_agent = mns_agent

    @property
    def me_context(self):
        """Gets the me_context of this ResourcesSliceNrm.


        :return: The me_context of this ResourcesSliceNrm.
        :rtype: List[MeContextSingle]
        """
        return self._me_context

    @me_context.setter
    def me_context(self, me_context):
        """Sets the me_context of this ResourcesSliceNrm.


        :param me_context: The me_context of this ResourcesSliceNrm.
        :type me_context: List[MeContextSingle]
        """

        self._me_context = me_context

    @property
    def perf_metric_job(self):
        """Gets the perf_metric_job of this ResourcesSliceNrm.


        :return: The perf_metric_job of this ResourcesSliceNrm.
        :rtype: List[PerfMetricJobSingle]
        """
        return self._perf_metric_job

    @perf_metric_job.setter
    def perf_metric_job(self, perf_metric_job):
        """Sets the perf_metric_job of this ResourcesSliceNrm.


        :param perf_metric_job: The perf_metric_job of this ResourcesSliceNrm.
        :type perf_metric_job: List[PerfMetricJobSingle]
        """

        self._perf_metric_job = perf_metric_job

    @property
    def threshold_monitor(self):
        """Gets the threshold_monitor of this ResourcesSliceNrm.


        :return: The threshold_monitor of this ResourcesSliceNrm.
        :rtype: List[ThresholdMonitorSingle]
        """
        return self._threshold_monitor

    @threshold_monitor.setter
    def threshold_monitor(self, threshold_monitor):
        """Sets the threshold_monitor of this ResourcesSliceNrm.


        :param threshold_monitor: The threshold_monitor of this ResourcesSliceNrm.
        :type threshold_monitor: List[ThresholdMonitorSingle]
        """

        self._threshold_monitor = threshold_monitor

    @property
    def trace_job(self):
        """Gets the trace_job of this ResourcesSliceNrm.


        :return: The trace_job of this ResourcesSliceNrm.
        :rtype: List[TraceJobSingle]
        """
        return self._trace_job

    @trace_job.setter
    def trace_job(self, trace_job):
        """Sets the trace_job of this ResourcesSliceNrm.


        :param trace_job: The trace_job of this ResourcesSliceNrm.
        :type trace_job: List[TraceJobSingle]
        """

        self._trace_job = trace_job

    @property
    def management_data_collection(self):
        """Gets the management_data_collection of this ResourcesSliceNrm.


        :return: The management_data_collection of this ResourcesSliceNrm.
        :rtype: List[ManagementDataCollectionSingle]
        """
        return self._management_data_collection

    @management_data_collection.setter
    def management_data_collection(self, management_data_collection):
        """Sets the management_data_collection of this ResourcesSliceNrm.


        :param management_data_collection: The management_data_collection of this ResourcesSliceNrm.
        :type management_data_collection: List[ManagementDataCollectionSingle]
        """

        self._management_data_collection = management_data_collection

    @property
    def ntf_subscription_control(self):
        """Gets the ntf_subscription_control of this ResourcesSliceNrm.


        :return: The ntf_subscription_control of this ResourcesSliceNrm.
        :rtype: List[NtfSubscriptionControlSingle]
        """
        return self._ntf_subscription_control

    @ntf_subscription_control.setter
    def ntf_subscription_control(self, ntf_subscription_control):
        """Sets the ntf_subscription_control of this ResourcesSliceNrm.


        :param ntf_subscription_control: The ntf_subscription_control of this ResourcesSliceNrm.
        :type ntf_subscription_control: List[NtfSubscriptionControlSingle]
        """

        self._ntf_subscription_control = ntf_subscription_control

    @property
    def alarm_list(self):
        """Gets the alarm_list of this ResourcesSliceNrm.


        :return: The alarm_list of this ResourcesSliceNrm.
        :rtype: AlarmListSingle
        """
        return self._alarm_list

    @alarm_list.setter
    def alarm_list(self, alarm_list):
        """Sets the alarm_list of this ResourcesSliceNrm.


        :param alarm_list: The alarm_list of this ResourcesSliceNrm.
        :type alarm_list: AlarmListSingle
        """

        self._alarm_list = alarm_list

    @property
    def file_download_job(self):
        """Gets the file_download_job of this ResourcesSliceNrm.


        :return: The file_download_job of this ResourcesSliceNrm.
        :rtype: List[FileDownloadJobSingle]
        """
        return self._file_download_job

    @file_download_job.setter
    def file_download_job(self, file_download_job):
        """Sets the file_download_job of this ResourcesSliceNrm.


        :param file_download_job: The file_download_job of this ResourcesSliceNrm.
        :type file_download_job: List[FileDownloadJobSingle]
        """

        self._file_download_job = file_download_job

    @property
    def files(self):
        """Gets the files of this ResourcesSliceNrm.


        :return: The files of this ResourcesSliceNrm.
        :rtype: List[FilesSingle]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ResourcesSliceNrm.


        :param files: The files of this ResourcesSliceNrm.
        :type files: List[FilesSingle]
        """

        self._files = files

    @property
    def mns_registry(self):
        """Gets the mns_registry of this ResourcesSliceNrm.


        :return: The mns_registry of this ResourcesSliceNrm.
        :rtype: MnsRegistrySingle
        """
        return self._mns_registry

    @mns_registry.setter
    def mns_registry(self, mns_registry):
        """Sets the mns_registry of this ResourcesSliceNrm.


        :param mns_registry: The mns_registry of this ResourcesSliceNrm.
        :type mns_registry: MnsRegistrySingle
        """

        self._mns_registry = mns_registry

    @property
    def network_slice(self):
        """Gets the network_slice of this ResourcesSliceNrm.


        :return: The network_slice of this ResourcesSliceNrm.
        :rtype: List[NetworkSliceSingle]
        """
        return self._network_slice

    @network_slice.setter
    def network_slice(self, network_slice):
        """Sets the network_slice of this ResourcesSliceNrm.


        :param network_slice: The network_slice of this ResourcesSliceNrm.
        :type network_slice: List[NetworkSliceSingle]
        """

        self._network_slice = network_slice

    @property
    def network_slice_subnet(self):
        """Gets the network_slice_subnet of this ResourcesSliceNrm.


        :return: The network_slice_subnet of this ResourcesSliceNrm.
        :rtype: List[NetworkSliceSubnetSingle]
        """
        return self._network_slice_subnet

    @network_slice_subnet.setter
    def network_slice_subnet(self, network_slice_subnet):
        """Sets the network_slice_subnet of this ResourcesSliceNrm.


        :param network_slice_subnet: The network_slice_subnet of this ResourcesSliceNrm.
        :type network_slice_subnet: List[NetworkSliceSubnetSingle]
        """

        self._network_slice_subnet = network_slice_subnet

    @property
    def ep_transport(self):
        """Gets the ep_transport of this ResourcesSliceNrm.


        :return: The ep_transport of this ResourcesSliceNrm.
        :rtype: List[EPTransportSingle]
        """
        return self._ep_transport

    @ep_transport.setter
    def ep_transport(self, ep_transport):
        """Sets the ep_transport of this ResourcesSliceNrm.


        :param ep_transport: The ep_transport of this ResourcesSliceNrm.
        :type ep_transport: List[EPTransportSingle]
        """

        self._ep_transport = ep_transport

    @property
    def network_slice_subnet_provider_capabilities(self):
        """Gets the network_slice_subnet_provider_capabilities of this ResourcesSliceNrm.


        :return: The network_slice_subnet_provider_capabilities of this ResourcesSliceNrm.
        :rtype: List[NetworkSliceSubnetProviderCapabilitiesSingle]
        """
        return self._network_slice_subnet_provider_capabilities

    @network_slice_subnet_provider_capabilities.setter
    def network_slice_subnet_provider_capabilities(self, network_slice_subnet_provider_capabilities):
        """Sets the network_slice_subnet_provider_capabilities of this ResourcesSliceNrm.


        :param network_slice_subnet_provider_capabilities: The network_slice_subnet_provider_capabilities of this ResourcesSliceNrm.
        :type network_slice_subnet_provider_capabilities: List[NetworkSliceSubnetProviderCapabilitiesSingle]
        """

        self._network_slice_subnet_provider_capabilities = network_slice_subnet_provider_capabilities

    @property
    def feasibility_check_and_reservation_job(self):
        """Gets the feasibility_check_and_reservation_job of this ResourcesSliceNrm.


        :return: The feasibility_check_and_reservation_job of this ResourcesSliceNrm.
        :rtype: List[FeasibilityCheckAndReservationJobSingle]
        """
        return self._feasibility_check_and_reservation_job

    @feasibility_check_and_reservation_job.setter
    def feasibility_check_and_reservation_job(self, feasibility_check_and_reservation_job):
        """Sets the feasibility_check_and_reservation_job of this ResourcesSliceNrm.


        :param feasibility_check_and_reservation_job: The feasibility_check_and_reservation_job of this ResourcesSliceNrm.
        :type feasibility_check_and_reservation_job: List[FeasibilityCheckAndReservationJobSingle]
        """

        self._feasibility_check_and_reservation_job = feasibility_check_and_reservation_job
