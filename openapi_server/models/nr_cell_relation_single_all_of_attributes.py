# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cell_individual_offset import CellIndividualOffset
from openapi_server.models.is_es_covered_by import IsESCoveredBy
from openapi_server import util

from openapi_server.models.cell_individual_offset import CellIndividualOffset  # noqa: E501
from openapi_server.models.is_es_covered_by import IsESCoveredBy  # noqa: E501

class NRCellRelationSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, n_rtci=None, cell_individual_offset=None, adjacent_nr_cell_ref=None, n_r_freq_relation_ref=None, is_remove_allowed=None, is_ho_allowed=None, is_es_covered_by=None, is_endc_allowed=None, is_mlb_allowed=None):  # noqa: E501
        """NRCellRelationSingleAllOfAttributes - a model defined in OpenAPI

        :param n_rtci: The n_rtci of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type n_rtci: int
        :param cell_individual_offset: The cell_individual_offset of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type cell_individual_offset: CellIndividualOffset
        :param adjacent_nr_cell_ref: The adjacent_nr_cell_ref of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type adjacent_nr_cell_ref: str
        :param n_r_freq_relation_ref: The n_r_freq_relation_ref of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type n_r_freq_relation_ref: str
        :param is_remove_allowed: The is_remove_allowed of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type is_remove_allowed: bool
        :param is_ho_allowed: The is_ho_allowed of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type is_ho_allowed: bool
        :param is_es_covered_by: The is_es_covered_by of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type is_es_covered_by: IsESCoveredBy
        :param is_endc_allowed: The is_endc_allowed of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type is_endc_allowed: bool
        :param is_mlb_allowed: The is_mlb_allowed of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :type is_mlb_allowed: bool
        """
        self.openapi_types = {
            'n_rtci': int,
            'cell_individual_offset': CellIndividualOffset,
            'adjacent_nr_cell_ref': str,
            'n_r_freq_relation_ref': str,
            'is_remove_allowed': bool,
            'is_ho_allowed': bool,
            'is_es_covered_by': IsESCoveredBy,
            'is_endc_allowed': bool,
            'is_mlb_allowed': bool
        }

        self.attribute_map = {
            'n_rtci': 'nRTCI',
            'cell_individual_offset': 'cellIndividualOffset',
            'adjacent_nr_cell_ref': 'adjacentNRCellRef',
            'n_r_freq_relation_ref': 'nRFreqRelationRef',
            'is_remove_allowed': 'isRemoveAllowed',
            'is_ho_allowed': 'isHOAllowed',
            'is_es_covered_by': 'isESCoveredBy',
            'is_endc_allowed': 'isENDCAllowed',
            'is_mlb_allowed': 'isMLBAllowed'
        }

        self._n_rtci = n_rtci
        self._cell_individual_offset = cell_individual_offset
        self._adjacent_nr_cell_ref = adjacent_nr_cell_ref
        self._n_r_freq_relation_ref = n_r_freq_relation_ref
        self._is_remove_allowed = is_remove_allowed
        self._is_ho_allowed = is_ho_allowed
        self._is_es_covered_by = is_es_covered_by
        self._is_endc_allowed = is_endc_allowed
        self._is_mlb_allowed = is_mlb_allowed

    @classmethod
    def from_dict(cls, dikt) -> 'NRCellRelationSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NRCellRelation_Single_allOf_attributes of this NRCellRelationSingleAllOfAttributes.  # noqa: E501
        :rtype: NRCellRelationSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def n_rtci(self):
        """Gets the n_rtci of this NRCellRelationSingleAllOfAttributes.


        :return: The n_rtci of this NRCellRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._n_rtci

    @n_rtci.setter
    def n_rtci(self, n_rtci):
        """Sets the n_rtci of this NRCellRelationSingleAllOfAttributes.


        :param n_rtci: The n_rtci of this NRCellRelationSingleAllOfAttributes.
        :type n_rtci: int
        """

        self._n_rtci = n_rtci

    @property
    def cell_individual_offset(self):
        """Gets the cell_individual_offset of this NRCellRelationSingleAllOfAttributes.


        :return: The cell_individual_offset of this NRCellRelationSingleAllOfAttributes.
        :rtype: CellIndividualOffset
        """
        return self._cell_individual_offset

    @cell_individual_offset.setter
    def cell_individual_offset(self, cell_individual_offset):
        """Sets the cell_individual_offset of this NRCellRelationSingleAllOfAttributes.


        :param cell_individual_offset: The cell_individual_offset of this NRCellRelationSingleAllOfAttributes.
        :type cell_individual_offset: CellIndividualOffset
        """

        self._cell_individual_offset = cell_individual_offset

    @property
    def adjacent_nr_cell_ref(self):
        """Gets the adjacent_nr_cell_ref of this NRCellRelationSingleAllOfAttributes.


        :return: The adjacent_nr_cell_ref of this NRCellRelationSingleAllOfAttributes.
        :rtype: str
        """
        return self._adjacent_nr_cell_ref

    @adjacent_nr_cell_ref.setter
    def adjacent_nr_cell_ref(self, adjacent_nr_cell_ref):
        """Sets the adjacent_nr_cell_ref of this NRCellRelationSingleAllOfAttributes.


        :param adjacent_nr_cell_ref: The adjacent_nr_cell_ref of this NRCellRelationSingleAllOfAttributes.
        :type adjacent_nr_cell_ref: str
        """

        self._adjacent_nr_cell_ref = adjacent_nr_cell_ref

    @property
    def n_r_freq_relation_ref(self):
        """Gets the n_r_freq_relation_ref of this NRCellRelationSingleAllOfAttributes.


        :return: The n_r_freq_relation_ref of this NRCellRelationSingleAllOfAttributes.
        :rtype: str
        """
        return self._n_r_freq_relation_ref

    @n_r_freq_relation_ref.setter
    def n_r_freq_relation_ref(self, n_r_freq_relation_ref):
        """Sets the n_r_freq_relation_ref of this NRCellRelationSingleAllOfAttributes.


        :param n_r_freq_relation_ref: The n_r_freq_relation_ref of this NRCellRelationSingleAllOfAttributes.
        :type n_r_freq_relation_ref: str
        """

        self._n_r_freq_relation_ref = n_r_freq_relation_ref

    @property
    def is_remove_allowed(self):
        """Gets the is_remove_allowed of this NRCellRelationSingleAllOfAttributes.


        :return: The is_remove_allowed of this NRCellRelationSingleAllOfAttributes.
        :rtype: bool
        """
        return self._is_remove_allowed

    @is_remove_allowed.setter
    def is_remove_allowed(self, is_remove_allowed):
        """Sets the is_remove_allowed of this NRCellRelationSingleAllOfAttributes.


        :param is_remove_allowed: The is_remove_allowed of this NRCellRelationSingleAllOfAttributes.
        :type is_remove_allowed: bool
        """

        self._is_remove_allowed = is_remove_allowed

    @property
    def is_ho_allowed(self):
        """Gets the is_ho_allowed of this NRCellRelationSingleAllOfAttributes.


        :return: The is_ho_allowed of this NRCellRelationSingleAllOfAttributes.
        :rtype: bool
        """
        return self._is_ho_allowed

    @is_ho_allowed.setter
    def is_ho_allowed(self, is_ho_allowed):
        """Sets the is_ho_allowed of this NRCellRelationSingleAllOfAttributes.


        :param is_ho_allowed: The is_ho_allowed of this NRCellRelationSingleAllOfAttributes.
        :type is_ho_allowed: bool
        """

        self._is_ho_allowed = is_ho_allowed

    @property
    def is_es_covered_by(self):
        """Gets the is_es_covered_by of this NRCellRelationSingleAllOfAttributes.


        :return: The is_es_covered_by of this NRCellRelationSingleAllOfAttributes.
        :rtype: IsESCoveredBy
        """
        return self._is_es_covered_by

    @is_es_covered_by.setter
    def is_es_covered_by(self, is_es_covered_by):
        """Sets the is_es_covered_by of this NRCellRelationSingleAllOfAttributes.


        :param is_es_covered_by: The is_es_covered_by of this NRCellRelationSingleAllOfAttributes.
        :type is_es_covered_by: IsESCoveredBy
        """

        self._is_es_covered_by = is_es_covered_by

    @property
    def is_endc_allowed(self):
        """Gets the is_endc_allowed of this NRCellRelationSingleAllOfAttributes.


        :return: The is_endc_allowed of this NRCellRelationSingleAllOfAttributes.
        :rtype: bool
        """
        return self._is_endc_allowed

    @is_endc_allowed.setter
    def is_endc_allowed(self, is_endc_allowed):
        """Sets the is_endc_allowed of this NRCellRelationSingleAllOfAttributes.


        :param is_endc_allowed: The is_endc_allowed of this NRCellRelationSingleAllOfAttributes.
        :type is_endc_allowed: bool
        """

        self._is_endc_allowed = is_endc_allowed

    @property
    def is_mlb_allowed(self):
        """Gets the is_mlb_allowed of this NRCellRelationSingleAllOfAttributes.


        :return: The is_mlb_allowed of this NRCellRelationSingleAllOfAttributes.
        :rtype: bool
        """
        return self._is_mlb_allowed

    @is_mlb_allowed.setter
    def is_mlb_allowed(self, is_mlb_allowed):
        """Sets the is_mlb_allowed of this NRCellRelationSingleAllOfAttributes.


        :param is_mlb_allowed: The is_mlb_allowed of this NRCellRelationSingleAllOfAttributes.
        :type is_mlb_allowed: bool
        """

        self._is_mlb_allowed = is_mlb_allowed
