# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.geo_loc import GeoLoc
from openapi_server.models.topological_service_area import TopologicalServiceArea
from openapi_server import util

from openapi_server.models.geo_loc import GeoLoc  # noqa: E501
from openapi_server.models.topological_service_area import TopologicalServiceArea  # noqa: E501

class ServingLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geographical_location=None, topological_location=None):  # noqa: E501
        """ServingLocation - a model defined in OpenAPI

        :param geographical_location: The geographical_location of this ServingLocation.  # noqa: E501
        :type geographical_location: GeoLoc
        :param topological_location: The topological_location of this ServingLocation.  # noqa: E501
        :type topological_location: TopologicalServiceArea
        """
        self.openapi_types = {
            'geographical_location': GeoLoc,
            'topological_location': TopologicalServiceArea
        }

        self.attribute_map = {
            'geographical_location': 'geographicalLocation',
            'topological_location': 'topologicalLocation'
        }

        self._geographical_location = geographical_location
        self._topological_location = topological_location

    @classmethod
    def from_dict(cls, dikt) -> 'ServingLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServingLocation of this ServingLocation.  # noqa: E501
        :rtype: ServingLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geographical_location(self):
        """Gets the geographical_location of this ServingLocation.


        :return: The geographical_location of this ServingLocation.
        :rtype: GeoLoc
        """
        return self._geographical_location

    @geographical_location.setter
    def geographical_location(self, geographical_location):
        """Sets the geographical_location of this ServingLocation.


        :param geographical_location: The geographical_location of this ServingLocation.
        :type geographical_location: GeoLoc
        """

        self._geographical_location = geographical_location

    @property
    def topological_location(self):
        """Gets the topological_location of this ServingLocation.


        :return: The topological_location of this ServingLocation.
        :rtype: TopologicalServiceArea
        """
        return self._topological_location

    @topological_location.setter
    def topological_location(self, topological_location):
        """Sets the topological_location of this ServingLocation.


        :param topological_location: The topological_location of this ServingLocation.
        :type topological_location: TopologicalServiceArea
        """

        self._topological_location = topological_location
