# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.category import Category
from openapi_server.models.exposure import Exposure
from openapi_server import util

from openapi_server.models.category import Category  # noqa: E501
from openapi_server.models.exposure import Exposure  # noqa: E501

class ServAttrCom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category=None, tagging=None, exposure=None):  # noqa: E501
        """ServAttrCom - a model defined in OpenAPI

        :param category: The category of this ServAttrCom.  # noqa: E501
        :type category: Category
        :param tagging: The tagging of this ServAttrCom.  # noqa: E501
        :type tagging: List[str]
        :param exposure: The exposure of this ServAttrCom.  # noqa: E501
        :type exposure: Exposure
        """
        self.openapi_types = {
            'category': Category,
            'tagging': List[str],
            'exposure': Exposure
        }

        self.attribute_map = {
            'category': 'category',
            'tagging': 'tagging',
            'exposure': 'exposure'
        }

        self._category = category
        self._tagging = tagging
        self._exposure = exposure

    @classmethod
    def from_dict(cls, dikt) -> 'ServAttrCom':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServAttrCom of this ServAttrCom.  # noqa: E501
        :rtype: ServAttrCom
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ServAttrCom.


        :return: The category of this ServAttrCom.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ServAttrCom.


        :param category: The category of this ServAttrCom.
        :type category: Category
        """

        self._category = category

    @property
    def tagging(self):
        """Gets the tagging of this ServAttrCom.


        :return: The tagging of this ServAttrCom.
        :rtype: List[str]
        """
        return self._tagging

    @tagging.setter
    def tagging(self, tagging):
        """Sets the tagging of this ServAttrCom.


        :param tagging: The tagging of this ServAttrCom.
        :type tagging: List[str]
        """
        allowed_values = ["PERFORMANCE", "FUNCTION", "OPERATION"]  # noqa: E501
        if not set(tagging).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `tagging` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(tagging) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._tagging = tagging

    @property
    def exposure(self):
        """Gets the exposure of this ServAttrCom.


        :return: The exposure of this ServAttrCom.
        :rtype: Exposure
        """
        return self._exposure

    @exposure.setter
    def exposure(self, exposure):
        """Sets the exposure of this ServAttrCom.


        :param exposure: The exposure of this ServAttrCom.
        :type exposure: Exposure
        """

        self._exposure = exposure
