# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.expectation_context import ExpectationContext
from openapi_server.models.expectation_verb import ExpectationVerb
from openapi_server.models.fulfilment_info import FulfilmentInfo
from openapi_server.models.radio_network_expectation_expectation_targets_inner import RadioNetworkExpectationExpectationTargetsInner
from openapi_server.models.radio_network_expectation_object import RadioNetworkExpectationObject
from openapi_server import util

from openapi_server.models.expectation_context import ExpectationContext  # noqa: E501
from openapi_server.models.expectation_verb import ExpectationVerb  # noqa: E501
from openapi_server.models.fulfilment_info import FulfilmentInfo  # noqa: E501
from openapi_server.models.radio_network_expectation_expectation_targets_inner import RadioNetworkExpectationExpectationTargetsInner  # noqa: E501
from openapi_server.models.radio_network_expectation_object import RadioNetworkExpectationObject  # noqa: E501

class RadioNetworkExpectation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expectation_id=None, expectation_verb=None, expectation_objects=None, expectation_targets=None, expectation_contexts=None, expectationfulfilment_info=None):  # noqa: E501
        """RadioNetworkExpectation - a model defined in OpenAPI

        :param expectation_id: The expectation_id of this RadioNetworkExpectation.  # noqa: E501
        :type expectation_id: str
        :param expectation_verb: The expectation_verb of this RadioNetworkExpectation.  # noqa: E501
        :type expectation_verb: ExpectationVerb
        :param expectation_objects: The expectation_objects of this RadioNetworkExpectation.  # noqa: E501
        :type expectation_objects: List[RadioNetworkExpectationObject]
        :param expectation_targets: The expectation_targets of this RadioNetworkExpectation.  # noqa: E501
        :type expectation_targets: List[RadioNetworkExpectationExpectationTargetsInner]
        :param expectation_contexts: The expectation_contexts of this RadioNetworkExpectation.  # noqa: E501
        :type expectation_contexts: List[ExpectationContext]
        :param expectationfulfilment_info: The expectationfulfilment_info of this RadioNetworkExpectation.  # noqa: E501
        :type expectationfulfilment_info: FulfilmentInfo
        """
        self.openapi_types = {
            'expectation_id': str,
            'expectation_verb': ExpectationVerb,
            'expectation_objects': List[RadioNetworkExpectationObject],
            'expectation_targets': List[RadioNetworkExpectationExpectationTargetsInner],
            'expectation_contexts': List[ExpectationContext],
            'expectationfulfilment_info': FulfilmentInfo
        }

        self.attribute_map = {
            'expectation_id': 'expectationId',
            'expectation_verb': 'expectationVerb',
            'expectation_objects': 'expectationObjects',
            'expectation_targets': 'expectationTargets',
            'expectation_contexts': 'expectationContexts',
            'expectationfulfilment_info': 'expectationfulfilmentInfo'
        }

        self._expectation_id = expectation_id
        self._expectation_verb = expectation_verb
        self._expectation_objects = expectation_objects
        self._expectation_targets = expectation_targets
        self._expectation_contexts = expectation_contexts
        self._expectationfulfilment_info = expectationfulfilment_info

    @classmethod
    def from_dict(cls, dikt) -> 'RadioNetworkExpectation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RadioNetworkExpectation of this RadioNetworkExpectation.  # noqa: E501
        :rtype: RadioNetworkExpectation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expectation_id(self):
        """Gets the expectation_id of this RadioNetworkExpectation.


        :return: The expectation_id of this RadioNetworkExpectation.
        :rtype: str
        """
        return self._expectation_id

    @expectation_id.setter
    def expectation_id(self, expectation_id):
        """Sets the expectation_id of this RadioNetworkExpectation.


        :param expectation_id: The expectation_id of this RadioNetworkExpectation.
        :type expectation_id: str
        """

        self._expectation_id = expectation_id

    @property
    def expectation_verb(self):
        """Gets the expectation_verb of this RadioNetworkExpectation.


        :return: The expectation_verb of this RadioNetworkExpectation.
        :rtype: ExpectationVerb
        """
        return self._expectation_verb

    @expectation_verb.setter
    def expectation_verb(self, expectation_verb):
        """Sets the expectation_verb of this RadioNetworkExpectation.


        :param expectation_verb: The expectation_verb of this RadioNetworkExpectation.
        :type expectation_verb: ExpectationVerb
        """

        self._expectation_verb = expectation_verb

    @property
    def expectation_objects(self):
        """Gets the expectation_objects of this RadioNetworkExpectation.


        :return: The expectation_objects of this RadioNetworkExpectation.
        :rtype: List[RadioNetworkExpectationObject]
        """
        return self._expectation_objects

    @expectation_objects.setter
    def expectation_objects(self, expectation_objects):
        """Sets the expectation_objects of this RadioNetworkExpectation.


        :param expectation_objects: The expectation_objects of this RadioNetworkExpectation.
        :type expectation_objects: List[RadioNetworkExpectationObject]
        """

        self._expectation_objects = expectation_objects

    @property
    def expectation_targets(self):
        """Gets the expectation_targets of this RadioNetworkExpectation.


        :return: The expectation_targets of this RadioNetworkExpectation.
        :rtype: List[RadioNetworkExpectationExpectationTargetsInner]
        """
        return self._expectation_targets

    @expectation_targets.setter
    def expectation_targets(self, expectation_targets):
        """Sets the expectation_targets of this RadioNetworkExpectation.


        :param expectation_targets: The expectation_targets of this RadioNetworkExpectation.
        :type expectation_targets: List[RadioNetworkExpectationExpectationTargetsInner]
        """

        self._expectation_targets = expectation_targets

    @property
    def expectation_contexts(self):
        """Gets the expectation_contexts of this RadioNetworkExpectation.


        :return: The expectation_contexts of this RadioNetworkExpectation.
        :rtype: List[ExpectationContext]
        """
        return self._expectation_contexts

    @expectation_contexts.setter
    def expectation_contexts(self, expectation_contexts):
        """Sets the expectation_contexts of this RadioNetworkExpectation.


        :param expectation_contexts: The expectation_contexts of this RadioNetworkExpectation.
        :type expectation_contexts: List[ExpectationContext]
        """

        self._expectation_contexts = expectation_contexts

    @property
    def expectationfulfilment_info(self):
        """Gets the expectationfulfilment_info of this RadioNetworkExpectation.


        :return: The expectationfulfilment_info of this RadioNetworkExpectation.
        :rtype: FulfilmentInfo
        """
        return self._expectationfulfilment_info

    @expectationfulfilment_info.setter
    def expectationfulfilment_info(self, expectationfulfilment_info):
        """Sets the expectationfulfilment_info of this RadioNetworkExpectation.


        :param expectationfulfilment_info: The expectationfulfilment_info of this RadioNetworkExpectation.
        :type expectationfulfilment_info: FulfilmentInfo
        """

        self._expectationfulfilment_info = expectationfulfilment_info
