# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.administrative_state import AdministrativeState
from openapi_server.models.operational_state import OperationalState
from openapi_server.models.reporting_ctrl import ReportingCtrl
from openapi_server import util

from openapi_server.models.administrative_state import AdministrativeState  # noqa: E501
from openapi_server.models.operational_state import OperationalState  # noqa: E501
from openapi_server.models.reporting_ctrl import ReportingCtrl  # noqa: E501

class PerfMetricJobSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrative_state=None, operational_state=None, job_id=None, performance_metrics=None, granularity_period=None, object_instances=None, root_object_instances=None, reporting_ctrl=None):  # noqa: E501
        """PerfMetricJobSingleAllOfAttributes - a model defined in OpenAPI

        :param administrative_state: The administrative_state of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type administrative_state: AdministrativeState
        :param operational_state: The operational_state of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type operational_state: OperationalState
        :param job_id: The job_id of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type job_id: str
        :param performance_metrics: The performance_metrics of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type performance_metrics: List[str]
        :param granularity_period: The granularity_period of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type granularity_period: int
        :param object_instances: The object_instances of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type object_instances: List[str]
        :param root_object_instances: The root_object_instances of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type root_object_instances: List[str]
        :param reporting_ctrl: The reporting_ctrl of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :type reporting_ctrl: ReportingCtrl
        """
        self.openapi_types = {
            'administrative_state': AdministrativeState,
            'operational_state': OperationalState,
            'job_id': str,
            'performance_metrics': List[str],
            'granularity_period': int,
            'object_instances': List[str],
            'root_object_instances': List[str],
            'reporting_ctrl': ReportingCtrl
        }

        self.attribute_map = {
            'administrative_state': 'administrativeState',
            'operational_state': 'operationalState',
            'job_id': 'jobId',
            'performance_metrics': 'performanceMetrics',
            'granularity_period': 'granularityPeriod',
            'object_instances': 'objectInstances',
            'root_object_instances': 'rootObjectInstances',
            'reporting_ctrl': 'reportingCtrl'
        }

        self._administrative_state = administrative_state
        self._operational_state = operational_state
        self._job_id = job_id
        self._performance_metrics = performance_metrics
        self._granularity_period = granularity_period
        self._object_instances = object_instances
        self._root_object_instances = root_object_instances
        self._reporting_ctrl = reporting_ctrl

    @classmethod
    def from_dict(cls, dikt) -> 'PerfMetricJobSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PerfMetricJob_Single_allOf_attributes of this PerfMetricJobSingleAllOfAttributes.  # noqa: E501
        :rtype: PerfMetricJobSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrative_state(self):
        """Gets the administrative_state of this PerfMetricJobSingleAllOfAttributes.


        :return: The administrative_state of this PerfMetricJobSingleAllOfAttributes.
        :rtype: AdministrativeState
        """
        return self._administrative_state

    @administrative_state.setter
    def administrative_state(self, administrative_state):
        """Sets the administrative_state of this PerfMetricJobSingleAllOfAttributes.


        :param administrative_state: The administrative_state of this PerfMetricJobSingleAllOfAttributes.
        :type administrative_state: AdministrativeState
        """

        self._administrative_state = administrative_state

    @property
    def operational_state(self):
        """Gets the operational_state of this PerfMetricJobSingleAllOfAttributes.


        :return: The operational_state of this PerfMetricJobSingleAllOfAttributes.
        :rtype: OperationalState
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this PerfMetricJobSingleAllOfAttributes.


        :param operational_state: The operational_state of this PerfMetricJobSingleAllOfAttributes.
        :type operational_state: OperationalState
        """

        self._operational_state = operational_state

    @property
    def job_id(self):
        """Gets the job_id of this PerfMetricJobSingleAllOfAttributes.


        :return: The job_id of this PerfMetricJobSingleAllOfAttributes.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this PerfMetricJobSingleAllOfAttributes.


        :param job_id: The job_id of this PerfMetricJobSingleAllOfAttributes.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def performance_metrics(self):
        """Gets the performance_metrics of this PerfMetricJobSingleAllOfAttributes.


        :return: The performance_metrics of this PerfMetricJobSingleAllOfAttributes.
        :rtype: List[str]
        """
        return self._performance_metrics

    @performance_metrics.setter
    def performance_metrics(self, performance_metrics):
        """Sets the performance_metrics of this PerfMetricJobSingleAllOfAttributes.


        :param performance_metrics: The performance_metrics of this PerfMetricJobSingleAllOfAttributes.
        :type performance_metrics: List[str]
        """

        self._performance_metrics = performance_metrics

    @property
    def granularity_period(self):
        """Gets the granularity_period of this PerfMetricJobSingleAllOfAttributes.


        :return: The granularity_period of this PerfMetricJobSingleAllOfAttributes.
        :rtype: int
        """
        return self._granularity_period

    @granularity_period.setter
    def granularity_period(self, granularity_period):
        """Sets the granularity_period of this PerfMetricJobSingleAllOfAttributes.


        :param granularity_period: The granularity_period of this PerfMetricJobSingleAllOfAttributes.
        :type granularity_period: int
        """
        if granularity_period is not None and granularity_period < 1:  # noqa: E501
            raise ValueError("Invalid value for `granularity_period`, must be a value greater than or equal to `1`")  # noqa: E501

        self._granularity_period = granularity_period

    @property
    def object_instances(self):
        """Gets the object_instances of this PerfMetricJobSingleAllOfAttributes.


        :return: The object_instances of this PerfMetricJobSingleAllOfAttributes.
        :rtype: List[str]
        """
        return self._object_instances

    @object_instances.setter
    def object_instances(self, object_instances):
        """Sets the object_instances of this PerfMetricJobSingleAllOfAttributes.


        :param object_instances: The object_instances of this PerfMetricJobSingleAllOfAttributes.
        :type object_instances: List[str]
        """

        self._object_instances = object_instances

    @property
    def root_object_instances(self):
        """Gets the root_object_instances of this PerfMetricJobSingleAllOfAttributes.


        :return: The root_object_instances of this PerfMetricJobSingleAllOfAttributes.
        :rtype: List[str]
        """
        return self._root_object_instances

    @root_object_instances.setter
    def root_object_instances(self, root_object_instances):
        """Sets the root_object_instances of this PerfMetricJobSingleAllOfAttributes.


        :param root_object_instances: The root_object_instances of this PerfMetricJobSingleAllOfAttributes.
        :type root_object_instances: List[str]
        """

        self._root_object_instances = root_object_instances

    @property
    def reporting_ctrl(self):
        """Gets the reporting_ctrl of this PerfMetricJobSingleAllOfAttributes.


        :return: The reporting_ctrl of this PerfMetricJobSingleAllOfAttributes.
        :rtype: ReportingCtrl
        """
        return self._reporting_ctrl

    @reporting_ctrl.setter
    def reporting_ctrl(self, reporting_ctrl):
        """Sets the reporting_ctrl of this PerfMetricJobSingleAllOfAttributes.


        :param reporting_ctrl: The reporting_ctrl of this PerfMetricJobSingleAllOfAttributes.
        :type reporting_ctrl: ReportingCtrl
        """

        self._reporting_ctrl = reporting_ctrl
