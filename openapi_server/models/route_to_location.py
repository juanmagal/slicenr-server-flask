# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.route_information import RouteInformation
from openapi_server import util

from openapi_server.models.route_information import RouteInformation  # noqa: E501

class RouteToLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dnai=None, route_info=None, route_prof_id=None):  # noqa: E501
        """RouteToLocation - a model defined in OpenAPI

        :param dnai: The dnai of this RouteToLocation.  # noqa: E501
        :type dnai: str
        :param route_info: The route_info of this RouteToLocation.  # noqa: E501
        :type route_info: RouteInformation
        :param route_prof_id: The route_prof_id of this RouteToLocation.  # noqa: E501
        :type route_prof_id: str
        """
        self.openapi_types = {
            'dnai': str,
            'route_info': RouteInformation,
            'route_prof_id': str
        }

        self.attribute_map = {
            'dnai': 'dnai',
            'route_info': 'routeInfo',
            'route_prof_id': 'routeProfId'
        }

        self._dnai = dnai
        self._route_info = route_info
        self._route_prof_id = route_prof_id

    @classmethod
    def from_dict(cls, dikt) -> 'RouteToLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RouteToLocation of this RouteToLocation.  # noqa: E501
        :rtype: RouteToLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dnai(self):
        """Gets the dnai of this RouteToLocation.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :return: The dnai of this RouteToLocation.
        :rtype: str
        """
        return self._dnai

    @dnai.setter
    def dnai(self, dnai):
        """Sets the dnai of this RouteToLocation.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :param dnai: The dnai of this RouteToLocation.
        :type dnai: str
        """
        if dnai is None:
            raise ValueError("Invalid value for `dnai`, must not be `None`")  # noqa: E501

        self._dnai = dnai

    @property
    def route_info(self):
        """Gets the route_info of this RouteToLocation.


        :return: The route_info of this RouteToLocation.
        :rtype: RouteInformation
        """
        return self._route_info

    @route_info.setter
    def route_info(self, route_info):
        """Sets the route_info of this RouteToLocation.


        :param route_info: The route_info of this RouteToLocation.
        :type route_info: RouteInformation
        """

        self._route_info = route_info

    @property
    def route_prof_id(self):
        """Gets the route_prof_id of this RouteToLocation.

        Identifies the routing profile Id.  # noqa: E501

        :return: The route_prof_id of this RouteToLocation.
        :rtype: str
        """
        return self._route_prof_id

    @route_prof_id.setter
    def route_prof_id(self, route_prof_id):
        """Sets the route_prof_id of this RouteToLocation.

        Identifies the routing profile Id.  # noqa: E501

        :param route_prof_id: The route_prof_id of this RouteToLocation.
        :type route_prof_id: str
        """

        self._route_prof_id = route_prof_id
