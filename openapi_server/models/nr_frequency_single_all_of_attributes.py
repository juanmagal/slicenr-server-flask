# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ssb_sub_carrier_spacing import SsbSubCarrierSpacing
from openapi_server import util

from openapi_server.models.ssb_sub_carrier_spacing import SsbSubCarrierSpacing  # noqa: E501

class NRFrequencySingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_frequency_ssb=None, ssb_sub_carrier_spacing=None, multi_frequency_band_list_nr=None):  # noqa: E501
        """NRFrequencySingleAllOfAttributes - a model defined in OpenAPI

        :param absolute_frequency_ssb: The absolute_frequency_ssb of this NRFrequencySingleAllOfAttributes.  # noqa: E501
        :type absolute_frequency_ssb: int
        :param ssb_sub_carrier_spacing: The ssb_sub_carrier_spacing of this NRFrequencySingleAllOfAttributes.  # noqa: E501
        :type ssb_sub_carrier_spacing: SsbSubCarrierSpacing
        :param multi_frequency_band_list_nr: The multi_frequency_band_list_nr of this NRFrequencySingleAllOfAttributes.  # noqa: E501
        :type multi_frequency_band_list_nr: int
        """
        self.openapi_types = {
            'absolute_frequency_ssb': int,
            'ssb_sub_carrier_spacing': SsbSubCarrierSpacing,
            'multi_frequency_band_list_nr': int
        }

        self.attribute_map = {
            'absolute_frequency_ssb': 'absoluteFrequencySSB',
            'ssb_sub_carrier_spacing': 'ssbSubCarrierSpacing',
            'multi_frequency_band_list_nr': 'multiFrequencyBandListNR'
        }

        self._absolute_frequency_ssb = absolute_frequency_ssb
        self._ssb_sub_carrier_spacing = ssb_sub_carrier_spacing
        self._multi_frequency_band_list_nr = multi_frequency_band_list_nr

    @classmethod
    def from_dict(cls, dikt) -> 'NRFrequencySingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NRFrequency_Single_allOf_attributes of this NRFrequencySingleAllOfAttributes.  # noqa: E501
        :rtype: NRFrequencySingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_frequency_ssb(self):
        """Gets the absolute_frequency_ssb of this NRFrequencySingleAllOfAttributes.


        :return: The absolute_frequency_ssb of this NRFrequencySingleAllOfAttributes.
        :rtype: int
        """
        return self._absolute_frequency_ssb

    @absolute_frequency_ssb.setter
    def absolute_frequency_ssb(self, absolute_frequency_ssb):
        """Sets the absolute_frequency_ssb of this NRFrequencySingleAllOfAttributes.


        :param absolute_frequency_ssb: The absolute_frequency_ssb of this NRFrequencySingleAllOfAttributes.
        :type absolute_frequency_ssb: int
        """
        if absolute_frequency_ssb is not None and absolute_frequency_ssb > 3279165:  # noqa: E501
            raise ValueError("Invalid value for `absolute_frequency_ssb`, must be a value less than or equal to `3279165`")  # noqa: E501
        if absolute_frequency_ssb is not None and absolute_frequency_ssb < 0:  # noqa: E501
            raise ValueError("Invalid value for `absolute_frequency_ssb`, must be a value greater than or equal to `0`")  # noqa: E501

        self._absolute_frequency_ssb = absolute_frequency_ssb

    @property
    def ssb_sub_carrier_spacing(self):
        """Gets the ssb_sub_carrier_spacing of this NRFrequencySingleAllOfAttributes.


        :return: The ssb_sub_carrier_spacing of this NRFrequencySingleAllOfAttributes.
        :rtype: SsbSubCarrierSpacing
        """
        return self._ssb_sub_carrier_spacing

    @ssb_sub_carrier_spacing.setter
    def ssb_sub_carrier_spacing(self, ssb_sub_carrier_spacing):
        """Sets the ssb_sub_carrier_spacing of this NRFrequencySingleAllOfAttributes.


        :param ssb_sub_carrier_spacing: The ssb_sub_carrier_spacing of this NRFrequencySingleAllOfAttributes.
        :type ssb_sub_carrier_spacing: SsbSubCarrierSpacing
        """

        self._ssb_sub_carrier_spacing = ssb_sub_carrier_spacing

    @property
    def multi_frequency_band_list_nr(self):
        """Gets the multi_frequency_band_list_nr of this NRFrequencySingleAllOfAttributes.


        :return: The multi_frequency_band_list_nr of this NRFrequencySingleAllOfAttributes.
        :rtype: int
        """
        return self._multi_frequency_band_list_nr

    @multi_frequency_band_list_nr.setter
    def multi_frequency_band_list_nr(self, multi_frequency_band_list_nr):
        """Sets the multi_frequency_band_list_nr of this NRFrequencySingleAllOfAttributes.


        :param multi_frequency_band_list_nr: The multi_frequency_band_list_nr of this NRFrequencySingleAllOfAttributes.
        :type multi_frequency_band_list_nr: int
        """
        if multi_frequency_band_list_nr is not None and multi_frequency_band_list_nr > 256:  # noqa: E501
            raise ValueError("Invalid value for `multi_frequency_band_list_nr`, must be a value less than or equal to `256`")  # noqa: E501
        if multi_frequency_band_list_nr is not None and multi_frequency_band_list_nr < 1:  # noqa: E501
            raise ValueError("Invalid value for `multi_frequency_band_list_nr`, must be a value greater than or equal to `1`")  # noqa: E501

        self._multi_frequency_band_list_nr = multi_frequency_band_list_nr
