# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.correlated_notification import CorrelatedNotification
from openapi_server.models.insert import Insert
from openapi_server.models.operation import Operation
from openapi_server.models.source_indicator import SourceIndicator
from openapi_server import util

from openapi_server.models.correlated_notification import CorrelatedNotification  # noqa: E501
from openapi_server.models.insert import Insert  # noqa: E501
from openapi_server.models.operation import Operation  # noqa: E501
from openapi_server.models.source_indicator import SourceIndicator  # noqa: E501

class MoiChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification_id=None, correlated_notifications=None, additional_text=None, source_indicator=None, op=None, path=None, insert=None, value=None, old_value=None):  # noqa: E501
        """MoiChange - a model defined in OpenAPI

        :param notification_id: The notification_id of this MoiChange.  # noqa: E501
        :type notification_id: int
        :param correlated_notifications: The correlated_notifications of this MoiChange.  # noqa: E501
        :type correlated_notifications: List[CorrelatedNotification]
        :param additional_text: The additional_text of this MoiChange.  # noqa: E501
        :type additional_text: str
        :param source_indicator: The source_indicator of this MoiChange.  # noqa: E501
        :type source_indicator: SourceIndicator
        :param op: The op of this MoiChange.  # noqa: E501
        :type op: Operation
        :param path: The path of this MoiChange.  # noqa: E501
        :type path: str
        :param insert: The insert of this MoiChange.  # noqa: E501
        :type insert: Insert
        :param value: The value of this MoiChange.  # noqa: E501
        :type value: object
        :param old_value: The old_value of this MoiChange.  # noqa: E501
        :type old_value: object
        """
        self.openapi_types = {
            'notification_id': int,
            'correlated_notifications': List[CorrelatedNotification],
            'additional_text': str,
            'source_indicator': SourceIndicator,
            'op': Operation,
            'path': str,
            'insert': Insert,
            'value': object,
            'old_value': object
        }

        self.attribute_map = {
            'notification_id': 'notificationId',
            'correlated_notifications': 'correlatedNotifications',
            'additional_text': 'additionalText',
            'source_indicator': 'sourceIndicator',
            'op': 'op',
            'path': 'path',
            'insert': 'insert',
            'value': 'value',
            'old_value': 'oldValue'
        }

        self._notification_id = notification_id
        self._correlated_notifications = correlated_notifications
        self._additional_text = additional_text
        self._source_indicator = source_indicator
        self._op = op
        self._path = path
        self._insert = insert
        self._value = value
        self._old_value = old_value

    @classmethod
    def from_dict(cls, dikt) -> 'MoiChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MoiChange of this MoiChange.  # noqa: E501
        :rtype: MoiChange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_id(self):
        """Gets the notification_id of this MoiChange.


        :return: The notification_id of this MoiChange.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this MoiChange.


        :param notification_id: The notification_id of this MoiChange.
        :type notification_id: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")  # noqa: E501

        self._notification_id = notification_id

    @property
    def correlated_notifications(self):
        """Gets the correlated_notifications of this MoiChange.


        :return: The correlated_notifications of this MoiChange.
        :rtype: List[CorrelatedNotification]
        """
        return self._correlated_notifications

    @correlated_notifications.setter
    def correlated_notifications(self, correlated_notifications):
        """Sets the correlated_notifications of this MoiChange.


        :param correlated_notifications: The correlated_notifications of this MoiChange.
        :type correlated_notifications: List[CorrelatedNotification]
        """

        self._correlated_notifications = correlated_notifications

    @property
    def additional_text(self):
        """Gets the additional_text of this MoiChange.


        :return: The additional_text of this MoiChange.
        :rtype: str
        """
        return self._additional_text

    @additional_text.setter
    def additional_text(self, additional_text):
        """Sets the additional_text of this MoiChange.


        :param additional_text: The additional_text of this MoiChange.
        :type additional_text: str
        """

        self._additional_text = additional_text

    @property
    def source_indicator(self):
        """Gets the source_indicator of this MoiChange.


        :return: The source_indicator of this MoiChange.
        :rtype: SourceIndicator
        """
        return self._source_indicator

    @source_indicator.setter
    def source_indicator(self, source_indicator):
        """Sets the source_indicator of this MoiChange.


        :param source_indicator: The source_indicator of this MoiChange.
        :type source_indicator: SourceIndicator
        """

        self._source_indicator = source_indicator

    @property
    def op(self):
        """Gets the op of this MoiChange.


        :return: The op of this MoiChange.
        :rtype: Operation
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this MoiChange.


        :param op: The op of this MoiChange.
        :type op: Operation
        """
        if op is None:
            raise ValueError("Invalid value for `op`, must not be `None`")  # noqa: E501

        self._op = op

    @property
    def path(self):
        """Gets the path of this MoiChange.


        :return: The path of this MoiChange.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MoiChange.


        :param path: The path of this MoiChange.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def insert(self):
        """Gets the insert of this MoiChange.


        :return: The insert of this MoiChange.
        :rtype: Insert
        """
        return self._insert

    @insert.setter
    def insert(self, insert):
        """Sets the insert of this MoiChange.


        :param insert: The insert of this MoiChange.
        :type insert: Insert
        """

        self._insert = insert

    @property
    def value(self):
        """Gets the value of this MoiChange.


        :return: The value of this MoiChange.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MoiChange.


        :param value: The value of this MoiChange.
        :type value: object
        """

        self._value = value

    @property
    def old_value(self):
        """Gets the old_value of this MoiChange.


        :return: The old_value of this MoiChange.
        :rtype: object
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this MoiChange.


        :param old_value: The old_value of this MoiChange.
        :type old_value: object
        """

        self._old_value = old_value
