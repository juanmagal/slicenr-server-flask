# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DLBOFunctionSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dlbo_control=None, maximum_deviation_ho_trigger=None, minimum_time_between_ho_trigger_change=None):  # noqa: E501
        """DLBOFunctionSingleAllOfAttributes - a model defined in OpenAPI

        :param dlbo_control: The dlbo_control of this DLBOFunctionSingleAllOfAttributes.  # noqa: E501
        :type dlbo_control: bool
        :param maximum_deviation_ho_trigger: The maximum_deviation_ho_trigger of this DLBOFunctionSingleAllOfAttributes.  # noqa: E501
        :type maximum_deviation_ho_trigger: int
        :param minimum_time_between_ho_trigger_change: The minimum_time_between_ho_trigger_change of this DLBOFunctionSingleAllOfAttributes.  # noqa: E501
        :type minimum_time_between_ho_trigger_change: int
        """
        self.openapi_types = {
            'dlbo_control': bool,
            'maximum_deviation_ho_trigger': int,
            'minimum_time_between_ho_trigger_change': int
        }

        self.attribute_map = {
            'dlbo_control': 'dlboControl',
            'maximum_deviation_ho_trigger': 'maximumDeviationHoTrigger',
            'minimum_time_between_ho_trigger_change': 'minimumTimeBetweenHoTriggerChange'
        }

        self._dlbo_control = dlbo_control
        self._maximum_deviation_ho_trigger = maximum_deviation_ho_trigger
        self._minimum_time_between_ho_trigger_change = minimum_time_between_ho_trigger_change

    @classmethod
    def from_dict(cls, dikt) -> 'DLBOFunctionSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DLBOFunction_Single_allOf_attributes of this DLBOFunctionSingleAllOfAttributes.  # noqa: E501
        :rtype: DLBOFunctionSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dlbo_control(self):
        """Gets the dlbo_control of this DLBOFunctionSingleAllOfAttributes.


        :return: The dlbo_control of this DLBOFunctionSingleAllOfAttributes.
        :rtype: bool
        """
        return self._dlbo_control

    @dlbo_control.setter
    def dlbo_control(self, dlbo_control):
        """Sets the dlbo_control of this DLBOFunctionSingleAllOfAttributes.


        :param dlbo_control: The dlbo_control of this DLBOFunctionSingleAllOfAttributes.
        :type dlbo_control: bool
        """

        self._dlbo_control = dlbo_control

    @property
    def maximum_deviation_ho_trigger(self):
        """Gets the maximum_deviation_ho_trigger of this DLBOFunctionSingleAllOfAttributes.


        :return: The maximum_deviation_ho_trigger of this DLBOFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._maximum_deviation_ho_trigger

    @maximum_deviation_ho_trigger.setter
    def maximum_deviation_ho_trigger(self, maximum_deviation_ho_trigger):
        """Sets the maximum_deviation_ho_trigger of this DLBOFunctionSingleAllOfAttributes.


        :param maximum_deviation_ho_trigger: The maximum_deviation_ho_trigger of this DLBOFunctionSingleAllOfAttributes.
        :type maximum_deviation_ho_trigger: int
        """
        if maximum_deviation_ho_trigger is not None and maximum_deviation_ho_trigger > 20:  # noqa: E501
            raise ValueError("Invalid value for `maximum_deviation_ho_trigger`, must be a value less than or equal to `20`")  # noqa: E501
        if maximum_deviation_ho_trigger is not None and maximum_deviation_ho_trigger < -20:  # noqa: E501
            raise ValueError("Invalid value for `maximum_deviation_ho_trigger`, must be a value greater than or equal to `-20`")  # noqa: E501

        self._maximum_deviation_ho_trigger = maximum_deviation_ho_trigger

    @property
    def minimum_time_between_ho_trigger_change(self):
        """Gets the minimum_time_between_ho_trigger_change of this DLBOFunctionSingleAllOfAttributes.


        :return: The minimum_time_between_ho_trigger_change of this DLBOFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._minimum_time_between_ho_trigger_change

    @minimum_time_between_ho_trigger_change.setter
    def minimum_time_between_ho_trigger_change(self, minimum_time_between_ho_trigger_change):
        """Sets the minimum_time_between_ho_trigger_change of this DLBOFunctionSingleAllOfAttributes.


        :param minimum_time_between_ho_trigger_change: The minimum_time_between_ho_trigger_change of this DLBOFunctionSingleAllOfAttributes.
        :type minimum_time_between_ho_trigger_change: int
        """
        if minimum_time_between_ho_trigger_change is not None and minimum_time_between_ho_trigger_change > 604800:  # noqa: E501
            raise ValueError("Invalid value for `minimum_time_between_ho_trigger_change`, must be a value less than or equal to `604800`")  # noqa: E501
        if minimum_time_between_ho_trigger_change is not None and minimum_time_between_ho_trigger_change < 0:  # noqa: E501
            raise ValueError("Invalid value for `minimum_time_between_ho_trigger_change`, must be a value greater than or equal to `0`")  # noqa: E501

        self._minimum_time_between_ho_trigger_change = minimum_time_between_ho_trigger_change
