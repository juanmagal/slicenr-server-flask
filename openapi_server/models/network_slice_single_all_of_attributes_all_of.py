# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.administrative_state import AdministrativeState
from openapi_server.models.operational_state import OperationalState
from openapi_server.models.service_profile import ServiceProfile
from openapi_server import util

from openapi_server.models.administrative_state import AdministrativeState  # noqa: E501
from openapi_server.models.operational_state import OperationalState  # noqa: E501
from openapi_server.models.service_profile import ServiceProfile  # noqa: E501

class NetworkSliceSingleAllOfAttributesAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_slice_subnet_ref=None, operational_state=None, administrative_state=None, service_profile_list=None):  # noqa: E501
        """NetworkSliceSingleAllOfAttributesAllOf - a model defined in OpenAPI

        :param network_slice_subnet_ref: The network_slice_subnet_ref of this NetworkSliceSingleAllOfAttributesAllOf.  # noqa: E501
        :type network_slice_subnet_ref: str
        :param operational_state: The operational_state of this NetworkSliceSingleAllOfAttributesAllOf.  # noqa: E501
        :type operational_state: OperationalState
        :param administrative_state: The administrative_state of this NetworkSliceSingleAllOfAttributesAllOf.  # noqa: E501
        :type administrative_state: AdministrativeState
        :param service_profile_list: The service_profile_list of this NetworkSliceSingleAllOfAttributesAllOf.  # noqa: E501
        :type service_profile_list: List[ServiceProfile]
        """
        self.openapi_types = {
            'network_slice_subnet_ref': str,
            'operational_state': OperationalState,
            'administrative_state': AdministrativeState,
            'service_profile_list': List[ServiceProfile]
        }

        self.attribute_map = {
            'network_slice_subnet_ref': 'networkSliceSubnetRef',
            'operational_state': 'operationalState',
            'administrative_state': 'administrativeState',
            'service_profile_list': 'serviceProfileList'
        }

        self._network_slice_subnet_ref = network_slice_subnet_ref
        self._operational_state = operational_state
        self._administrative_state = administrative_state
        self._service_profile_list = service_profile_list

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkSliceSingleAllOfAttributesAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkSlice_Single_allOf_attributes_allOf of this NetworkSliceSingleAllOfAttributesAllOf.  # noqa: E501
        :rtype: NetworkSliceSingleAllOfAttributesAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_slice_subnet_ref(self):
        """Gets the network_slice_subnet_ref of this NetworkSliceSingleAllOfAttributesAllOf.


        :return: The network_slice_subnet_ref of this NetworkSliceSingleAllOfAttributesAllOf.
        :rtype: str
        """
        return self._network_slice_subnet_ref

    @network_slice_subnet_ref.setter
    def network_slice_subnet_ref(self, network_slice_subnet_ref):
        """Sets the network_slice_subnet_ref of this NetworkSliceSingleAllOfAttributesAllOf.


        :param network_slice_subnet_ref: The network_slice_subnet_ref of this NetworkSliceSingleAllOfAttributesAllOf.
        :type network_slice_subnet_ref: str
        """

        self._network_slice_subnet_ref = network_slice_subnet_ref

    @property
    def operational_state(self):
        """Gets the operational_state of this NetworkSliceSingleAllOfAttributesAllOf.


        :return: The operational_state of this NetworkSliceSingleAllOfAttributesAllOf.
        :rtype: OperationalState
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this NetworkSliceSingleAllOfAttributesAllOf.


        :param operational_state: The operational_state of this NetworkSliceSingleAllOfAttributesAllOf.
        :type operational_state: OperationalState
        """

        self._operational_state = operational_state

    @property
    def administrative_state(self):
        """Gets the administrative_state of this NetworkSliceSingleAllOfAttributesAllOf.


        :return: The administrative_state of this NetworkSliceSingleAllOfAttributesAllOf.
        :rtype: AdministrativeState
        """
        return self._administrative_state

    @administrative_state.setter
    def administrative_state(self, administrative_state):
        """Sets the administrative_state of this NetworkSliceSingleAllOfAttributesAllOf.


        :param administrative_state: The administrative_state of this NetworkSliceSingleAllOfAttributesAllOf.
        :type administrative_state: AdministrativeState
        """

        self._administrative_state = administrative_state

    @property
    def service_profile_list(self):
        """Gets the service_profile_list of this NetworkSliceSingleAllOfAttributesAllOf.


        :return: The service_profile_list of this NetworkSliceSingleAllOfAttributesAllOf.
        :rtype: List[ServiceProfile]
        """
        return self._service_profile_list

    @service_profile_list.setter
    def service_profile_list(self, service_profile_list):
        """Sets the service_profile_list of this NetworkSliceSingleAllOfAttributesAllOf.


        :param service_profile_list: The service_profile_list of this NetworkSliceSingleAllOfAttributesAllOf.
        :type service_profile_list: List[ServiceProfile]
        """

        self._service_profile_list = service_profile_list
