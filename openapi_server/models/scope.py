# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.scope_type import ScopeType
from openapi_server import util

from openapi_server.models.scope_type import ScopeType  # noqa: E501

class Scope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope_type=None, scope_level=None):  # noqa: E501
        """Scope - a model defined in OpenAPI

        :param scope_type: The scope_type of this Scope.  # noqa: E501
        :type scope_type: ScopeType
        :param scope_level: The scope_level of this Scope.  # noqa: E501
        :type scope_level: int
        """
        self.openapi_types = {
            'scope_type': ScopeType,
            'scope_level': int
        }

        self.attribute_map = {
            'scope_type': 'scopeType',
            'scope_level': 'scopeLevel'
        }

        self._scope_type = scope_type
        self._scope_level = scope_level

    @classmethod
    def from_dict(cls, dikt) -> 'Scope':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Scope of this Scope.  # noqa: E501
        :rtype: Scope
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope_type(self):
        """Gets the scope_type of this Scope.


        :return: The scope_type of this Scope.
        :rtype: ScopeType
        """
        return self._scope_type

    @scope_type.setter
    def scope_type(self, scope_type):
        """Sets the scope_type of this Scope.


        :param scope_type: The scope_type of this Scope.
        :type scope_type: ScopeType
        """

        self._scope_type = scope_type

    @property
    def scope_level(self):
        """Gets the scope_level of this Scope.


        :return: The scope_level of this Scope.
        :rtype: int
        """
        return self._scope_level

    @scope_level.setter
    def scope_level(self, scope_level):
        """Sets the scope_level of this Scope.


        :param scope_level: The scope_level of this Scope.
        :type scope_level: int
        """

        self._scope_level = scope_level
