# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.rs_set_type import RSSetType
from openapi_server import util

from openapi_server.models.rs_set_type import RSSetType  # noqa: E501

class RimRSSetSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, set_id=None, set_type=None, n_r_cell_du_refs=None):  # noqa: E501
        """RimRSSetSingleAllOfAttributes - a model defined in OpenAPI

        :param set_id: The set_id of this RimRSSetSingleAllOfAttributes.  # noqa: E501
        :type set_id: int
        :param set_type: The set_type of this RimRSSetSingleAllOfAttributes.  # noqa: E501
        :type set_type: RSSetType
        :param n_r_cell_du_refs: The n_r_cell_du_refs of this RimRSSetSingleAllOfAttributes.  # noqa: E501
        :type n_r_cell_du_refs: List[str]
        """
        self.openapi_types = {
            'set_id': int,
            'set_type': RSSetType,
            'n_r_cell_du_refs': List[str]
        }

        self.attribute_map = {
            'set_id': 'setId',
            'set_type': 'setType',
            'n_r_cell_du_refs': 'nRCellDURefs'
        }

        self._set_id = set_id
        self._set_type = set_type
        self._n_r_cell_du_refs = n_r_cell_du_refs

    @classmethod
    def from_dict(cls, dikt) -> 'RimRSSetSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RimRSSet_Single_allOf_attributes of this RimRSSetSingleAllOfAttributes.  # noqa: E501
        :rtype: RimRSSetSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def set_id(self):
        """Gets the set_id of this RimRSSetSingleAllOfAttributes.


        :return: The set_id of this RimRSSetSingleAllOfAttributes.
        :rtype: int
        """
        return self._set_id

    @set_id.setter
    def set_id(self, set_id):
        """Sets the set_id of this RimRSSetSingleAllOfAttributes.


        :param set_id: The set_id of this RimRSSetSingleAllOfAttributes.
        :type set_id: int
        """
        if set_id is not None and set_id > 4194303:  # noqa: E501
            raise ValueError("Invalid value for `set_id`, must be a value less than or equal to `4194303`")  # noqa: E501

        self._set_id = set_id

    @property
    def set_type(self):
        """Gets the set_type of this RimRSSetSingleAllOfAttributes.


        :return: The set_type of this RimRSSetSingleAllOfAttributes.
        :rtype: RSSetType
        """
        return self._set_type

    @set_type.setter
    def set_type(self, set_type):
        """Sets the set_type of this RimRSSetSingleAllOfAttributes.


        :param set_type: The set_type of this RimRSSetSingleAllOfAttributes.
        :type set_type: RSSetType
        """

        self._set_type = set_type

    @property
    def n_r_cell_du_refs(self):
        """Gets the n_r_cell_du_refs of this RimRSSetSingleAllOfAttributes.


        :return: The n_r_cell_du_refs of this RimRSSetSingleAllOfAttributes.
        :rtype: List[str]
        """
        return self._n_r_cell_du_refs

    @n_r_cell_du_refs.setter
    def n_r_cell_du_refs(self, n_r_cell_du_refs):
        """Sets the n_r_cell_du_refs of this RimRSSetSingleAllOfAttributes.


        :param n_r_cell_du_refs: The n_r_cell_du_refs of this RimRSSetSingleAllOfAttributes.
        :type n_r_cell_du_refs: List[str]
        """

        self._n_r_cell_du_refs = n_r_cell_du_refs
