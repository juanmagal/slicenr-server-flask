# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ManagementNodeSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_label=None, managed_elements=None, vendor_name=None, user_defined_state=None, location_name=None, sw_version=None):  # noqa: E501
        """ManagementNodeSingleAllOfAttributes - a model defined in OpenAPI

        :param user_label: The user_label of this ManagementNodeSingleAllOfAttributes.  # noqa: E501
        :type user_label: str
        :param managed_elements: The managed_elements of this ManagementNodeSingleAllOfAttributes.  # noqa: E501
        :type managed_elements: List[str]
        :param vendor_name: The vendor_name of this ManagementNodeSingleAllOfAttributes.  # noqa: E501
        :type vendor_name: str
        :param user_defined_state: The user_defined_state of this ManagementNodeSingleAllOfAttributes.  # noqa: E501
        :type user_defined_state: str
        :param location_name: The location_name of this ManagementNodeSingleAllOfAttributes.  # noqa: E501
        :type location_name: str
        :param sw_version: The sw_version of this ManagementNodeSingleAllOfAttributes.  # noqa: E501
        :type sw_version: str
        """
        self.openapi_types = {
            'user_label': str,
            'managed_elements': List[str],
            'vendor_name': str,
            'user_defined_state': str,
            'location_name': str,
            'sw_version': str
        }

        self.attribute_map = {
            'user_label': 'userLabel',
            'managed_elements': 'managedElements',
            'vendor_name': 'vendorName',
            'user_defined_state': 'userDefinedState',
            'location_name': 'locationName',
            'sw_version': 'swVersion'
        }

        self._user_label = user_label
        self._managed_elements = managed_elements
        self._vendor_name = vendor_name
        self._user_defined_state = user_defined_state
        self._location_name = location_name
        self._sw_version = sw_version

    @classmethod
    def from_dict(cls, dikt) -> 'ManagementNodeSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManagementNode_Single_allOf_attributes of this ManagementNodeSingleAllOfAttributes.  # noqa: E501
        :rtype: ManagementNodeSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_label(self):
        """Gets the user_label of this ManagementNodeSingleAllOfAttributes.


        :return: The user_label of this ManagementNodeSingleAllOfAttributes.
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """Sets the user_label of this ManagementNodeSingleAllOfAttributes.


        :param user_label: The user_label of this ManagementNodeSingleAllOfAttributes.
        :type user_label: str
        """

        self._user_label = user_label

    @property
    def managed_elements(self):
        """Gets the managed_elements of this ManagementNodeSingleAllOfAttributes.


        :return: The managed_elements of this ManagementNodeSingleAllOfAttributes.
        :rtype: List[str]
        """
        return self._managed_elements

    @managed_elements.setter
    def managed_elements(self, managed_elements):
        """Sets the managed_elements of this ManagementNodeSingleAllOfAttributes.


        :param managed_elements: The managed_elements of this ManagementNodeSingleAllOfAttributes.
        :type managed_elements: List[str]
        """

        self._managed_elements = managed_elements

    @property
    def vendor_name(self):
        """Gets the vendor_name of this ManagementNodeSingleAllOfAttributes.


        :return: The vendor_name of this ManagementNodeSingleAllOfAttributes.
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this ManagementNodeSingleAllOfAttributes.


        :param vendor_name: The vendor_name of this ManagementNodeSingleAllOfAttributes.
        :type vendor_name: str
        """

        self._vendor_name = vendor_name

    @property
    def user_defined_state(self):
        """Gets the user_defined_state of this ManagementNodeSingleAllOfAttributes.


        :return: The user_defined_state of this ManagementNodeSingleAllOfAttributes.
        :rtype: str
        """
        return self._user_defined_state

    @user_defined_state.setter
    def user_defined_state(self, user_defined_state):
        """Sets the user_defined_state of this ManagementNodeSingleAllOfAttributes.


        :param user_defined_state: The user_defined_state of this ManagementNodeSingleAllOfAttributes.
        :type user_defined_state: str
        """

        self._user_defined_state = user_defined_state

    @property
    def location_name(self):
        """Gets the location_name of this ManagementNodeSingleAllOfAttributes.


        :return: The location_name of this ManagementNodeSingleAllOfAttributes.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this ManagementNodeSingleAllOfAttributes.


        :param location_name: The location_name of this ManagementNodeSingleAllOfAttributes.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def sw_version(self):
        """Gets the sw_version of this ManagementNodeSingleAllOfAttributes.


        :return: The sw_version of this ManagementNodeSingleAllOfAttributes.
        :rtype: str
        """
        return self._sw_version

    @sw_version.setter
    def sw_version(self, sw_version):
        """Sets the sw_version of this ManagementNodeSingleAllOfAttributes.


        :param sw_version: The sw_version of this ManagementNodeSingleAllOfAttributes.
        :type sw_version: str
        """

        self._sw_version = sw_version
