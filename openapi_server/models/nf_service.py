# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ip_end_point import IpEndPoint
from openapi_server.models.nf_type import NFType
from openapi_server.models.plmn_id import PlmnId
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.ip_end_point import IpEndPoint  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.plmn_id import PlmnId  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class NFService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_instance_id=None, service_name=None, version=None, schema=None, fqdn=None, inter_plmn_fqdn=None, ip_end_points=None, api_prfix=None, allowed_plmns=None, allowed_nf_types=None, allowed_nssais=None):  # noqa: E501
        """NFService - a model defined in OpenAPI

        :param service_instance_id: The service_instance_id of this NFService.  # noqa: E501
        :type service_instance_id: str
        :param service_name: The service_name of this NFService.  # noqa: E501
        :type service_name: str
        :param version: The version of this NFService.  # noqa: E501
        :type version: str
        :param schema: The schema of this NFService.  # noqa: E501
        :type schema: str
        :param fqdn: The fqdn of this NFService.  # noqa: E501
        :type fqdn: str
        :param inter_plmn_fqdn: The inter_plmn_fqdn of this NFService.  # noqa: E501
        :type inter_plmn_fqdn: str
        :param ip_end_points: The ip_end_points of this NFService.  # noqa: E501
        :type ip_end_points: List[IpEndPoint]
        :param api_prfix: The api_prfix of this NFService.  # noqa: E501
        :type api_prfix: str
        :param allowed_plmns: The allowed_plmns of this NFService.  # noqa: E501
        :type allowed_plmns: PlmnId
        :param allowed_nf_types: The allowed_nf_types of this NFService.  # noqa: E501
        :type allowed_nf_types: List[NFType]
        :param allowed_nssais: The allowed_nssais of this NFService.  # noqa: E501
        :type allowed_nssais: List[Snssai]
        """
        self.openapi_types = {
            'service_instance_id': str,
            'service_name': str,
            'version': str,
            'schema': str,
            'fqdn': str,
            'inter_plmn_fqdn': str,
            'ip_end_points': List[IpEndPoint],
            'api_prfix': str,
            'allowed_plmns': PlmnId,
            'allowed_nf_types': List[NFType],
            'allowed_nssais': List[Snssai]
        }

        self.attribute_map = {
            'service_instance_id': 'serviceInstanceId',
            'service_name': 'serviceName',
            'version': 'version',
            'schema': 'schema',
            'fqdn': 'fqdn',
            'inter_plmn_fqdn': 'interPlmnFqdn',
            'ip_end_points': 'ipEndPoints',
            'api_prfix': 'apiPrfix',
            'allowed_plmns': 'allowedPlmns',
            'allowed_nf_types': 'allowedNfTypes',
            'allowed_nssais': 'allowedNssais'
        }

        self._service_instance_id = service_instance_id
        self._service_name = service_name
        self._version = version
        self._schema = schema
        self._fqdn = fqdn
        self._inter_plmn_fqdn = inter_plmn_fqdn
        self._ip_end_points = ip_end_points
        self._api_prfix = api_prfix
        self._allowed_plmns = allowed_plmns
        self._allowed_nf_types = allowed_nf_types
        self._allowed_nssais = allowed_nssais

    @classmethod
    def from_dict(cls, dikt) -> 'NFService':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NFService of this NFService.  # noqa: E501
        :rtype: NFService
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this NFService.


        :return: The service_instance_id of this NFService.
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this NFService.


        :param service_instance_id: The service_instance_id of this NFService.
        :type service_instance_id: str
        """

        self._service_instance_id = service_instance_id

    @property
    def service_name(self):
        """Gets the service_name of this NFService.


        :return: The service_name of this NFService.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this NFService.


        :param service_name: The service_name of this NFService.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def version(self):
        """Gets the version of this NFService.


        :return: The version of this NFService.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NFService.


        :param version: The version of this NFService.
        :type version: str
        """

        self._version = version

    @property
    def schema(self):
        """Gets the schema of this NFService.


        :return: The schema of this NFService.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this NFService.


        :param schema: The schema of this NFService.
        :type schema: str
        """

        self._schema = schema

    @property
    def fqdn(self):
        """Gets the fqdn of this NFService.


        :return: The fqdn of this NFService.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this NFService.


        :param fqdn: The fqdn of this NFService.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def inter_plmn_fqdn(self):
        """Gets the inter_plmn_fqdn of this NFService.


        :return: The inter_plmn_fqdn of this NFService.
        :rtype: str
        """
        return self._inter_plmn_fqdn

    @inter_plmn_fqdn.setter
    def inter_plmn_fqdn(self, inter_plmn_fqdn):
        """Sets the inter_plmn_fqdn of this NFService.


        :param inter_plmn_fqdn: The inter_plmn_fqdn of this NFService.
        :type inter_plmn_fqdn: str
        """

        self._inter_plmn_fqdn = inter_plmn_fqdn

    @property
    def ip_end_points(self):
        """Gets the ip_end_points of this NFService.


        :return: The ip_end_points of this NFService.
        :rtype: List[IpEndPoint]
        """
        return self._ip_end_points

    @ip_end_points.setter
    def ip_end_points(self, ip_end_points):
        """Sets the ip_end_points of this NFService.


        :param ip_end_points: The ip_end_points of this NFService.
        :type ip_end_points: List[IpEndPoint]
        """

        self._ip_end_points = ip_end_points

    @property
    def api_prfix(self):
        """Gets the api_prfix of this NFService.


        :return: The api_prfix of this NFService.
        :rtype: str
        """
        return self._api_prfix

    @api_prfix.setter
    def api_prfix(self, api_prfix):
        """Sets the api_prfix of this NFService.


        :param api_prfix: The api_prfix of this NFService.
        :type api_prfix: str
        """

        self._api_prfix = api_prfix

    @property
    def allowed_plmns(self):
        """Gets the allowed_plmns of this NFService.


        :return: The allowed_plmns of this NFService.
        :rtype: PlmnId
        """
        return self._allowed_plmns

    @allowed_plmns.setter
    def allowed_plmns(self, allowed_plmns):
        """Sets the allowed_plmns of this NFService.


        :param allowed_plmns: The allowed_plmns of this NFService.
        :type allowed_plmns: PlmnId
        """

        self._allowed_plmns = allowed_plmns

    @property
    def allowed_nf_types(self):
        """Gets the allowed_nf_types of this NFService.


        :return: The allowed_nf_types of this NFService.
        :rtype: List[NFType]
        """
        return self._allowed_nf_types

    @allowed_nf_types.setter
    def allowed_nf_types(self, allowed_nf_types):
        """Sets the allowed_nf_types of this NFService.


        :param allowed_nf_types: The allowed_nf_types of this NFService.
        :type allowed_nf_types: List[NFType]
        """

        self._allowed_nf_types = allowed_nf_types

    @property
    def allowed_nssais(self):
        """Gets the allowed_nssais of this NFService.


        :return: The allowed_nssais of this NFService.
        :rtype: List[Snssai]
        """
        return self._allowed_nssais

    @allowed_nssais.setter
    def allowed_nssais(self, allowed_nssais):
        """Sets the allowed_nssais of this NFService.


        :param allowed_nssais: The allowed_nssais of this NFService.
        :type allowed_nssais: List[Snssai]
        """

        self._allowed_nssais = allowed_nssais
