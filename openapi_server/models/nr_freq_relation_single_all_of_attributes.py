# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.q_offset_range_list import QOffsetRangeList
from openapi_server.models.t_reselection_nrsf import TReselectionNRSf
from openapi_server import util

from openapi_server.models.q_offset_range_list import QOffsetRangeList  # noqa: E501
from openapi_server.models.t_reselection_nrsf import TReselectionNRSf  # noqa: E501

class NRFreqRelationSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset_mo=None, block_list_entry=None, block_list_entry_idle_mode=None, cell_reselection_priority=None, cell_reselection_sub_priority=None, p_max=None, q_offset_freq=None, q_qual_min=None, q_rx_lev_min=None, thresh_x_high_p=None, thresh_x_high_q=None, thresh_x_low_p=None, thresh_x_low_q=None, t_reselection_nr=None, t_reselection_nrsf_high=None, t_reselection_nrsf_medium=None, n_r_frequency_ref=None):  # noqa: E501
        """NRFreqRelationSingleAllOfAttributes - a model defined in OpenAPI

        :param offset_mo: The offset_mo of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type offset_mo: QOffsetRangeList
        :param block_list_entry: The block_list_entry of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type block_list_entry: List[int]
        :param block_list_entry_idle_mode: The block_list_entry_idle_mode of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type block_list_entry_idle_mode: int
        :param cell_reselection_priority: The cell_reselection_priority of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type cell_reselection_priority: int
        :param cell_reselection_sub_priority: The cell_reselection_sub_priority of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type cell_reselection_sub_priority: float
        :param p_max: The p_max of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type p_max: int
        :param q_offset_freq: The q_offset_freq of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type q_offset_freq: float
        :param q_qual_min: The q_qual_min of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type q_qual_min: float
        :param q_rx_lev_min: The q_rx_lev_min of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type q_rx_lev_min: int
        :param thresh_x_high_p: The thresh_x_high_p of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type thresh_x_high_p: int
        :param thresh_x_high_q: The thresh_x_high_q of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type thresh_x_high_q: int
        :param thresh_x_low_p: The thresh_x_low_p of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type thresh_x_low_p: int
        :param thresh_x_low_q: The thresh_x_low_q of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type thresh_x_low_q: int
        :param t_reselection_nr: The t_reselection_nr of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type t_reselection_nr: int
        :param t_reselection_nrsf_high: The t_reselection_nrsf_high of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type t_reselection_nrsf_high: TReselectionNRSf
        :param t_reselection_nrsf_medium: The t_reselection_nrsf_medium of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type t_reselection_nrsf_medium: TReselectionNRSf
        :param n_r_frequency_ref: The n_r_frequency_ref of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :type n_r_frequency_ref: str
        """
        self.openapi_types = {
            'offset_mo': QOffsetRangeList,
            'block_list_entry': List[int],
            'block_list_entry_idle_mode': int,
            'cell_reselection_priority': int,
            'cell_reselection_sub_priority': float,
            'p_max': int,
            'q_offset_freq': float,
            'q_qual_min': float,
            'q_rx_lev_min': int,
            'thresh_x_high_p': int,
            'thresh_x_high_q': int,
            'thresh_x_low_p': int,
            'thresh_x_low_q': int,
            't_reselection_nr': int,
            't_reselection_nrsf_high': TReselectionNRSf,
            't_reselection_nrsf_medium': TReselectionNRSf,
            'n_r_frequency_ref': str
        }

        self.attribute_map = {
            'offset_mo': 'offsetMO',
            'block_list_entry': 'blockListEntry',
            'block_list_entry_idle_mode': 'blockListEntryIdleMode',
            'cell_reselection_priority': 'cellReselectionPriority',
            'cell_reselection_sub_priority': 'cellReselectionSubPriority',
            'p_max': 'pMax',
            'q_offset_freq': 'qOffsetFreq',
            'q_qual_min': 'qQualMin',
            'q_rx_lev_min': 'qRxLevMin',
            'thresh_x_high_p': 'threshXHighP',
            'thresh_x_high_q': 'threshXHighQ',
            'thresh_x_low_p': 'threshXLowP',
            'thresh_x_low_q': 'threshXLowQ',
            't_reselection_nr': 'tReselectionNr',
            't_reselection_nrsf_high': 'tReselectionNRSfHigh',
            't_reselection_nrsf_medium': 'tReselectionNRSfMedium',
            'n_r_frequency_ref': 'nRFrequencyRef'
        }

        self._offset_mo = offset_mo
        self._block_list_entry = block_list_entry
        self._block_list_entry_idle_mode = block_list_entry_idle_mode
        self._cell_reselection_priority = cell_reselection_priority
        self._cell_reselection_sub_priority = cell_reselection_sub_priority
        self._p_max = p_max
        self._q_offset_freq = q_offset_freq
        self._q_qual_min = q_qual_min
        self._q_rx_lev_min = q_rx_lev_min
        self._thresh_x_high_p = thresh_x_high_p
        self._thresh_x_high_q = thresh_x_high_q
        self._thresh_x_low_p = thresh_x_low_p
        self._thresh_x_low_q = thresh_x_low_q
        self._t_reselection_nr = t_reselection_nr
        self._t_reselection_nrsf_high = t_reselection_nrsf_high
        self._t_reselection_nrsf_medium = t_reselection_nrsf_medium
        self._n_r_frequency_ref = n_r_frequency_ref

    @classmethod
    def from_dict(cls, dikt) -> 'NRFreqRelationSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NRFreqRelation_Single_allOf_attributes of this NRFreqRelationSingleAllOfAttributes.  # noqa: E501
        :rtype: NRFreqRelationSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset_mo(self):
        """Gets the offset_mo of this NRFreqRelationSingleAllOfAttributes.


        :return: The offset_mo of this NRFreqRelationSingleAllOfAttributes.
        :rtype: QOffsetRangeList
        """
        return self._offset_mo

    @offset_mo.setter
    def offset_mo(self, offset_mo):
        """Sets the offset_mo of this NRFreqRelationSingleAllOfAttributes.


        :param offset_mo: The offset_mo of this NRFreqRelationSingleAllOfAttributes.
        :type offset_mo: QOffsetRangeList
        """

        self._offset_mo = offset_mo

    @property
    def block_list_entry(self):
        """Gets the block_list_entry of this NRFreqRelationSingleAllOfAttributes.


        :return: The block_list_entry of this NRFreqRelationSingleAllOfAttributes.
        :rtype: List[int]
        """
        return self._block_list_entry

    @block_list_entry.setter
    def block_list_entry(self, block_list_entry):
        """Sets the block_list_entry of this NRFreqRelationSingleAllOfAttributes.


        :param block_list_entry: The block_list_entry of this NRFreqRelationSingleAllOfAttributes.
        :type block_list_entry: List[int]
        """

        self._block_list_entry = block_list_entry

    @property
    def block_list_entry_idle_mode(self):
        """Gets the block_list_entry_idle_mode of this NRFreqRelationSingleAllOfAttributes.


        :return: The block_list_entry_idle_mode of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._block_list_entry_idle_mode

    @block_list_entry_idle_mode.setter
    def block_list_entry_idle_mode(self, block_list_entry_idle_mode):
        """Sets the block_list_entry_idle_mode of this NRFreqRelationSingleAllOfAttributes.


        :param block_list_entry_idle_mode: The block_list_entry_idle_mode of this NRFreqRelationSingleAllOfAttributes.
        :type block_list_entry_idle_mode: int
        """

        self._block_list_entry_idle_mode = block_list_entry_idle_mode

    @property
    def cell_reselection_priority(self):
        """Gets the cell_reselection_priority of this NRFreqRelationSingleAllOfAttributes.


        :return: The cell_reselection_priority of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._cell_reselection_priority

    @cell_reselection_priority.setter
    def cell_reselection_priority(self, cell_reselection_priority):
        """Sets the cell_reselection_priority of this NRFreqRelationSingleAllOfAttributes.


        :param cell_reselection_priority: The cell_reselection_priority of this NRFreqRelationSingleAllOfAttributes.
        :type cell_reselection_priority: int
        """

        self._cell_reselection_priority = cell_reselection_priority

    @property
    def cell_reselection_sub_priority(self):
        """Gets the cell_reselection_sub_priority of this NRFreqRelationSingleAllOfAttributes.


        :return: The cell_reselection_sub_priority of this NRFreqRelationSingleAllOfAttributes.
        :rtype: float
        """
        return self._cell_reselection_sub_priority

    @cell_reselection_sub_priority.setter
    def cell_reselection_sub_priority(self, cell_reselection_sub_priority):
        """Sets the cell_reselection_sub_priority of this NRFreqRelationSingleAllOfAttributes.


        :param cell_reselection_sub_priority: The cell_reselection_sub_priority of this NRFreqRelationSingleAllOfAttributes.
        :type cell_reselection_sub_priority: float
        """
        if cell_reselection_sub_priority is not None and cell_reselection_sub_priority > 0.8:  # noqa: E501
            raise ValueError("Invalid value for `cell_reselection_sub_priority`, must be a value less than or equal to `0.8`")  # noqa: E501
        if cell_reselection_sub_priority is not None and cell_reselection_sub_priority < 0.2:  # noqa: E501
            raise ValueError("Invalid value for `cell_reselection_sub_priority`, must be a value greater than or equal to `0.2`")  # noqa: E501

        self._cell_reselection_sub_priority = cell_reselection_sub_priority

    @property
    def p_max(self):
        """Gets the p_max of this NRFreqRelationSingleAllOfAttributes.


        :return: The p_max of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._p_max

    @p_max.setter
    def p_max(self, p_max):
        """Sets the p_max of this NRFreqRelationSingleAllOfAttributes.


        :param p_max: The p_max of this NRFreqRelationSingleAllOfAttributes.
        :type p_max: int
        """
        if p_max is not None and p_max > 33:  # noqa: E501
            raise ValueError("Invalid value for `p_max`, must be a value less than or equal to `33`")  # noqa: E501
        if p_max is not None and p_max < -30:  # noqa: E501
            raise ValueError("Invalid value for `p_max`, must be a value greater than or equal to `-30`")  # noqa: E501

        self._p_max = p_max

    @property
    def q_offset_freq(self):
        """Gets the q_offset_freq of this NRFreqRelationSingleAllOfAttributes.


        :return: The q_offset_freq of this NRFreqRelationSingleAllOfAttributes.
        :rtype: float
        """
        return self._q_offset_freq

    @q_offset_freq.setter
    def q_offset_freq(self, q_offset_freq):
        """Sets the q_offset_freq of this NRFreqRelationSingleAllOfAttributes.


        :param q_offset_freq: The q_offset_freq of this NRFreqRelationSingleAllOfAttributes.
        :type q_offset_freq: float
        """

        self._q_offset_freq = q_offset_freq

    @property
    def q_qual_min(self):
        """Gets the q_qual_min of this NRFreqRelationSingleAllOfAttributes.


        :return: The q_qual_min of this NRFreqRelationSingleAllOfAttributes.
        :rtype: float
        """
        return self._q_qual_min

    @q_qual_min.setter
    def q_qual_min(self, q_qual_min):
        """Sets the q_qual_min of this NRFreqRelationSingleAllOfAttributes.


        :param q_qual_min: The q_qual_min of this NRFreqRelationSingleAllOfAttributes.
        :type q_qual_min: float
        """

        self._q_qual_min = q_qual_min

    @property
    def q_rx_lev_min(self):
        """Gets the q_rx_lev_min of this NRFreqRelationSingleAllOfAttributes.


        :return: The q_rx_lev_min of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._q_rx_lev_min

    @q_rx_lev_min.setter
    def q_rx_lev_min(self, q_rx_lev_min):
        """Sets the q_rx_lev_min of this NRFreqRelationSingleAllOfAttributes.


        :param q_rx_lev_min: The q_rx_lev_min of this NRFreqRelationSingleAllOfAttributes.
        :type q_rx_lev_min: int
        """
        if q_rx_lev_min is not None and q_rx_lev_min > -44:  # noqa: E501
            raise ValueError("Invalid value for `q_rx_lev_min`, must be a value less than or equal to `-44`")  # noqa: E501
        if q_rx_lev_min is not None and q_rx_lev_min < -140:  # noqa: E501
            raise ValueError("Invalid value for `q_rx_lev_min`, must be a value greater than or equal to `-140`")  # noqa: E501

        self._q_rx_lev_min = q_rx_lev_min

    @property
    def thresh_x_high_p(self):
        """Gets the thresh_x_high_p of this NRFreqRelationSingleAllOfAttributes.


        :return: The thresh_x_high_p of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._thresh_x_high_p

    @thresh_x_high_p.setter
    def thresh_x_high_p(self, thresh_x_high_p):
        """Sets the thresh_x_high_p of this NRFreqRelationSingleAllOfAttributes.


        :param thresh_x_high_p: The thresh_x_high_p of this NRFreqRelationSingleAllOfAttributes.
        :type thresh_x_high_p: int
        """
        if thresh_x_high_p is not None and thresh_x_high_p > 62:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_high_p`, must be a value less than or equal to `62`")  # noqa: E501
        if thresh_x_high_p is not None and thresh_x_high_p < 0:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_high_p`, must be a value greater than or equal to `0`")  # noqa: E501

        self._thresh_x_high_p = thresh_x_high_p

    @property
    def thresh_x_high_q(self):
        """Gets the thresh_x_high_q of this NRFreqRelationSingleAllOfAttributes.


        :return: The thresh_x_high_q of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._thresh_x_high_q

    @thresh_x_high_q.setter
    def thresh_x_high_q(self, thresh_x_high_q):
        """Sets the thresh_x_high_q of this NRFreqRelationSingleAllOfAttributes.


        :param thresh_x_high_q: The thresh_x_high_q of this NRFreqRelationSingleAllOfAttributes.
        :type thresh_x_high_q: int
        """
        if thresh_x_high_q is not None and thresh_x_high_q > 31:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_high_q`, must be a value less than or equal to `31`")  # noqa: E501
        if thresh_x_high_q is not None and thresh_x_high_q < 0:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_high_q`, must be a value greater than or equal to `0`")  # noqa: E501

        self._thresh_x_high_q = thresh_x_high_q

    @property
    def thresh_x_low_p(self):
        """Gets the thresh_x_low_p of this NRFreqRelationSingleAllOfAttributes.


        :return: The thresh_x_low_p of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._thresh_x_low_p

    @thresh_x_low_p.setter
    def thresh_x_low_p(self, thresh_x_low_p):
        """Sets the thresh_x_low_p of this NRFreqRelationSingleAllOfAttributes.


        :param thresh_x_low_p: The thresh_x_low_p of this NRFreqRelationSingleAllOfAttributes.
        :type thresh_x_low_p: int
        """
        if thresh_x_low_p is not None and thresh_x_low_p > 62:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_low_p`, must be a value less than or equal to `62`")  # noqa: E501
        if thresh_x_low_p is not None and thresh_x_low_p < 0:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_low_p`, must be a value greater than or equal to `0`")  # noqa: E501

        self._thresh_x_low_p = thresh_x_low_p

    @property
    def thresh_x_low_q(self):
        """Gets the thresh_x_low_q of this NRFreqRelationSingleAllOfAttributes.


        :return: The thresh_x_low_q of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._thresh_x_low_q

    @thresh_x_low_q.setter
    def thresh_x_low_q(self, thresh_x_low_q):
        """Sets the thresh_x_low_q of this NRFreqRelationSingleAllOfAttributes.


        :param thresh_x_low_q: The thresh_x_low_q of this NRFreqRelationSingleAllOfAttributes.
        :type thresh_x_low_q: int
        """
        if thresh_x_low_q is not None and thresh_x_low_q > 31:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_low_q`, must be a value less than or equal to `31`")  # noqa: E501
        if thresh_x_low_q is not None and thresh_x_low_q < 0:  # noqa: E501
            raise ValueError("Invalid value for `thresh_x_low_q`, must be a value greater than or equal to `0`")  # noqa: E501

        self._thresh_x_low_q = thresh_x_low_q

    @property
    def t_reselection_nr(self):
        """Gets the t_reselection_nr of this NRFreqRelationSingleAllOfAttributes.


        :return: The t_reselection_nr of this NRFreqRelationSingleAllOfAttributes.
        :rtype: int
        """
        return self._t_reselection_nr

    @t_reselection_nr.setter
    def t_reselection_nr(self, t_reselection_nr):
        """Sets the t_reselection_nr of this NRFreqRelationSingleAllOfAttributes.


        :param t_reselection_nr: The t_reselection_nr of this NRFreqRelationSingleAllOfAttributes.
        :type t_reselection_nr: int
        """
        if t_reselection_nr is not None and t_reselection_nr > 7:  # noqa: E501
            raise ValueError("Invalid value for `t_reselection_nr`, must be a value less than or equal to `7`")  # noqa: E501
        if t_reselection_nr is not None and t_reselection_nr < 0:  # noqa: E501
            raise ValueError("Invalid value for `t_reselection_nr`, must be a value greater than or equal to `0`")  # noqa: E501

        self._t_reselection_nr = t_reselection_nr

    @property
    def t_reselection_nrsf_high(self):
        """Gets the t_reselection_nrsf_high of this NRFreqRelationSingleAllOfAttributes.


        :return: The t_reselection_nrsf_high of this NRFreqRelationSingleAllOfAttributes.
        :rtype: TReselectionNRSf
        """
        return self._t_reselection_nrsf_high

    @t_reselection_nrsf_high.setter
    def t_reselection_nrsf_high(self, t_reselection_nrsf_high):
        """Sets the t_reselection_nrsf_high of this NRFreqRelationSingleAllOfAttributes.


        :param t_reselection_nrsf_high: The t_reselection_nrsf_high of this NRFreqRelationSingleAllOfAttributes.
        :type t_reselection_nrsf_high: TReselectionNRSf
        """

        self._t_reselection_nrsf_high = t_reselection_nrsf_high

    @property
    def t_reselection_nrsf_medium(self):
        """Gets the t_reselection_nrsf_medium of this NRFreqRelationSingleAllOfAttributes.


        :return: The t_reselection_nrsf_medium of this NRFreqRelationSingleAllOfAttributes.
        :rtype: TReselectionNRSf
        """
        return self._t_reselection_nrsf_medium

    @t_reselection_nrsf_medium.setter
    def t_reselection_nrsf_medium(self, t_reselection_nrsf_medium):
        """Sets the t_reselection_nrsf_medium of this NRFreqRelationSingleAllOfAttributes.


        :param t_reselection_nrsf_medium: The t_reselection_nrsf_medium of this NRFreqRelationSingleAllOfAttributes.
        :type t_reselection_nrsf_medium: TReselectionNRSf
        """

        self._t_reselection_nrsf_medium = t_reselection_nrsf_medium

    @property
    def n_r_frequency_ref(self):
        """Gets the n_r_frequency_ref of this NRFreqRelationSingleAllOfAttributes.


        :return: The n_r_frequency_ref of this NRFreqRelationSingleAllOfAttributes.
        :rtype: str
        """
        return self._n_r_frequency_ref

    @n_r_frequency_ref.setter
    def n_r_frequency_ref(self, n_r_frequency_ref):
        """Sets the n_r_frequency_ref of this NRFreqRelationSingleAllOfAttributes.


        :param n_r_frequency_ref: The n_r_frequency_ref of this NRFreqRelationSingleAllOfAttributes.
        :type n_r_frequency_ref: str
        """

        self._n_r_frequency_ref = n_r_frequency_ref
