# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.threshold_info_hysteresis import ThresholdInfoHysteresis
from openapi_server.models.threshold_info_threshold_value import ThresholdInfoThresholdValue
from openapi_server import util

from openapi_server.models.threshold_info_hysteresis import ThresholdInfoHysteresis  # noqa: E501
from openapi_server.models.threshold_info_threshold_value import ThresholdInfoThresholdValue  # noqa: E501

class ThresholdInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, threshold_direction=None, threshold_value=None, hysteresis=None):  # noqa: E501
        """ThresholdInfo - a model defined in OpenAPI

        :param threshold_direction: The threshold_direction of this ThresholdInfo.  # noqa: E501
        :type threshold_direction: str
        :param threshold_value: The threshold_value of this ThresholdInfo.  # noqa: E501
        :type threshold_value: ThresholdInfoThresholdValue
        :param hysteresis: The hysteresis of this ThresholdInfo.  # noqa: E501
        :type hysteresis: ThresholdInfoHysteresis
        """
        self.openapi_types = {
            'threshold_direction': str,
            'threshold_value': ThresholdInfoThresholdValue,
            'hysteresis': ThresholdInfoHysteresis
        }

        self.attribute_map = {
            'threshold_direction': 'thresholdDirection',
            'threshold_value': 'thresholdValue',
            'hysteresis': 'hysteresis'
        }

        self._threshold_direction = threshold_direction
        self._threshold_value = threshold_value
        self._hysteresis = hysteresis

    @classmethod
    def from_dict(cls, dikt) -> 'ThresholdInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ThresholdInfo of this ThresholdInfo.  # noqa: E501
        :rtype: ThresholdInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def threshold_direction(self):
        """Gets the threshold_direction of this ThresholdInfo.


        :return: The threshold_direction of this ThresholdInfo.
        :rtype: str
        """
        return self._threshold_direction

    @threshold_direction.setter
    def threshold_direction(self, threshold_direction):
        """Sets the threshold_direction of this ThresholdInfo.


        :param threshold_direction: The threshold_direction of this ThresholdInfo.
        :type threshold_direction: str
        """
        allowed_values = ["UP", "DOWN", "UP_AND_DOWN"]  # noqa: E501
        if threshold_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `threshold_direction` ({0}), must be one of {1}"
                .format(threshold_direction, allowed_values)
            )

        self._threshold_direction = threshold_direction

    @property
    def threshold_value(self):
        """Gets the threshold_value of this ThresholdInfo.


        :return: The threshold_value of this ThresholdInfo.
        :rtype: ThresholdInfoThresholdValue
        """
        return self._threshold_value

    @threshold_value.setter
    def threshold_value(self, threshold_value):
        """Sets the threshold_value of this ThresholdInfo.


        :param threshold_value: The threshold_value of this ThresholdInfo.
        :type threshold_value: ThresholdInfoThresholdValue
        """

        self._threshold_value = threshold_value

    @property
    def hysteresis(self):
        """Gets the hysteresis of this ThresholdInfo.


        :return: The hysteresis of this ThresholdInfo.
        :rtype: ThresholdInfoHysteresis
        """
        return self._hysteresis

    @hysteresis.setter
    def hysteresis(self, hysteresis):
        """Sets the hysteresis of this ThresholdInfo.


        :param hysteresis: The hysteresis of this ThresholdInfo.
        :type hysteresis: ThresholdInfoHysteresis
        """

        self._hysteresis = hysteresis
