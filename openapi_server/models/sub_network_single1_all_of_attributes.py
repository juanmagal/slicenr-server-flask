# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.supported_perf_metric_group import SupportedPerfMetricGroup
from openapi_server import util

from openapi_server.models.supported_perf_metric_group import SupportedPerfMetricGroup  # noqa: E501

class SubNetworkSingle1AllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dn_prefix=None, user_label=None, user_defined_network_type=None, set_of_mcc=None, priority_label=None, supported_perf_metric_groups=None, supported_trace_metrics=None):  # noqa: E501
        """SubNetworkSingle1AllOfAttributes - a model defined in OpenAPI

        :param dn_prefix: The dn_prefix of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :type dn_prefix: str
        :param user_label: The user_label of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :type user_label: str
        :param user_defined_network_type: The user_defined_network_type of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :type user_defined_network_type: str
        :param set_of_mcc: The set_of_mcc of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :type set_of_mcc: List[str]
        :param priority_label: The priority_label of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :type priority_label: int
        :param supported_perf_metric_groups: The supported_perf_metric_groups of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :type supported_perf_metric_groups: List[SupportedPerfMetricGroup]
        :param supported_trace_metrics: The supported_trace_metrics of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :type supported_trace_metrics: List[str]
        """
        self.openapi_types = {
            'dn_prefix': str,
            'user_label': str,
            'user_defined_network_type': str,
            'set_of_mcc': List[str],
            'priority_label': int,
            'supported_perf_metric_groups': List[SupportedPerfMetricGroup],
            'supported_trace_metrics': List[str]
        }

        self.attribute_map = {
            'dn_prefix': 'dnPrefix',
            'user_label': 'userLabel',
            'user_defined_network_type': 'userDefinedNetworkType',
            'set_of_mcc': 'setOfMcc',
            'priority_label': 'priorityLabel',
            'supported_perf_metric_groups': 'supportedPerfMetricGroups',
            'supported_trace_metrics': 'supportedTraceMetrics'
        }

        self._dn_prefix = dn_prefix
        self._user_label = user_label
        self._user_defined_network_type = user_defined_network_type
        self._set_of_mcc = set_of_mcc
        self._priority_label = priority_label
        self._supported_perf_metric_groups = supported_perf_metric_groups
        self._supported_trace_metrics = supported_trace_metrics

    @classmethod
    def from_dict(cls, dikt) -> 'SubNetworkSingle1AllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubNetwork_Single_1_allOf_attributes of this SubNetworkSingle1AllOfAttributes.  # noqa: E501
        :rtype: SubNetworkSingle1AllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dn_prefix(self):
        """Gets the dn_prefix of this SubNetworkSingle1AllOfAttributes.


        :return: The dn_prefix of this SubNetworkSingle1AllOfAttributes.
        :rtype: str
        """
        return self._dn_prefix

    @dn_prefix.setter
    def dn_prefix(self, dn_prefix):
        """Sets the dn_prefix of this SubNetworkSingle1AllOfAttributes.


        :param dn_prefix: The dn_prefix of this SubNetworkSingle1AllOfAttributes.
        :type dn_prefix: str
        """

        self._dn_prefix = dn_prefix

    @property
    def user_label(self):
        """Gets the user_label of this SubNetworkSingle1AllOfAttributes.


        :return: The user_label of this SubNetworkSingle1AllOfAttributes.
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """Sets the user_label of this SubNetworkSingle1AllOfAttributes.


        :param user_label: The user_label of this SubNetworkSingle1AllOfAttributes.
        :type user_label: str
        """

        self._user_label = user_label

    @property
    def user_defined_network_type(self):
        """Gets the user_defined_network_type of this SubNetworkSingle1AllOfAttributes.


        :return: The user_defined_network_type of this SubNetworkSingle1AllOfAttributes.
        :rtype: str
        """
        return self._user_defined_network_type

    @user_defined_network_type.setter
    def user_defined_network_type(self, user_defined_network_type):
        """Sets the user_defined_network_type of this SubNetworkSingle1AllOfAttributes.


        :param user_defined_network_type: The user_defined_network_type of this SubNetworkSingle1AllOfAttributes.
        :type user_defined_network_type: str
        """

        self._user_defined_network_type = user_defined_network_type

    @property
    def set_of_mcc(self):
        """Gets the set_of_mcc of this SubNetworkSingle1AllOfAttributes.


        :return: The set_of_mcc of this SubNetworkSingle1AllOfAttributes.
        :rtype: List[str]
        """
        return self._set_of_mcc

    @set_of_mcc.setter
    def set_of_mcc(self, set_of_mcc):
        """Sets the set_of_mcc of this SubNetworkSingle1AllOfAttributes.


        :param set_of_mcc: The set_of_mcc of this SubNetworkSingle1AllOfAttributes.
        :type set_of_mcc: List[str]
        """

        self._set_of_mcc = set_of_mcc

    @property
    def priority_label(self):
        """Gets the priority_label of this SubNetworkSingle1AllOfAttributes.


        :return: The priority_label of this SubNetworkSingle1AllOfAttributes.
        :rtype: int
        """
        return self._priority_label

    @priority_label.setter
    def priority_label(self, priority_label):
        """Sets the priority_label of this SubNetworkSingle1AllOfAttributes.


        :param priority_label: The priority_label of this SubNetworkSingle1AllOfAttributes.
        :type priority_label: int
        """

        self._priority_label = priority_label

    @property
    def supported_perf_metric_groups(self):
        """Gets the supported_perf_metric_groups of this SubNetworkSingle1AllOfAttributes.


        :return: The supported_perf_metric_groups of this SubNetworkSingle1AllOfAttributes.
        :rtype: List[SupportedPerfMetricGroup]
        """
        return self._supported_perf_metric_groups

    @supported_perf_metric_groups.setter
    def supported_perf_metric_groups(self, supported_perf_metric_groups):
        """Sets the supported_perf_metric_groups of this SubNetworkSingle1AllOfAttributes.


        :param supported_perf_metric_groups: The supported_perf_metric_groups of this SubNetworkSingle1AllOfAttributes.
        :type supported_perf_metric_groups: List[SupportedPerfMetricGroup]
        """

        self._supported_perf_metric_groups = supported_perf_metric_groups

    @property
    def supported_trace_metrics(self):
        """Gets the supported_trace_metrics of this SubNetworkSingle1AllOfAttributes.


        :return: The supported_trace_metrics of this SubNetworkSingle1AllOfAttributes.
        :rtype: List[str]
        """
        return self._supported_trace_metrics

    @supported_trace_metrics.setter
    def supported_trace_metrics(self, supported_trace_metrics):
        """Sets the supported_trace_metrics of this SubNetworkSingle1AllOfAttributes.


        :param supported_trace_metrics: The supported_trace_metrics of this SubNetworkSingle1AllOfAttributes.
        :type supported_trace_metrics: List[str]
        """

        self._supported_trace_metrics = supported_trace_metrics
