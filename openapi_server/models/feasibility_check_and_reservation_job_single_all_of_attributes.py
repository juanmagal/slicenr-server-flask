# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.feasibility_result import FeasibilityResult
from openapi_server.models.one_of_slice_profile_service_profile import OneOfSliceProfileServiceProfile
from openapi_server.models.process_monitor import ProcessMonitor
from openapi_server.models.resource_reservation_status import ResourceReservationStatus
from openapi_server import util

from openapi_server.models.feasibility_result import FeasibilityResult  # noqa: E501
from openapi_server.models.one_of_slice_profile_service_profile import OneOfSliceProfileServiceProfile  # noqa: E501
from openapi_server.models.process_monitor import ProcessMonitor  # noqa: E501
from openapi_server.models.resource_reservation_status import ResourceReservationStatus  # noqa: E501

class FeasibilityCheckAndReservationJobSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile=None, resource_reservation=None, requested_reservation_expiration=None, process_monitor=None, feasibility_result=None, in_feasible_reason=None, resource_reservation_status=None, reservation_failure_reason=None, reservation_expiration=None, recommended_requirements=None):  # noqa: E501
        """FeasibilityCheckAndReservationJobSingleAllOfAttributes - a model defined in OpenAPI

        :param profile: The profile of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type profile: OneOfSliceProfileServiceProfile
        :param resource_reservation: The resource_reservation of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type resource_reservation: bool
        :param requested_reservation_expiration: The requested_reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type requested_reservation_expiration: str
        :param process_monitor: The process_monitor of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type process_monitor: ProcessMonitor
        :param feasibility_result: The feasibility_result of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type feasibility_result: FeasibilityResult
        :param in_feasible_reason: The in_feasible_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type in_feasible_reason: str
        :param resource_reservation_status: The resource_reservation_status of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type resource_reservation_status: ResourceReservationStatus
        :param reservation_failure_reason: The reservation_failure_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type reservation_failure_reason: str
        :param reservation_expiration: The reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type reservation_expiration: str
        :param recommended_requirements: The recommended_requirements of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :type recommended_requirements: str
        """
        self.openapi_types = {
            'profile': OneOfSliceProfileServiceProfile,
            'resource_reservation': bool,
            'requested_reservation_expiration': str,
            'process_monitor': ProcessMonitor,
            'feasibility_result': FeasibilityResult,
            'in_feasible_reason': str,
            'resource_reservation_status': ResourceReservationStatus,
            'reservation_failure_reason': str,
            'reservation_expiration': str,
            'recommended_requirements': str
        }

        self.attribute_map = {
            'profile': 'profile',
            'resource_reservation': 'resourceReservation',
            'requested_reservation_expiration': 'requestedReservationExpiration',
            'process_monitor': 'processMonitor',
            'feasibility_result': 'feasibilityResult',
            'in_feasible_reason': 'inFeasibleReason',
            'resource_reservation_status': 'resourceReservationStatus',
            'reservation_failure_reason': 'reservationFailureReason',
            'reservation_expiration': 'reservationExpiration',
            'recommended_requirements': 'recommendedRequirements'
        }

        self._profile = profile
        self._resource_reservation = resource_reservation
        self._requested_reservation_expiration = requested_reservation_expiration
        self._process_monitor = process_monitor
        self._feasibility_result = feasibility_result
        self._in_feasible_reason = in_feasible_reason
        self._resource_reservation_status = resource_reservation_status
        self._reservation_failure_reason = reservation_failure_reason
        self._reservation_expiration = reservation_expiration
        self._recommended_requirements = recommended_requirements

    @classmethod
    def from_dict(cls, dikt) -> 'FeasibilityCheckAndReservationJobSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeasibilityCheckAndReservationJob_Single_allOf_attributes of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.  # noqa: E501
        :rtype: FeasibilityCheckAndReservationJobSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile(self):
        """Gets the profile of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :return: The profile of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: OneOfSliceProfileServiceProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :param profile: The profile of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type profile: OneOfSliceProfileServiceProfile
        """

        self._profile = profile

    @property
    def resource_reservation(self):
        """Gets the resource_reservation of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute represents MnS consumer's requirements for resource reservation.  # noqa: E501

        :return: The resource_reservation of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: bool
        """
        return self._resource_reservation

    @resource_reservation.setter
    def resource_reservation(self, resource_reservation):
        """Sets the resource_reservation of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute represents MnS consumer's requirements for resource reservation.  # noqa: E501

        :param resource_reservation: The resource_reservation of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type resource_reservation: bool
        """

        self._resource_reservation = resource_reservation

    @property
    def requested_reservation_expiration(self):
        """Gets the requested_reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute which specifes MnS consuner's requirements for the validity period of the resource reservation.  # noqa: E501

        :return: The requested_reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: str
        """
        return self._requested_reservation_expiration

    @requested_reservation_expiration.setter
    def requested_reservation_expiration(self, requested_reservation_expiration):
        """Sets the requested_reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute which specifes MnS consuner's requirements for the validity period of the resource reservation.  # noqa: E501

        :param requested_reservation_expiration: The requested_reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type requested_reservation_expiration: str
        """

        self._requested_reservation_expiration = requested_reservation_expiration

    @property
    def process_monitor(self):
        """Gets the process_monitor of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :return: The process_monitor of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: ProcessMonitor
        """
        return self._process_monitor

    @process_monitor.setter
    def process_monitor(self, process_monitor):
        """Sets the process_monitor of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :param process_monitor: The process_monitor of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type process_monitor: ProcessMonitor
        """

        self._process_monitor = process_monitor

    @property
    def feasibility_result(self):
        """Gets the feasibility_result of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :return: The feasibility_result of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: FeasibilityResult
        """
        return self._feasibility_result

    @feasibility_result.setter
    def feasibility_result(self, feasibility_result):
        """Sets the feasibility_result of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :param feasibility_result: The feasibility_result of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type feasibility_result: FeasibilityResult
        """

        self._feasibility_result = feasibility_result

    @property
    def in_feasible_reason(self):
        """Gets the in_feasible_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute that specifies the additional reason information if the feasibility check result is infeasible.The detailed ENUM value is FFS.   # noqa: E501

        :return: The in_feasible_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: str
        """
        return self._in_feasible_reason

    @in_feasible_reason.setter
    def in_feasible_reason(self, in_feasible_reason):
        """Sets the in_feasible_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute that specifies the additional reason information if the feasibility check result is infeasible.The detailed ENUM value is FFS.   # noqa: E501

        :param in_feasible_reason: The in_feasible_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type in_feasible_reason: str
        """

        self._in_feasible_reason = in_feasible_reason

    @property
    def resource_reservation_status(self):
        """Gets the resource_reservation_status of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :return: The resource_reservation_status of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: ResourceReservationStatus
        """
        return self._resource_reservation_status

    @resource_reservation_status.setter
    def resource_reservation_status(self, resource_reservation_status):
        """Sets the resource_reservation_status of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.


        :param resource_reservation_status: The resource_reservation_status of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type resource_reservation_status: ResourceReservationStatus
        """

        self._resource_reservation_status = resource_reservation_status

    @property
    def reservation_failure_reason(self):
        """Gets the reservation_failure_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute that specifies the additional reason information if the reservation is failed.   # noqa: E501

        :return: The reservation_failure_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: str
        """
        return self._reservation_failure_reason

    @reservation_failure_reason.setter
    def reservation_failure_reason(self, reservation_failure_reason):
        """Sets the reservation_failure_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute that specifies the additional reason information if the reservation is failed.   # noqa: E501

        :param reservation_failure_reason: The reservation_failure_reason of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type reservation_failure_reason: str
        """

        self._reservation_failure_reason = reservation_failure_reason

    @property
    def reservation_expiration(self):
        """Gets the reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute which specifes the actual validity period of the resource reservation..  # noqa: E501

        :return: The reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: str
        """
        return self._reservation_expiration

    @reservation_expiration.setter
    def reservation_expiration(self, reservation_expiration):
        """Sets the reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute which specifes the actual validity period of the resource reservation..  # noqa: E501

        :param reservation_expiration: The reservation_expiration of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type reservation_expiration: str
        """

        self._reservation_expiration = reservation_expiration

    @property
    def recommended_requirements(self):
        """Gets the recommended_requirements of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute that specifies the recommended network slicing related requirements (i.e. ServiceProfile and SliceProfile information) which can be supported by the MnS producer..   # noqa: E501

        :return: The recommended_requirements of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :rtype: str
        """
        return self._recommended_requirements

    @recommended_requirements.setter
    def recommended_requirements(self, recommended_requirements):
        """Sets the recommended_requirements of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.

        An attribute that specifies the recommended network slicing related requirements (i.e. ServiceProfile and SliceProfile information) which can be supported by the MnS producer..   # noqa: E501

        :param recommended_requirements: The recommended_requirements of this FeasibilityCheckAndReservationJobSingleAllOfAttributes.
        :type recommended_requirements: str
        """

        self._recommended_requirements = recommended_requirements
