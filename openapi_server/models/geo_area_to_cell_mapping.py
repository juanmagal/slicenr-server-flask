# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.geo_area import GeoArea
from openapi_server import util

from openapi_server.models.geo_area import GeoArea  # noqa: E501

class GeoAreaToCellMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, convex_geo_polygon=None, association_threshold=None):  # noqa: E501
        """GeoAreaToCellMapping - a model defined in OpenAPI

        :param convex_geo_polygon: The convex_geo_polygon of this GeoAreaToCellMapping.  # noqa: E501
        :type convex_geo_polygon: GeoArea
        :param association_threshold: The association_threshold of this GeoAreaToCellMapping.  # noqa: E501
        :type association_threshold: int
        """
        self.openapi_types = {
            'convex_geo_polygon': GeoArea,
            'association_threshold': int
        }

        self.attribute_map = {
            'convex_geo_polygon': 'convexGeoPolygon',
            'association_threshold': 'associationThreshold'
        }

        self._convex_geo_polygon = convex_geo_polygon
        self._association_threshold = association_threshold

    @classmethod
    def from_dict(cls, dikt) -> 'GeoAreaToCellMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeoAreaToCellMapping of this GeoAreaToCellMapping.  # noqa: E501
        :rtype: GeoAreaToCellMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def convex_geo_polygon(self):
        """Gets the convex_geo_polygon of this GeoAreaToCellMapping.


        :return: The convex_geo_polygon of this GeoAreaToCellMapping.
        :rtype: GeoArea
        """
        return self._convex_geo_polygon

    @convex_geo_polygon.setter
    def convex_geo_polygon(self, convex_geo_polygon):
        """Sets the convex_geo_polygon of this GeoAreaToCellMapping.


        :param convex_geo_polygon: The convex_geo_polygon of this GeoAreaToCellMapping.
        :type convex_geo_polygon: GeoArea
        """

        self._convex_geo_polygon = convex_geo_polygon

    @property
    def association_threshold(self):
        """Gets the association_threshold of this GeoAreaToCellMapping.


        :return: The association_threshold of this GeoAreaToCellMapping.
        :rtype: int
        """
        return self._association_threshold

    @association_threshold.setter
    def association_threshold(self, association_threshold):
        """Sets the association_threshold of this GeoAreaToCellMapping.


        :param association_threshold: The association_threshold of this GeoAreaToCellMapping.
        :type association_threshold: int
        """

        self._association_threshold = association_threshold
