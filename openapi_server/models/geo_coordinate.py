# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GeoCoordinate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latitude=None, longitude=None, altitude=None):  # noqa: E501
        """GeoCoordinate - a model defined in OpenAPI

        :param latitude: The latitude of this GeoCoordinate.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this GeoCoordinate.  # noqa: E501
        :type longitude: float
        :param altitude: The altitude of this GeoCoordinate.  # noqa: E501
        :type altitude: float
        """
        self.openapi_types = {
            'latitude': float,
            'longitude': float,
            'altitude': float
        }

        self.attribute_map = {
            'latitude': 'latitude',
            'longitude': 'longitude',
            'altitude': 'altitude'
        }

        self._latitude = latitude
        self._longitude = longitude
        self._altitude = altitude

    @classmethod
    def from_dict(cls, dikt) -> 'GeoCoordinate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeoCoordinate of this GeoCoordinate.  # noqa: E501
        :rtype: GeoCoordinate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latitude(self):
        """Gets the latitude of this GeoCoordinate.


        :return: The latitude of this GeoCoordinate.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GeoCoordinate.


        :param latitude: The latitude of this GeoCoordinate.
        :type latitude: float
        """
        if latitude is not None and latitude > 90:  # noqa: E501
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `90`")  # noqa: E501
        if latitude is not None and latitude < -90:  # noqa: E501
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-90`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GeoCoordinate.


        :return: The longitude of this GeoCoordinate.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GeoCoordinate.


        :param longitude: The longitude of this GeoCoordinate.
        :type longitude: float
        """
        if longitude is not None and longitude > 180:  # noqa: E501
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `180`")  # noqa: E501
        if longitude is not None and longitude < -180:  # noqa: E501
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-180`")  # noqa: E501

        self._longitude = longitude

    @property
    def altitude(self):
        """Gets the altitude of this GeoCoordinate.


        :return: The altitude of this GeoCoordinate.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this GeoCoordinate.


        :param altitude: The altitude of this GeoCoordinate.
        :type altitude: float
        """

        self._altitude = altitude
