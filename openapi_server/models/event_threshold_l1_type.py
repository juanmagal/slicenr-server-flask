# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EventThresholdL1Type(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rsrp=None, rsrq=None):  # noqa: E501
        """EventThresholdL1Type - a model defined in OpenAPI

        :param rsrp: The rsrp of this EventThresholdL1Type.  # noqa: E501
        :type rsrp: int
        :param rsrq: The rsrq of this EventThresholdL1Type.  # noqa: E501
        :type rsrq: int
        """
        self.openapi_types = {
            'rsrp': int,
            'rsrq': int
        }

        self.attribute_map = {
            'rsrp': 'RSRP',
            'rsrq': 'RSRQ'
        }

        self._rsrp = rsrp
        self._rsrq = rsrq

    @classmethod
    def from_dict(cls, dikt) -> 'EventThresholdL1Type':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The eventThresholdL1-Type of this EventThresholdL1Type.  # noqa: E501
        :rtype: EventThresholdL1Type
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rsrp(self):
        """Gets the rsrp of this EventThresholdL1Type.


        :return: The rsrp of this EventThresholdL1Type.
        :rtype: int
        """
        return self._rsrp

    @rsrp.setter
    def rsrp(self, rsrp):
        """Sets the rsrp of this EventThresholdL1Type.


        :param rsrp: The rsrp of this EventThresholdL1Type.
        :type rsrp: int
        """
        if rsrp is not None and rsrp > 127:  # noqa: E501
            raise ValueError("Invalid value for `rsrp`, must be a value less than or equal to `127`")  # noqa: E501
        if rsrp is not None and rsrp < 0:  # noqa: E501
            raise ValueError("Invalid value for `rsrp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rsrp = rsrp

    @property
    def rsrq(self):
        """Gets the rsrq of this EventThresholdL1Type.


        :return: The rsrq of this EventThresholdL1Type.
        :rtype: int
        """
        return self._rsrq

    @rsrq.setter
    def rsrq(self, rsrq):
        """Sets the rsrq of this EventThresholdL1Type.


        :param rsrq: The rsrq of this EventThresholdL1Type.
        :type rsrq: int
        """
        if rsrq is not None and rsrq > 127:  # noqa: E501
            raise ValueError("Invalid value for `rsrq`, must be a value less than or equal to `127`")  # noqa: E501
        if rsrq is not None and rsrq < 0:  # noqa: E501
            raise ValueError("Invalid value for `rsrq`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rsrq = rsrq
