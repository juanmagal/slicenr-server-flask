# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.event_threshold_type_event_threshold1_f import EventThresholdTypeEventThreshold1F
from openapi_server.models.event_threshold_type_event_threshold_rsrp import EventThresholdTypeEventThresholdRSRP
from openapi_server.models.event_threshold_type_event_threshold_rsrq import EventThresholdTypeEventThresholdRSRQ
from openapi_server import util

from openapi_server.models.event_threshold_type_event_threshold1_f import EventThresholdTypeEventThreshold1F  # noqa: E501
from openapi_server.models.event_threshold_type_event_threshold_rsrp import EventThresholdTypeEventThresholdRSRP  # noqa: E501
from openapi_server.models.event_threshold_type_event_threshold_rsrq import EventThresholdTypeEventThresholdRSRQ  # noqa: E501

class EventThresholdType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_threshold_rsrp=None, event_threshold_rsrq=None, event_threshold1_f=None, event_threshold1_i=None):  # noqa: E501
        """EventThresholdType - a model defined in OpenAPI

        :param event_threshold_rsrp: The event_threshold_rsrp of this EventThresholdType.  # noqa: E501
        :type event_threshold_rsrp: EventThresholdTypeEventThresholdRSRP
        :param event_threshold_rsrq: The event_threshold_rsrq of this EventThresholdType.  # noqa: E501
        :type event_threshold_rsrq: EventThresholdTypeEventThresholdRSRQ
        :param event_threshold1_f: The event_threshold1_f of this EventThresholdType.  # noqa: E501
        :type event_threshold1_f: EventThresholdTypeEventThreshold1F
        :param event_threshold1_i: The event_threshold1_i of this EventThresholdType.  # noqa: E501
        :type event_threshold1_i: int
        """
        self.openapi_types = {
            'event_threshold_rsrp': EventThresholdTypeEventThresholdRSRP,
            'event_threshold_rsrq': EventThresholdTypeEventThresholdRSRQ,
            'event_threshold1_f': EventThresholdTypeEventThreshold1F,
            'event_threshold1_i': int
        }

        self.attribute_map = {
            'event_threshold_rsrp': 'EventThresholdRSRP',
            'event_threshold_rsrq': 'EventThresholdRSRQ',
            'event_threshold1_f': 'EventThreshold1F',
            'event_threshold1_i': 'EventThreshold1I'
        }

        self._event_threshold_rsrp = event_threshold_rsrp
        self._event_threshold_rsrq = event_threshold_rsrq
        self._event_threshold1_f = event_threshold1_f
        self._event_threshold1_i = event_threshold1_i

    @classmethod
    def from_dict(cls, dikt) -> 'EventThresholdType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The eventThreshold-Type of this EventThresholdType.  # noqa: E501
        :rtype: EventThresholdType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_threshold_rsrp(self):
        """Gets the event_threshold_rsrp of this EventThresholdType.


        :return: The event_threshold_rsrp of this EventThresholdType.
        :rtype: EventThresholdTypeEventThresholdRSRP
        """
        return self._event_threshold_rsrp

    @event_threshold_rsrp.setter
    def event_threshold_rsrp(self, event_threshold_rsrp):
        """Sets the event_threshold_rsrp of this EventThresholdType.


        :param event_threshold_rsrp: The event_threshold_rsrp of this EventThresholdType.
        :type event_threshold_rsrp: EventThresholdTypeEventThresholdRSRP
        """

        self._event_threshold_rsrp = event_threshold_rsrp

    @property
    def event_threshold_rsrq(self):
        """Gets the event_threshold_rsrq of this EventThresholdType.


        :return: The event_threshold_rsrq of this EventThresholdType.
        :rtype: EventThresholdTypeEventThresholdRSRQ
        """
        return self._event_threshold_rsrq

    @event_threshold_rsrq.setter
    def event_threshold_rsrq(self, event_threshold_rsrq):
        """Sets the event_threshold_rsrq of this EventThresholdType.


        :param event_threshold_rsrq: The event_threshold_rsrq of this EventThresholdType.
        :type event_threshold_rsrq: EventThresholdTypeEventThresholdRSRQ
        """

        self._event_threshold_rsrq = event_threshold_rsrq

    @property
    def event_threshold1_f(self):
        """Gets the event_threshold1_f of this EventThresholdType.


        :return: The event_threshold1_f of this EventThresholdType.
        :rtype: EventThresholdTypeEventThreshold1F
        """
        return self._event_threshold1_f

    @event_threshold1_f.setter
    def event_threshold1_f(self, event_threshold1_f):
        """Sets the event_threshold1_f of this EventThresholdType.


        :param event_threshold1_f: The event_threshold1_f of this EventThresholdType.
        :type event_threshold1_f: EventThresholdTypeEventThreshold1F
        """

        self._event_threshold1_f = event_threshold1_f

    @property
    def event_threshold1_i(self):
        """Gets the event_threshold1_i of this EventThresholdType.


        :return: The event_threshold1_i of this EventThresholdType.
        :rtype: int
        """
        return self._event_threshold1_i

    @event_threshold1_i.setter
    def event_threshold1_i(self, event_threshold1_i):
        """Sets the event_threshold1_i of this EventThresholdType.


        :param event_threshold1_i: The event_threshold1_i of this EventThresholdType.
        :type event_threshold1_i: int
        """
        if event_threshold1_i is not None and event_threshold1_i > 25:  # noqa: E501
            raise ValueError("Invalid value for `event_threshold1_i`, must be a value less than or equal to `25`")  # noqa: E501
        if event_threshold1_i is not None and event_threshold1_i < -120:  # noqa: E501
            raise ValueError("Invalid value for `event_threshold1_i`, must be a value greater than or equal to `-120`")  # noqa: E501

        self._event_threshold1_i = event_threshold1_i
