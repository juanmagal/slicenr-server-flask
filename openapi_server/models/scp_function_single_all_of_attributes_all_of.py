# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.host_addr import HostAddr
from openapi_server.models.supported_func import SupportedFunc
from openapi_server import util

from openapi_server.models.host_addr import HostAddr  # noqa: E501
from openapi_server.models.supported_func import SupportedFunc  # noqa: E501

class ScpFunctionSingleAllOfAttributesAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supported_func_list=None, address=None):  # noqa: E501
        """ScpFunctionSingleAllOfAttributesAllOf - a model defined in OpenAPI

        :param supported_func_list: The supported_func_list of this ScpFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type supported_func_list: List[SupportedFunc]
        :param address: The address of this ScpFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :type address: HostAddr
        """
        self.openapi_types = {
            'supported_func_list': List[SupportedFunc],
            'address': HostAddr
        }

        self.attribute_map = {
            'supported_func_list': 'supportedFuncList',
            'address': 'address'
        }

        self._supported_func_list = supported_func_list
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'ScpFunctionSingleAllOfAttributesAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScpFunction_Single_allOf_attributes_allOf of this ScpFunctionSingleAllOfAttributesAllOf.  # noqa: E501
        :rtype: ScpFunctionSingleAllOfAttributesAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supported_func_list(self):
        """Gets the supported_func_list of this ScpFunctionSingleAllOfAttributesAllOf.


        :return: The supported_func_list of this ScpFunctionSingleAllOfAttributesAllOf.
        :rtype: List[SupportedFunc]
        """
        return self._supported_func_list

    @supported_func_list.setter
    def supported_func_list(self, supported_func_list):
        """Sets the supported_func_list of this ScpFunctionSingleAllOfAttributesAllOf.


        :param supported_func_list: The supported_func_list of this ScpFunctionSingleAllOfAttributesAllOf.
        :type supported_func_list: List[SupportedFunc]
        """

        self._supported_func_list = supported_func_list

    @property
    def address(self):
        """Gets the address of this ScpFunctionSingleAllOfAttributesAllOf.


        :return: The address of this ScpFunctionSingleAllOfAttributesAllOf.
        :rtype: HostAddr
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ScpFunctionSingleAllOfAttributesAllOf.


        :param address: The address of this ScpFunctionSingleAllOfAttributesAllOf.
        :type address: HostAddr
        """

        self._address = address
