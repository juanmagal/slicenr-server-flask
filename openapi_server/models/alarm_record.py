# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ack_state import AckState
from openapi_server.models.alarm_type import AlarmType
from openapi_server.models.correlated_notification1 import CorrelatedNotification1
from openapi_server.models.perceived_severity import PerceivedSeverity
from openapi_server.models.probable_cause import ProbableCause
from openapi_server.models.specific_problem import SpecificProblem
from openapi_server.models.threshold_measurement_info import ThresholdMeasurementInfo
from openapi_server.models.trend_indication import TrendIndication
from openapi_server import util

from openapi_server.models.ack_state import AckState  # noqa: E501
from openapi_server.models.alarm_type import AlarmType  # noqa: E501
from openapi_server.models.correlated_notification1 import CorrelatedNotification1  # noqa: E501
from openapi_server.models.perceived_severity import PerceivedSeverity  # noqa: E501
from openapi_server.models.probable_cause import ProbableCause  # noqa: E501
from openapi_server.models.specific_problem import SpecificProblem  # noqa: E501
from openapi_server.models.threshold_measurement_info import ThresholdMeasurementInfo  # noqa: E501
from openapi_server.models.trend_indication import TrendIndication  # noqa: E501

class AlarmRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_instance=None, notification_id=None, alarm_raised_time=None, alarm_changed_time=None, alarm_cleared_time=None, alarm_type=None, probable_cause=None, specific_problem=None, perceived_severity=None, backed_up_status=None, back_up_object=None, trend_indication=None, thresholdinfo=None, correlated_notifications=None, state_change_definition=None, monitored_attributes=None, proposed_repair_actions=None, additional_text=None, additional_information=None, root_cause_indicator=None, ack_time=None, ack_user_id=None, ack_system_id=None, ack_state=None, clear_user_id=None, clear_system_id=None, service_user=None, service_provider=None, security_alarm_detector=None):  # noqa: E501
        """AlarmRecord - a model defined in OpenAPI

        :param object_instance: The object_instance of this AlarmRecord.  # noqa: E501
        :type object_instance: str
        :param notification_id: The notification_id of this AlarmRecord.  # noqa: E501
        :type notification_id: int
        :param alarm_raised_time: The alarm_raised_time of this AlarmRecord.  # noqa: E501
        :type alarm_raised_time: datetime
        :param alarm_changed_time: The alarm_changed_time of this AlarmRecord.  # noqa: E501
        :type alarm_changed_time: datetime
        :param alarm_cleared_time: The alarm_cleared_time of this AlarmRecord.  # noqa: E501
        :type alarm_cleared_time: datetime
        :param alarm_type: The alarm_type of this AlarmRecord.  # noqa: E501
        :type alarm_type: AlarmType
        :param probable_cause: The probable_cause of this AlarmRecord.  # noqa: E501
        :type probable_cause: ProbableCause
        :param specific_problem: The specific_problem of this AlarmRecord.  # noqa: E501
        :type specific_problem: SpecificProblem
        :param perceived_severity: The perceived_severity of this AlarmRecord.  # noqa: E501
        :type perceived_severity: PerceivedSeverity
        :param backed_up_status: The backed_up_status of this AlarmRecord.  # noqa: E501
        :type backed_up_status: bool
        :param back_up_object: The back_up_object of this AlarmRecord.  # noqa: E501
        :type back_up_object: str
        :param trend_indication: The trend_indication of this AlarmRecord.  # noqa: E501
        :type trend_indication: TrendIndication
        :param thresholdinfo: The thresholdinfo of this AlarmRecord.  # noqa: E501
        :type thresholdinfo: ThresholdMeasurementInfo
        :param correlated_notifications: The correlated_notifications of this AlarmRecord.  # noqa: E501
        :type correlated_notifications: List[CorrelatedNotification1]
        :param state_change_definition: The state_change_definition of this AlarmRecord.  # noqa: E501
        :type state_change_definition: List[Dict]
        :param monitored_attributes: The monitored_attributes of this AlarmRecord.  # noqa: E501
        :type monitored_attributes: Dict[str, object]
        :param proposed_repair_actions: The proposed_repair_actions of this AlarmRecord.  # noqa: E501
        :type proposed_repair_actions: str
        :param additional_text: The additional_text of this AlarmRecord.  # noqa: E501
        :type additional_text: str
        :param additional_information: The additional_information of this AlarmRecord.  # noqa: E501
        :type additional_information: Dict[str, object]
        :param root_cause_indicator: The root_cause_indicator of this AlarmRecord.  # noqa: E501
        :type root_cause_indicator: bool
        :param ack_time: The ack_time of this AlarmRecord.  # noqa: E501
        :type ack_time: datetime
        :param ack_user_id: The ack_user_id of this AlarmRecord.  # noqa: E501
        :type ack_user_id: str
        :param ack_system_id: The ack_system_id of this AlarmRecord.  # noqa: E501
        :type ack_system_id: str
        :param ack_state: The ack_state of this AlarmRecord.  # noqa: E501
        :type ack_state: AckState
        :param clear_user_id: The clear_user_id of this AlarmRecord.  # noqa: E501
        :type clear_user_id: str
        :param clear_system_id: The clear_system_id of this AlarmRecord.  # noqa: E501
        :type clear_system_id: str
        :param service_user: The service_user of this AlarmRecord.  # noqa: E501
        :type service_user: str
        :param service_provider: The service_provider of this AlarmRecord.  # noqa: E501
        :type service_provider: str
        :param security_alarm_detector: The security_alarm_detector of this AlarmRecord.  # noqa: E501
        :type security_alarm_detector: str
        """
        self.openapi_types = {
            'object_instance': str,
            'notification_id': int,
            'alarm_raised_time': datetime,
            'alarm_changed_time': datetime,
            'alarm_cleared_time': datetime,
            'alarm_type': AlarmType,
            'probable_cause': ProbableCause,
            'specific_problem': SpecificProblem,
            'perceived_severity': PerceivedSeverity,
            'backed_up_status': bool,
            'back_up_object': str,
            'trend_indication': TrendIndication,
            'thresholdinfo': ThresholdMeasurementInfo,
            'correlated_notifications': List[CorrelatedNotification1],
            'state_change_definition': List[Dict],
            'monitored_attributes': Dict[str, object],
            'proposed_repair_actions': str,
            'additional_text': str,
            'additional_information': Dict[str, object],
            'root_cause_indicator': bool,
            'ack_time': datetime,
            'ack_user_id': str,
            'ack_system_id': str,
            'ack_state': AckState,
            'clear_user_id': str,
            'clear_system_id': str,
            'service_user': str,
            'service_provider': str,
            'security_alarm_detector': str
        }

        self.attribute_map = {
            'object_instance': 'objectInstance',
            'notification_id': 'notificationId',
            'alarm_raised_time': 'alarmRaisedTime',
            'alarm_changed_time': 'alarmChangedTime',
            'alarm_cleared_time': 'alarmClearedTime',
            'alarm_type': 'alarmType',
            'probable_cause': 'probableCause',
            'specific_problem': 'specificProblem',
            'perceived_severity': 'perceivedSeverity',
            'backed_up_status': 'backedUpStatus',
            'back_up_object': 'backUpObject',
            'trend_indication': 'trendIndication',
            'thresholdinfo': 'thresholdinfo',
            'correlated_notifications': 'correlatedNotifications',
            'state_change_definition': 'stateChangeDefinition',
            'monitored_attributes': 'monitoredAttributes',
            'proposed_repair_actions': 'proposedRepairActions',
            'additional_text': 'additionalText',
            'additional_information': 'additionalInformation',
            'root_cause_indicator': 'rootCauseIndicator',
            'ack_time': 'ackTime',
            'ack_user_id': 'ackUserId',
            'ack_system_id': 'ackSystemId',
            'ack_state': 'ackState',
            'clear_user_id': 'clearUserId',
            'clear_system_id': 'clearSystemId',
            'service_user': 'serviceUser',
            'service_provider': 'serviceProvider',
            'security_alarm_detector': 'securityAlarmDetector'
        }

        self._object_instance = object_instance
        self._notification_id = notification_id
        self._alarm_raised_time = alarm_raised_time
        self._alarm_changed_time = alarm_changed_time
        self._alarm_cleared_time = alarm_cleared_time
        self._alarm_type = alarm_type
        self._probable_cause = probable_cause
        self._specific_problem = specific_problem
        self._perceived_severity = perceived_severity
        self._backed_up_status = backed_up_status
        self._back_up_object = back_up_object
        self._trend_indication = trend_indication
        self._thresholdinfo = thresholdinfo
        self._correlated_notifications = correlated_notifications
        self._state_change_definition = state_change_definition
        self._monitored_attributes = monitored_attributes
        self._proposed_repair_actions = proposed_repair_actions
        self._additional_text = additional_text
        self._additional_information = additional_information
        self._root_cause_indicator = root_cause_indicator
        self._ack_time = ack_time
        self._ack_user_id = ack_user_id
        self._ack_system_id = ack_system_id
        self._ack_state = ack_state
        self._clear_user_id = clear_user_id
        self._clear_system_id = clear_system_id
        self._service_user = service_user
        self._service_provider = service_provider
        self._security_alarm_detector = security_alarm_detector

    @classmethod
    def from_dict(cls, dikt) -> 'AlarmRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlarmRecord of this AlarmRecord.  # noqa: E501
        :rtype: AlarmRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_instance(self):
        """Gets the object_instance of this AlarmRecord.


        :return: The object_instance of this AlarmRecord.
        :rtype: str
        """
        return self._object_instance

    @object_instance.setter
    def object_instance(self, object_instance):
        """Sets the object_instance of this AlarmRecord.


        :param object_instance: The object_instance of this AlarmRecord.
        :type object_instance: str
        """

        self._object_instance = object_instance

    @property
    def notification_id(self):
        """Gets the notification_id of this AlarmRecord.


        :return: The notification_id of this AlarmRecord.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this AlarmRecord.


        :param notification_id: The notification_id of this AlarmRecord.
        :type notification_id: int
        """

        self._notification_id = notification_id

    @property
    def alarm_raised_time(self):
        """Gets the alarm_raised_time of this AlarmRecord.


        :return: The alarm_raised_time of this AlarmRecord.
        :rtype: datetime
        """
        return self._alarm_raised_time

    @alarm_raised_time.setter
    def alarm_raised_time(self, alarm_raised_time):
        """Sets the alarm_raised_time of this AlarmRecord.


        :param alarm_raised_time: The alarm_raised_time of this AlarmRecord.
        :type alarm_raised_time: datetime
        """

        self._alarm_raised_time = alarm_raised_time

    @property
    def alarm_changed_time(self):
        """Gets the alarm_changed_time of this AlarmRecord.


        :return: The alarm_changed_time of this AlarmRecord.
        :rtype: datetime
        """
        return self._alarm_changed_time

    @alarm_changed_time.setter
    def alarm_changed_time(self, alarm_changed_time):
        """Sets the alarm_changed_time of this AlarmRecord.


        :param alarm_changed_time: The alarm_changed_time of this AlarmRecord.
        :type alarm_changed_time: datetime
        """

        self._alarm_changed_time = alarm_changed_time

    @property
    def alarm_cleared_time(self):
        """Gets the alarm_cleared_time of this AlarmRecord.


        :return: The alarm_cleared_time of this AlarmRecord.
        :rtype: datetime
        """
        return self._alarm_cleared_time

    @alarm_cleared_time.setter
    def alarm_cleared_time(self, alarm_cleared_time):
        """Sets the alarm_cleared_time of this AlarmRecord.


        :param alarm_cleared_time: The alarm_cleared_time of this AlarmRecord.
        :type alarm_cleared_time: datetime
        """

        self._alarm_cleared_time = alarm_cleared_time

    @property
    def alarm_type(self):
        """Gets the alarm_type of this AlarmRecord.


        :return: The alarm_type of this AlarmRecord.
        :rtype: AlarmType
        """
        return self._alarm_type

    @alarm_type.setter
    def alarm_type(self, alarm_type):
        """Sets the alarm_type of this AlarmRecord.


        :param alarm_type: The alarm_type of this AlarmRecord.
        :type alarm_type: AlarmType
        """

        self._alarm_type = alarm_type

    @property
    def probable_cause(self):
        """Gets the probable_cause of this AlarmRecord.


        :return: The probable_cause of this AlarmRecord.
        :rtype: ProbableCause
        """
        return self._probable_cause

    @probable_cause.setter
    def probable_cause(self, probable_cause):
        """Sets the probable_cause of this AlarmRecord.


        :param probable_cause: The probable_cause of this AlarmRecord.
        :type probable_cause: ProbableCause
        """

        self._probable_cause = probable_cause

    @property
    def specific_problem(self):
        """Gets the specific_problem of this AlarmRecord.


        :return: The specific_problem of this AlarmRecord.
        :rtype: SpecificProblem
        """
        return self._specific_problem

    @specific_problem.setter
    def specific_problem(self, specific_problem):
        """Sets the specific_problem of this AlarmRecord.


        :param specific_problem: The specific_problem of this AlarmRecord.
        :type specific_problem: SpecificProblem
        """

        self._specific_problem = specific_problem

    @property
    def perceived_severity(self):
        """Gets the perceived_severity of this AlarmRecord.


        :return: The perceived_severity of this AlarmRecord.
        :rtype: PerceivedSeverity
        """
        return self._perceived_severity

    @perceived_severity.setter
    def perceived_severity(self, perceived_severity):
        """Sets the perceived_severity of this AlarmRecord.


        :param perceived_severity: The perceived_severity of this AlarmRecord.
        :type perceived_severity: PerceivedSeverity
        """

        self._perceived_severity = perceived_severity

    @property
    def backed_up_status(self):
        """Gets the backed_up_status of this AlarmRecord.


        :return: The backed_up_status of this AlarmRecord.
        :rtype: bool
        """
        return self._backed_up_status

    @backed_up_status.setter
    def backed_up_status(self, backed_up_status):
        """Sets the backed_up_status of this AlarmRecord.


        :param backed_up_status: The backed_up_status of this AlarmRecord.
        :type backed_up_status: bool
        """

        self._backed_up_status = backed_up_status

    @property
    def back_up_object(self):
        """Gets the back_up_object of this AlarmRecord.


        :return: The back_up_object of this AlarmRecord.
        :rtype: str
        """
        return self._back_up_object

    @back_up_object.setter
    def back_up_object(self, back_up_object):
        """Sets the back_up_object of this AlarmRecord.


        :param back_up_object: The back_up_object of this AlarmRecord.
        :type back_up_object: str
        """

        self._back_up_object = back_up_object

    @property
    def trend_indication(self):
        """Gets the trend_indication of this AlarmRecord.


        :return: The trend_indication of this AlarmRecord.
        :rtype: TrendIndication
        """
        return self._trend_indication

    @trend_indication.setter
    def trend_indication(self, trend_indication):
        """Sets the trend_indication of this AlarmRecord.


        :param trend_indication: The trend_indication of this AlarmRecord.
        :type trend_indication: TrendIndication
        """

        self._trend_indication = trend_indication

    @property
    def thresholdinfo(self):
        """Gets the thresholdinfo of this AlarmRecord.


        :return: The thresholdinfo of this AlarmRecord.
        :rtype: ThresholdMeasurementInfo
        """
        return self._thresholdinfo

    @thresholdinfo.setter
    def thresholdinfo(self, thresholdinfo):
        """Sets the thresholdinfo of this AlarmRecord.


        :param thresholdinfo: The thresholdinfo of this AlarmRecord.
        :type thresholdinfo: ThresholdMeasurementInfo
        """

        self._thresholdinfo = thresholdinfo

    @property
    def correlated_notifications(self):
        """Gets the correlated_notifications of this AlarmRecord.


        :return: The correlated_notifications of this AlarmRecord.
        :rtype: List[CorrelatedNotification1]
        """
        return self._correlated_notifications

    @correlated_notifications.setter
    def correlated_notifications(self, correlated_notifications):
        """Sets the correlated_notifications of this AlarmRecord.


        :param correlated_notifications: The correlated_notifications of this AlarmRecord.
        :type correlated_notifications: List[CorrelatedNotification1]
        """

        self._correlated_notifications = correlated_notifications

    @property
    def state_change_definition(self):
        """Gets the state_change_definition of this AlarmRecord.

        The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.  # noqa: E501

        :return: The state_change_definition of this AlarmRecord.
        :rtype: List[Dict]
        """
        return self._state_change_definition

    @state_change_definition.setter
    def state_change_definition(self, state_change_definition):
        """Sets the state_change_definition of this AlarmRecord.

        The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.  # noqa: E501

        :param state_change_definition: The state_change_definition of this AlarmRecord.
        :type state_change_definition: List[Dict]
        """
        if state_change_definition is not None and len(state_change_definition) > 2:
            raise ValueError("Invalid value for `state_change_definition`, number of items must be less than or equal to `2`")  # noqa: E501
        if state_change_definition is not None and len(state_change_definition) < 1:
            raise ValueError("Invalid value for `state_change_definition`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._state_change_definition = state_change_definition

    @property
    def monitored_attributes(self):
        """Gets the monitored_attributes of this AlarmRecord.

        The key of this map is the attribute name, and the value the attribute value.  # noqa: E501

        :return: The monitored_attributes of this AlarmRecord.
        :rtype: Dict[str, object]
        """
        return self._monitored_attributes

    @monitored_attributes.setter
    def monitored_attributes(self, monitored_attributes):
        """Sets the monitored_attributes of this AlarmRecord.

        The key of this map is the attribute name, and the value the attribute value.  # noqa: E501

        :param monitored_attributes: The monitored_attributes of this AlarmRecord.
        :type monitored_attributes: Dict[str, object]
        """
        if monitored_attributes is not None and len(monitored_attributes) < 1:
            raise ValueError("Invalid value for `monitored_attributes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._monitored_attributes = monitored_attributes

    @property
    def proposed_repair_actions(self):
        """Gets the proposed_repair_actions of this AlarmRecord.


        :return: The proposed_repair_actions of this AlarmRecord.
        :rtype: str
        """
        return self._proposed_repair_actions

    @proposed_repair_actions.setter
    def proposed_repair_actions(self, proposed_repair_actions):
        """Sets the proposed_repair_actions of this AlarmRecord.


        :param proposed_repair_actions: The proposed_repair_actions of this AlarmRecord.
        :type proposed_repair_actions: str
        """

        self._proposed_repair_actions = proposed_repair_actions

    @property
    def additional_text(self):
        """Gets the additional_text of this AlarmRecord.


        :return: The additional_text of this AlarmRecord.
        :rtype: str
        """
        return self._additional_text

    @additional_text.setter
    def additional_text(self, additional_text):
        """Sets the additional_text of this AlarmRecord.


        :param additional_text: The additional_text of this AlarmRecord.
        :type additional_text: str
        """

        self._additional_text = additional_text

    @property
    def additional_information(self):
        """Gets the additional_information of this AlarmRecord.

        The key of this map is the attribute name, and the value the attribute value.  # noqa: E501

        :return: The additional_information of this AlarmRecord.
        :rtype: Dict[str, object]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this AlarmRecord.

        The key of this map is the attribute name, and the value the attribute value.  # noqa: E501

        :param additional_information: The additional_information of this AlarmRecord.
        :type additional_information: Dict[str, object]
        """
        if additional_information is not None and len(additional_information) < 1:
            raise ValueError("Invalid value for `additional_information`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._additional_information = additional_information

    @property
    def root_cause_indicator(self):
        """Gets the root_cause_indicator of this AlarmRecord.


        :return: The root_cause_indicator of this AlarmRecord.
        :rtype: bool
        """
        return self._root_cause_indicator

    @root_cause_indicator.setter
    def root_cause_indicator(self, root_cause_indicator):
        """Sets the root_cause_indicator of this AlarmRecord.


        :param root_cause_indicator: The root_cause_indicator of this AlarmRecord.
        :type root_cause_indicator: bool
        """

        self._root_cause_indicator = root_cause_indicator

    @property
    def ack_time(self):
        """Gets the ack_time of this AlarmRecord.


        :return: The ack_time of this AlarmRecord.
        :rtype: datetime
        """
        return self._ack_time

    @ack_time.setter
    def ack_time(self, ack_time):
        """Sets the ack_time of this AlarmRecord.


        :param ack_time: The ack_time of this AlarmRecord.
        :type ack_time: datetime
        """

        self._ack_time = ack_time

    @property
    def ack_user_id(self):
        """Gets the ack_user_id of this AlarmRecord.


        :return: The ack_user_id of this AlarmRecord.
        :rtype: str
        """
        return self._ack_user_id

    @ack_user_id.setter
    def ack_user_id(self, ack_user_id):
        """Sets the ack_user_id of this AlarmRecord.


        :param ack_user_id: The ack_user_id of this AlarmRecord.
        :type ack_user_id: str
        """

        self._ack_user_id = ack_user_id

    @property
    def ack_system_id(self):
        """Gets the ack_system_id of this AlarmRecord.


        :return: The ack_system_id of this AlarmRecord.
        :rtype: str
        """
        return self._ack_system_id

    @ack_system_id.setter
    def ack_system_id(self, ack_system_id):
        """Sets the ack_system_id of this AlarmRecord.


        :param ack_system_id: The ack_system_id of this AlarmRecord.
        :type ack_system_id: str
        """

        self._ack_system_id = ack_system_id

    @property
    def ack_state(self):
        """Gets the ack_state of this AlarmRecord.


        :return: The ack_state of this AlarmRecord.
        :rtype: AckState
        """
        return self._ack_state

    @ack_state.setter
    def ack_state(self, ack_state):
        """Sets the ack_state of this AlarmRecord.


        :param ack_state: The ack_state of this AlarmRecord.
        :type ack_state: AckState
        """

        self._ack_state = ack_state

    @property
    def clear_user_id(self):
        """Gets the clear_user_id of this AlarmRecord.


        :return: The clear_user_id of this AlarmRecord.
        :rtype: str
        """
        return self._clear_user_id

    @clear_user_id.setter
    def clear_user_id(self, clear_user_id):
        """Sets the clear_user_id of this AlarmRecord.


        :param clear_user_id: The clear_user_id of this AlarmRecord.
        :type clear_user_id: str
        """

        self._clear_user_id = clear_user_id

    @property
    def clear_system_id(self):
        """Gets the clear_system_id of this AlarmRecord.


        :return: The clear_system_id of this AlarmRecord.
        :rtype: str
        """
        return self._clear_system_id

    @clear_system_id.setter
    def clear_system_id(self, clear_system_id):
        """Sets the clear_system_id of this AlarmRecord.


        :param clear_system_id: The clear_system_id of this AlarmRecord.
        :type clear_system_id: str
        """

        self._clear_system_id = clear_system_id

    @property
    def service_user(self):
        """Gets the service_user of this AlarmRecord.


        :return: The service_user of this AlarmRecord.
        :rtype: str
        """
        return self._service_user

    @service_user.setter
    def service_user(self, service_user):
        """Sets the service_user of this AlarmRecord.


        :param service_user: The service_user of this AlarmRecord.
        :type service_user: str
        """

        self._service_user = service_user

    @property
    def service_provider(self):
        """Gets the service_provider of this AlarmRecord.


        :return: The service_provider of this AlarmRecord.
        :rtype: str
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this AlarmRecord.


        :param service_provider: The service_provider of this AlarmRecord.
        :type service_provider: str
        """

        self._service_provider = service_provider

    @property
    def security_alarm_detector(self):
        """Gets the security_alarm_detector of this AlarmRecord.


        :return: The security_alarm_detector of this AlarmRecord.
        :rtype: str
        """
        return self._security_alarm_detector

    @security_alarm_detector.setter
    def security_alarm_detector(self, security_alarm_detector):
        """Sets the security_alarm_detector of this AlarmRecord.


        :param security_alarm_detector: The security_alarm_detector of this AlarmRecord.
        :type security_alarm_detector: str
        """

        self._security_alarm_detector = security_alarm_detector
