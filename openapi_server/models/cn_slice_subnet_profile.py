# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.delay_tolerance import DelayTolerance
from openapi_server.models.deterministic_comm import DeterministicComm
from openapi_server.models.n6_protection import N6Protection
from openapi_server.models.nssaa_support import NSSAASupport
from openapi_server.models.sharing_level import SharingLevel
from openapi_server.models.slice_simultaneous_use import SliceSimultaneousUse
from openapi_server.models.synchronicity_ran_subnet import SynchronicityRANSubnet
from openapi_server.models.xl_thpt import XLThpt
from openapi_server import util

from openapi_server.models.delay_tolerance import DelayTolerance  # noqa: E501
from openapi_server.models.deterministic_comm import DeterministicComm  # noqa: E501
from openapi_server.models.n6_protection import N6Protection  # noqa: E501
from openapi_server.models.nssaa_support import NSSAASupport  # noqa: E501
from openapi_server.models.sharing_level import SharingLevel  # noqa: E501
from openapi_server.models.slice_simultaneous_use import SliceSimultaneousUse  # noqa: E501
from openapi_server.models.synchronicity_ran_subnet import SynchronicityRANSubnet  # noqa: E501
from openapi_server.models.xl_thpt import XLThpt  # noqa: E501

class CNSliceSubnetProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_numberof_ues=None, d_l_latency=None, u_l_latency=None, d_l_thpt_per_slice_subnet=None, d_l_thpt_per_ue=None, u_l_thpt_per_slice_subnet=None, u_l_thpt_per_ue=None, max_number_of_pdu_sessions=None, coverage_area_ta_list=None, resource_sharing_level=None, d_l_max_pkt_size=None, u_l_max_pkt_size=None, delay_tolerance=None, synchronicity=None, slice_simultaneous_use=None, reliability=None, energy_efficiency=None, d_l_deterministic_comm=None, u_l_deterministic_comm=None, survival_time=None, nssaa_support=None, n6_protection=None):  # noqa: E501
        """CNSliceSubnetProfile - a model defined in OpenAPI

        :param max_numberof_ues: The max_numberof_ues of this CNSliceSubnetProfile.  # noqa: E501
        :type max_numberof_ues: int
        :param d_l_latency: The d_l_latency of this CNSliceSubnetProfile.  # noqa: E501
        :type d_l_latency: float
        :param u_l_latency: The u_l_latency of this CNSliceSubnetProfile.  # noqa: E501
        :type u_l_latency: float
        :param d_l_thpt_per_slice_subnet: The d_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.  # noqa: E501
        :type d_l_thpt_per_slice_subnet: XLThpt
        :param d_l_thpt_per_ue: The d_l_thpt_per_ue of this CNSliceSubnetProfile.  # noqa: E501
        :type d_l_thpt_per_ue: XLThpt
        :param u_l_thpt_per_slice_subnet: The u_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.  # noqa: E501
        :type u_l_thpt_per_slice_subnet: XLThpt
        :param u_l_thpt_per_ue: The u_l_thpt_per_ue of this CNSliceSubnetProfile.  # noqa: E501
        :type u_l_thpt_per_ue: XLThpt
        :param max_number_of_pdu_sessions: The max_number_of_pdu_sessions of this CNSliceSubnetProfile.  # noqa: E501
        :type max_number_of_pdu_sessions: int
        :param coverage_area_ta_list: The coverage_area_ta_list of this CNSliceSubnetProfile.  # noqa: E501
        :type coverage_area_ta_list: List[int]
        :param resource_sharing_level: The resource_sharing_level of this CNSliceSubnetProfile.  # noqa: E501
        :type resource_sharing_level: SharingLevel
        :param d_l_max_pkt_size: The d_l_max_pkt_size of this CNSliceSubnetProfile.  # noqa: E501
        :type d_l_max_pkt_size: int
        :param u_l_max_pkt_size: The u_l_max_pkt_size of this CNSliceSubnetProfile.  # noqa: E501
        :type u_l_max_pkt_size: int
        :param delay_tolerance: The delay_tolerance of this CNSliceSubnetProfile.  # noqa: E501
        :type delay_tolerance: DelayTolerance
        :param synchronicity: The synchronicity of this CNSliceSubnetProfile.  # noqa: E501
        :type synchronicity: SynchronicityRANSubnet
        :param slice_simultaneous_use: The slice_simultaneous_use of this CNSliceSubnetProfile.  # noqa: E501
        :type slice_simultaneous_use: SliceSimultaneousUse
        :param reliability: The reliability of this CNSliceSubnetProfile.  # noqa: E501
        :type reliability: float
        :param energy_efficiency: The energy_efficiency of this CNSliceSubnetProfile.  # noqa: E501
        :type energy_efficiency: float
        :param d_l_deterministic_comm: The d_l_deterministic_comm of this CNSliceSubnetProfile.  # noqa: E501
        :type d_l_deterministic_comm: DeterministicComm
        :param u_l_deterministic_comm: The u_l_deterministic_comm of this CNSliceSubnetProfile.  # noqa: E501
        :type u_l_deterministic_comm: DeterministicComm
        :param survival_time: The survival_time of this CNSliceSubnetProfile.  # noqa: E501
        :type survival_time: float
        :param nssaa_support: The nssaa_support of this CNSliceSubnetProfile.  # noqa: E501
        :type nssaa_support: NSSAASupport
        :param n6_protection: The n6_protection of this CNSliceSubnetProfile.  # noqa: E501
        :type n6_protection: N6Protection
        """
        self.openapi_types = {
            'max_numberof_ues': int,
            'd_l_latency': float,
            'u_l_latency': float,
            'd_l_thpt_per_slice_subnet': XLThpt,
            'd_l_thpt_per_ue': XLThpt,
            'u_l_thpt_per_slice_subnet': XLThpt,
            'u_l_thpt_per_ue': XLThpt,
            'max_number_of_pdu_sessions': int,
            'coverage_area_ta_list': List[int],
            'resource_sharing_level': SharingLevel,
            'd_l_max_pkt_size': int,
            'u_l_max_pkt_size': int,
            'delay_tolerance': DelayTolerance,
            'synchronicity': SynchronicityRANSubnet,
            'slice_simultaneous_use': SliceSimultaneousUse,
            'reliability': float,
            'energy_efficiency': float,
            'd_l_deterministic_comm': DeterministicComm,
            'u_l_deterministic_comm': DeterministicComm,
            'survival_time': float,
            'nssaa_support': NSSAASupport,
            'n6_protection': N6Protection
        }

        self.attribute_map = {
            'max_numberof_ues': 'maxNumberofUEs',
            'd_l_latency': 'dLLatency',
            'u_l_latency': 'uLLatency',
            'd_l_thpt_per_slice_subnet': 'dLThptPerSliceSubnet',
            'd_l_thpt_per_ue': 'dLThptPerUE',
            'u_l_thpt_per_slice_subnet': 'uLThptPerSliceSubnet',
            'u_l_thpt_per_ue': 'uLThptPerUE',
            'max_number_of_pdu_sessions': 'maxNumberOfPDUSessions',
            'coverage_area_ta_list': 'coverageAreaTAList',
            'resource_sharing_level': 'resourceSharingLevel',
            'd_l_max_pkt_size': 'dLMaxPktSize',
            'u_l_max_pkt_size': 'uLMaxPktSize',
            'delay_tolerance': 'delayTolerance',
            'synchronicity': 'synchronicity',
            'slice_simultaneous_use': 'sliceSimultaneousUse',
            'reliability': 'reliability',
            'energy_efficiency': 'energyEfficiency',
            'd_l_deterministic_comm': 'dLDeterministicComm',
            'u_l_deterministic_comm': 'uLDeterministicComm',
            'survival_time': 'survivalTime',
            'nssaa_support': 'nssaaSupport',
            'n6_protection': 'n6Protection'
        }

        self._max_numberof_ues = max_numberof_ues
        self._d_l_latency = d_l_latency
        self._u_l_latency = u_l_latency
        self._d_l_thpt_per_slice_subnet = d_l_thpt_per_slice_subnet
        self._d_l_thpt_per_ue = d_l_thpt_per_ue
        self._u_l_thpt_per_slice_subnet = u_l_thpt_per_slice_subnet
        self._u_l_thpt_per_ue = u_l_thpt_per_ue
        self._max_number_of_pdu_sessions = max_number_of_pdu_sessions
        self._coverage_area_ta_list = coverage_area_ta_list
        self._resource_sharing_level = resource_sharing_level
        self._d_l_max_pkt_size = d_l_max_pkt_size
        self._u_l_max_pkt_size = u_l_max_pkt_size
        self._delay_tolerance = delay_tolerance
        self._synchronicity = synchronicity
        self._slice_simultaneous_use = slice_simultaneous_use
        self._reliability = reliability
        self._energy_efficiency = energy_efficiency
        self._d_l_deterministic_comm = d_l_deterministic_comm
        self._u_l_deterministic_comm = u_l_deterministic_comm
        self._survival_time = survival_time
        self._nssaa_support = nssaa_support
        self._n6_protection = n6_protection

    @classmethod
    def from_dict(cls, dikt) -> 'CNSliceSubnetProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CNSliceSubnetProfile of this CNSliceSubnetProfile.  # noqa: E501
        :rtype: CNSliceSubnetProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_numberof_ues(self):
        """Gets the max_numberof_ues of this CNSliceSubnetProfile.


        :return: The max_numberof_ues of this CNSliceSubnetProfile.
        :rtype: int
        """
        return self._max_numberof_ues

    @max_numberof_ues.setter
    def max_numberof_ues(self, max_numberof_ues):
        """Sets the max_numberof_ues of this CNSliceSubnetProfile.


        :param max_numberof_ues: The max_numberof_ues of this CNSliceSubnetProfile.
        :type max_numberof_ues: int
        """

        self._max_numberof_ues = max_numberof_ues

    @property
    def d_l_latency(self):
        """Gets the d_l_latency of this CNSliceSubnetProfile.


        :return: The d_l_latency of this CNSliceSubnetProfile.
        :rtype: float
        """
        return self._d_l_latency

    @d_l_latency.setter
    def d_l_latency(self, d_l_latency):
        """Sets the d_l_latency of this CNSliceSubnetProfile.


        :param d_l_latency: The d_l_latency of this CNSliceSubnetProfile.
        :type d_l_latency: float
        """

        self._d_l_latency = d_l_latency

    @property
    def u_l_latency(self):
        """Gets the u_l_latency of this CNSliceSubnetProfile.


        :return: The u_l_latency of this CNSliceSubnetProfile.
        :rtype: float
        """
        return self._u_l_latency

    @u_l_latency.setter
    def u_l_latency(self, u_l_latency):
        """Sets the u_l_latency of this CNSliceSubnetProfile.


        :param u_l_latency: The u_l_latency of this CNSliceSubnetProfile.
        :type u_l_latency: float
        """

        self._u_l_latency = u_l_latency

    @property
    def d_l_thpt_per_slice_subnet(self):
        """Gets the d_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.


        :return: The d_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.
        :rtype: XLThpt
        """
        return self._d_l_thpt_per_slice_subnet

    @d_l_thpt_per_slice_subnet.setter
    def d_l_thpt_per_slice_subnet(self, d_l_thpt_per_slice_subnet):
        """Sets the d_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.


        :param d_l_thpt_per_slice_subnet: The d_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.
        :type d_l_thpt_per_slice_subnet: XLThpt
        """

        self._d_l_thpt_per_slice_subnet = d_l_thpt_per_slice_subnet

    @property
    def d_l_thpt_per_ue(self):
        """Gets the d_l_thpt_per_ue of this CNSliceSubnetProfile.


        :return: The d_l_thpt_per_ue of this CNSliceSubnetProfile.
        :rtype: XLThpt
        """
        return self._d_l_thpt_per_ue

    @d_l_thpt_per_ue.setter
    def d_l_thpt_per_ue(self, d_l_thpt_per_ue):
        """Sets the d_l_thpt_per_ue of this CNSliceSubnetProfile.


        :param d_l_thpt_per_ue: The d_l_thpt_per_ue of this CNSliceSubnetProfile.
        :type d_l_thpt_per_ue: XLThpt
        """

        self._d_l_thpt_per_ue = d_l_thpt_per_ue

    @property
    def u_l_thpt_per_slice_subnet(self):
        """Gets the u_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.


        :return: The u_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.
        :rtype: XLThpt
        """
        return self._u_l_thpt_per_slice_subnet

    @u_l_thpt_per_slice_subnet.setter
    def u_l_thpt_per_slice_subnet(self, u_l_thpt_per_slice_subnet):
        """Sets the u_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.


        :param u_l_thpt_per_slice_subnet: The u_l_thpt_per_slice_subnet of this CNSliceSubnetProfile.
        :type u_l_thpt_per_slice_subnet: XLThpt
        """

        self._u_l_thpt_per_slice_subnet = u_l_thpt_per_slice_subnet

    @property
    def u_l_thpt_per_ue(self):
        """Gets the u_l_thpt_per_ue of this CNSliceSubnetProfile.


        :return: The u_l_thpt_per_ue of this CNSliceSubnetProfile.
        :rtype: XLThpt
        """
        return self._u_l_thpt_per_ue

    @u_l_thpt_per_ue.setter
    def u_l_thpt_per_ue(self, u_l_thpt_per_ue):
        """Sets the u_l_thpt_per_ue of this CNSliceSubnetProfile.


        :param u_l_thpt_per_ue: The u_l_thpt_per_ue of this CNSliceSubnetProfile.
        :type u_l_thpt_per_ue: XLThpt
        """

        self._u_l_thpt_per_ue = u_l_thpt_per_ue

    @property
    def max_number_of_pdu_sessions(self):
        """Gets the max_number_of_pdu_sessions of this CNSliceSubnetProfile.


        :return: The max_number_of_pdu_sessions of this CNSliceSubnetProfile.
        :rtype: int
        """
        return self._max_number_of_pdu_sessions

    @max_number_of_pdu_sessions.setter
    def max_number_of_pdu_sessions(self, max_number_of_pdu_sessions):
        """Sets the max_number_of_pdu_sessions of this CNSliceSubnetProfile.


        :param max_number_of_pdu_sessions: The max_number_of_pdu_sessions of this CNSliceSubnetProfile.
        :type max_number_of_pdu_sessions: int
        """

        self._max_number_of_pdu_sessions = max_number_of_pdu_sessions

    @property
    def coverage_area_ta_list(self):
        """Gets the coverage_area_ta_list of this CNSliceSubnetProfile.


        :return: The coverage_area_ta_list of this CNSliceSubnetProfile.
        :rtype: List[int]
        """
        return self._coverage_area_ta_list

    @coverage_area_ta_list.setter
    def coverage_area_ta_list(self, coverage_area_ta_list):
        """Sets the coverage_area_ta_list of this CNSliceSubnetProfile.


        :param coverage_area_ta_list: The coverage_area_ta_list of this CNSliceSubnetProfile.
        :type coverage_area_ta_list: List[int]
        """

        self._coverage_area_ta_list = coverage_area_ta_list

    @property
    def resource_sharing_level(self):
        """Gets the resource_sharing_level of this CNSliceSubnetProfile.


        :return: The resource_sharing_level of this CNSliceSubnetProfile.
        :rtype: SharingLevel
        """
        return self._resource_sharing_level

    @resource_sharing_level.setter
    def resource_sharing_level(self, resource_sharing_level):
        """Sets the resource_sharing_level of this CNSliceSubnetProfile.


        :param resource_sharing_level: The resource_sharing_level of this CNSliceSubnetProfile.
        :type resource_sharing_level: SharingLevel
        """

        self._resource_sharing_level = resource_sharing_level

    @property
    def d_l_max_pkt_size(self):
        """Gets the d_l_max_pkt_size of this CNSliceSubnetProfile.


        :return: The d_l_max_pkt_size of this CNSliceSubnetProfile.
        :rtype: int
        """
        return self._d_l_max_pkt_size

    @d_l_max_pkt_size.setter
    def d_l_max_pkt_size(self, d_l_max_pkt_size):
        """Sets the d_l_max_pkt_size of this CNSliceSubnetProfile.


        :param d_l_max_pkt_size: The d_l_max_pkt_size of this CNSliceSubnetProfile.
        :type d_l_max_pkt_size: int
        """

        self._d_l_max_pkt_size = d_l_max_pkt_size

    @property
    def u_l_max_pkt_size(self):
        """Gets the u_l_max_pkt_size of this CNSliceSubnetProfile.


        :return: The u_l_max_pkt_size of this CNSliceSubnetProfile.
        :rtype: int
        """
        return self._u_l_max_pkt_size

    @u_l_max_pkt_size.setter
    def u_l_max_pkt_size(self, u_l_max_pkt_size):
        """Sets the u_l_max_pkt_size of this CNSliceSubnetProfile.


        :param u_l_max_pkt_size: The u_l_max_pkt_size of this CNSliceSubnetProfile.
        :type u_l_max_pkt_size: int
        """

        self._u_l_max_pkt_size = u_l_max_pkt_size

    @property
    def delay_tolerance(self):
        """Gets the delay_tolerance of this CNSliceSubnetProfile.


        :return: The delay_tolerance of this CNSliceSubnetProfile.
        :rtype: DelayTolerance
        """
        return self._delay_tolerance

    @delay_tolerance.setter
    def delay_tolerance(self, delay_tolerance):
        """Sets the delay_tolerance of this CNSliceSubnetProfile.


        :param delay_tolerance: The delay_tolerance of this CNSliceSubnetProfile.
        :type delay_tolerance: DelayTolerance
        """

        self._delay_tolerance = delay_tolerance

    @property
    def synchronicity(self):
        """Gets the synchronicity of this CNSliceSubnetProfile.


        :return: The synchronicity of this CNSliceSubnetProfile.
        :rtype: SynchronicityRANSubnet
        """
        return self._synchronicity

    @synchronicity.setter
    def synchronicity(self, synchronicity):
        """Sets the synchronicity of this CNSliceSubnetProfile.


        :param synchronicity: The synchronicity of this CNSliceSubnetProfile.
        :type synchronicity: SynchronicityRANSubnet
        """

        self._synchronicity = synchronicity

    @property
    def slice_simultaneous_use(self):
        """Gets the slice_simultaneous_use of this CNSliceSubnetProfile.


        :return: The slice_simultaneous_use of this CNSliceSubnetProfile.
        :rtype: SliceSimultaneousUse
        """
        return self._slice_simultaneous_use

    @slice_simultaneous_use.setter
    def slice_simultaneous_use(self, slice_simultaneous_use):
        """Sets the slice_simultaneous_use of this CNSliceSubnetProfile.


        :param slice_simultaneous_use: The slice_simultaneous_use of this CNSliceSubnetProfile.
        :type slice_simultaneous_use: SliceSimultaneousUse
        """

        self._slice_simultaneous_use = slice_simultaneous_use

    @property
    def reliability(self):
        """Gets the reliability of this CNSliceSubnetProfile.


        :return: The reliability of this CNSliceSubnetProfile.
        :rtype: float
        """
        return self._reliability

    @reliability.setter
    def reliability(self, reliability):
        """Sets the reliability of this CNSliceSubnetProfile.


        :param reliability: The reliability of this CNSliceSubnetProfile.
        :type reliability: float
        """

        self._reliability = reliability

    @property
    def energy_efficiency(self):
        """Gets the energy_efficiency of this CNSliceSubnetProfile.


        :return: The energy_efficiency of this CNSliceSubnetProfile.
        :rtype: float
        """
        return self._energy_efficiency

    @energy_efficiency.setter
    def energy_efficiency(self, energy_efficiency):
        """Sets the energy_efficiency of this CNSliceSubnetProfile.


        :param energy_efficiency: The energy_efficiency of this CNSliceSubnetProfile.
        :type energy_efficiency: float
        """

        self._energy_efficiency = energy_efficiency

    @property
    def d_l_deterministic_comm(self):
        """Gets the d_l_deterministic_comm of this CNSliceSubnetProfile.


        :return: The d_l_deterministic_comm of this CNSliceSubnetProfile.
        :rtype: DeterministicComm
        """
        return self._d_l_deterministic_comm

    @d_l_deterministic_comm.setter
    def d_l_deterministic_comm(self, d_l_deterministic_comm):
        """Sets the d_l_deterministic_comm of this CNSliceSubnetProfile.


        :param d_l_deterministic_comm: The d_l_deterministic_comm of this CNSliceSubnetProfile.
        :type d_l_deterministic_comm: DeterministicComm
        """

        self._d_l_deterministic_comm = d_l_deterministic_comm

    @property
    def u_l_deterministic_comm(self):
        """Gets the u_l_deterministic_comm of this CNSliceSubnetProfile.


        :return: The u_l_deterministic_comm of this CNSliceSubnetProfile.
        :rtype: DeterministicComm
        """
        return self._u_l_deterministic_comm

    @u_l_deterministic_comm.setter
    def u_l_deterministic_comm(self, u_l_deterministic_comm):
        """Sets the u_l_deterministic_comm of this CNSliceSubnetProfile.


        :param u_l_deterministic_comm: The u_l_deterministic_comm of this CNSliceSubnetProfile.
        :type u_l_deterministic_comm: DeterministicComm
        """

        self._u_l_deterministic_comm = u_l_deterministic_comm

    @property
    def survival_time(self):
        """Gets the survival_time of this CNSliceSubnetProfile.


        :return: The survival_time of this CNSliceSubnetProfile.
        :rtype: float
        """
        return self._survival_time

    @survival_time.setter
    def survival_time(self, survival_time):
        """Sets the survival_time of this CNSliceSubnetProfile.


        :param survival_time: The survival_time of this CNSliceSubnetProfile.
        :type survival_time: float
        """

        self._survival_time = survival_time

    @property
    def nssaa_support(self):
        """Gets the nssaa_support of this CNSliceSubnetProfile.


        :return: The nssaa_support of this CNSliceSubnetProfile.
        :rtype: NSSAASupport
        """
        return self._nssaa_support

    @nssaa_support.setter
    def nssaa_support(self, nssaa_support):
        """Sets the nssaa_support of this CNSliceSubnetProfile.


        :param nssaa_support: The nssaa_support of this CNSliceSubnetProfile.
        :type nssaa_support: NSSAASupport
        """

        self._nssaa_support = nssaa_support

    @property
    def n6_protection(self):
        """Gets the n6_protection of this CNSliceSubnetProfile.


        :return: The n6_protection of this CNSliceSubnetProfile.
        :rtype: N6Protection
        """
        return self._n6_protection

    @n6_protection.setter
    def n6_protection(self, n6_protection):
        """Sets the n6_protection of this CNSliceSubnetProfile.


        :param n6_protection: The n6_protection of this CNSliceSubnetProfile.
        :type n6_protection: N6Protection
        """

        self._n6_protection = n6_protection
