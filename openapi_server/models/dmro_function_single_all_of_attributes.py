# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DMROFunctionSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dmro_control=None, maximum_deviation_ho_trigger_low=None, maximum_deviation_ho_trigger_high=None, minimum_time_between_ho_trigger_change=None, tstore_u_ecntxt=None):  # noqa: E501
        """DMROFunctionSingleAllOfAttributes - a model defined in OpenAPI

        :param dmro_control: The dmro_control of this DMROFunctionSingleAllOfAttributes.  # noqa: E501
        :type dmro_control: bool
        :param maximum_deviation_ho_trigger_low: The maximum_deviation_ho_trigger_low of this DMROFunctionSingleAllOfAttributes.  # noqa: E501
        :type maximum_deviation_ho_trigger_low: int
        :param maximum_deviation_ho_trigger_high: The maximum_deviation_ho_trigger_high of this DMROFunctionSingleAllOfAttributes.  # noqa: E501
        :type maximum_deviation_ho_trigger_high: int
        :param minimum_time_between_ho_trigger_change: The minimum_time_between_ho_trigger_change of this DMROFunctionSingleAllOfAttributes.  # noqa: E501
        :type minimum_time_between_ho_trigger_change: int
        :param tstore_u_ecntxt: The tstore_u_ecntxt of this DMROFunctionSingleAllOfAttributes.  # noqa: E501
        :type tstore_u_ecntxt: int
        """
        self.openapi_types = {
            'dmro_control': bool,
            'maximum_deviation_ho_trigger_low': int,
            'maximum_deviation_ho_trigger_high': int,
            'minimum_time_between_ho_trigger_change': int,
            'tstore_u_ecntxt': int
        }

        self.attribute_map = {
            'dmro_control': 'dmroControl',
            'maximum_deviation_ho_trigger_low': 'maximumDeviationHoTriggerLow',
            'maximum_deviation_ho_trigger_high': 'maximumDeviationHoTriggerHigh',
            'minimum_time_between_ho_trigger_change': 'minimumTimeBetweenHoTriggerChange',
            'tstore_u_ecntxt': 'tstoreUEcntxt'
        }

        self._dmro_control = dmro_control
        self._maximum_deviation_ho_trigger_low = maximum_deviation_ho_trigger_low
        self._maximum_deviation_ho_trigger_high = maximum_deviation_ho_trigger_high
        self._minimum_time_between_ho_trigger_change = minimum_time_between_ho_trigger_change
        self._tstore_u_ecntxt = tstore_u_ecntxt

    @classmethod
    def from_dict(cls, dikt) -> 'DMROFunctionSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DMROFunction_Single_allOf_attributes of this DMROFunctionSingleAllOfAttributes.  # noqa: E501
        :rtype: DMROFunctionSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dmro_control(self):
        """Gets the dmro_control of this DMROFunctionSingleAllOfAttributes.


        :return: The dmro_control of this DMROFunctionSingleAllOfAttributes.
        :rtype: bool
        """
        return self._dmro_control

    @dmro_control.setter
    def dmro_control(self, dmro_control):
        """Sets the dmro_control of this DMROFunctionSingleAllOfAttributes.


        :param dmro_control: The dmro_control of this DMROFunctionSingleAllOfAttributes.
        :type dmro_control: bool
        """

        self._dmro_control = dmro_control

    @property
    def maximum_deviation_ho_trigger_low(self):
        """Gets the maximum_deviation_ho_trigger_low of this DMROFunctionSingleAllOfAttributes.


        :return: The maximum_deviation_ho_trigger_low of this DMROFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._maximum_deviation_ho_trigger_low

    @maximum_deviation_ho_trigger_low.setter
    def maximum_deviation_ho_trigger_low(self, maximum_deviation_ho_trigger_low):
        """Sets the maximum_deviation_ho_trigger_low of this DMROFunctionSingleAllOfAttributes.


        :param maximum_deviation_ho_trigger_low: The maximum_deviation_ho_trigger_low of this DMROFunctionSingleAllOfAttributes.
        :type maximum_deviation_ho_trigger_low: int
        """
        if maximum_deviation_ho_trigger_low is not None and maximum_deviation_ho_trigger_low > 20:  # noqa: E501
            raise ValueError("Invalid value for `maximum_deviation_ho_trigger_low`, must be a value less than or equal to `20`")  # noqa: E501
        if maximum_deviation_ho_trigger_low is not None and maximum_deviation_ho_trigger_low < -20:  # noqa: E501
            raise ValueError("Invalid value for `maximum_deviation_ho_trigger_low`, must be a value greater than or equal to `-20`")  # noqa: E501

        self._maximum_deviation_ho_trigger_low = maximum_deviation_ho_trigger_low

    @property
    def maximum_deviation_ho_trigger_high(self):
        """Gets the maximum_deviation_ho_trigger_high of this DMROFunctionSingleAllOfAttributes.


        :return: The maximum_deviation_ho_trigger_high of this DMROFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._maximum_deviation_ho_trigger_high

    @maximum_deviation_ho_trigger_high.setter
    def maximum_deviation_ho_trigger_high(self, maximum_deviation_ho_trigger_high):
        """Sets the maximum_deviation_ho_trigger_high of this DMROFunctionSingleAllOfAttributes.


        :param maximum_deviation_ho_trigger_high: The maximum_deviation_ho_trigger_high of this DMROFunctionSingleAllOfAttributes.
        :type maximum_deviation_ho_trigger_high: int
        """
        if maximum_deviation_ho_trigger_high is not None and maximum_deviation_ho_trigger_high > 20:  # noqa: E501
            raise ValueError("Invalid value for `maximum_deviation_ho_trigger_high`, must be a value less than or equal to `20`")  # noqa: E501
        if maximum_deviation_ho_trigger_high is not None and maximum_deviation_ho_trigger_high < -20:  # noqa: E501
            raise ValueError("Invalid value for `maximum_deviation_ho_trigger_high`, must be a value greater than or equal to `-20`")  # noqa: E501

        self._maximum_deviation_ho_trigger_high = maximum_deviation_ho_trigger_high

    @property
    def minimum_time_between_ho_trigger_change(self):
        """Gets the minimum_time_between_ho_trigger_change of this DMROFunctionSingleAllOfAttributes.


        :return: The minimum_time_between_ho_trigger_change of this DMROFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._minimum_time_between_ho_trigger_change

    @minimum_time_between_ho_trigger_change.setter
    def minimum_time_between_ho_trigger_change(self, minimum_time_between_ho_trigger_change):
        """Sets the minimum_time_between_ho_trigger_change of this DMROFunctionSingleAllOfAttributes.


        :param minimum_time_between_ho_trigger_change: The minimum_time_between_ho_trigger_change of this DMROFunctionSingleAllOfAttributes.
        :type minimum_time_between_ho_trigger_change: int
        """
        if minimum_time_between_ho_trigger_change is not None and minimum_time_between_ho_trigger_change > 604800:  # noqa: E501
            raise ValueError("Invalid value for `minimum_time_between_ho_trigger_change`, must be a value less than or equal to `604800`")  # noqa: E501
        if minimum_time_between_ho_trigger_change is not None and minimum_time_between_ho_trigger_change < 0:  # noqa: E501
            raise ValueError("Invalid value for `minimum_time_between_ho_trigger_change`, must be a value greater than or equal to `0`")  # noqa: E501

        self._minimum_time_between_ho_trigger_change = minimum_time_between_ho_trigger_change

    @property
    def tstore_u_ecntxt(self):
        """Gets the tstore_u_ecntxt of this DMROFunctionSingleAllOfAttributes.


        :return: The tstore_u_ecntxt of this DMROFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._tstore_u_ecntxt

    @tstore_u_ecntxt.setter
    def tstore_u_ecntxt(self, tstore_u_ecntxt):
        """Sets the tstore_u_ecntxt of this DMROFunctionSingleAllOfAttributes.


        :param tstore_u_ecntxt: The tstore_u_ecntxt of this DMROFunctionSingleAllOfAttributes.
        :type tstore_u_ecntxt: int
        """
        if tstore_u_ecntxt is not None and tstore_u_ecntxt > 1023:  # noqa: E501
            raise ValueError("Invalid value for `tstore_u_ecntxt`, must be a value less than or equal to `1023`")  # noqa: E501
        if tstore_u_ecntxt is not None and tstore_u_ecntxt < 0:  # noqa: E501
            raise ValueError("Invalid value for `tstore_u_ecntxt`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tstore_u_ecntxt = tstore_u_ecntxt
