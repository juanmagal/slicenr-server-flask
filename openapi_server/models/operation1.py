# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nf_type import NFType
from openapi_server.models.operation_semantics import OperationSemantics
from openapi_server import util

from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.operation_semantics import OperationSemantics  # noqa: E501

class Operation1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, allowed_nf_types=None, operation_semantics=None):  # noqa: E501
        """Operation1 - a model defined in OpenAPI

        :param name: The name of this Operation1.  # noqa: E501
        :type name: str
        :param allowed_nf_types: The allowed_nf_types of this Operation1.  # noqa: E501
        :type allowed_nf_types: NFType
        :param operation_semantics: The operation_semantics of this Operation1.  # noqa: E501
        :type operation_semantics: OperationSemantics
        """
        self.openapi_types = {
            'name': str,
            'allowed_nf_types': NFType,
            'operation_semantics': OperationSemantics
        }

        self.attribute_map = {
            'name': 'name',
            'allowed_nf_types': 'allowedNFTypes',
            'operation_semantics': 'operationSemantics'
        }

        self._name = name
        self._allowed_nf_types = allowed_nf_types
        self._operation_semantics = operation_semantics

    @classmethod
    def from_dict(cls, dikt) -> 'Operation1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Operation_1 of this Operation1.  # noqa: E501
        :rtype: Operation1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Operation1.


        :return: The name of this Operation1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operation1.


        :param name: The name of this Operation1.
        :type name: str
        """

        self._name = name

    @property
    def allowed_nf_types(self):
        """Gets the allowed_nf_types of this Operation1.


        :return: The allowed_nf_types of this Operation1.
        :rtype: NFType
        """
        return self._allowed_nf_types

    @allowed_nf_types.setter
    def allowed_nf_types(self, allowed_nf_types):
        """Sets the allowed_nf_types of this Operation1.


        :param allowed_nf_types: The allowed_nf_types of this Operation1.
        :type allowed_nf_types: NFType
        """

        self._allowed_nf_types = allowed_nf_types

    @property
    def operation_semantics(self):
        """Gets the operation_semantics of this Operation1.


        :return: The operation_semantics of this Operation1.
        :rtype: OperationSemantics
        """
        return self._operation_semantics

    @operation_semantics.setter
    def operation_semantics(self, operation_semantics):
        """Sets the operation_semantics of this Operation1.


        :param operation_semantics: The operation_semantics of this Operation1.
        :type operation_semantics: OperationSemantics
        """

        self._operation_semantics = operation_semantics
