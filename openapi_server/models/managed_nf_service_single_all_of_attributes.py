# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.administrative_state import AdministrativeState
from openapi_server.models.nf_service_type import NFServiceType
from openapi_server.models.operation1 import Operation1
from openapi_server.models.operational_state import OperationalState
from openapi_server.models.registration_state import RegistrationState
from openapi_server.models.sap import SAP
from openapi_server.models.usage_state import UsageState
from openapi_server import util

from openapi_server.models.administrative_state import AdministrativeState  # noqa: E501
from openapi_server.models.nf_service_type import NFServiceType  # noqa: E501
from openapi_server.models.operation1 import Operation1  # noqa: E501
from openapi_server.models.operational_state import OperationalState  # noqa: E501
from openapi_server.models.registration_state import RegistrationState  # noqa: E501
from openapi_server.models.sap import SAP  # noqa: E501
from openapi_server.models.usage_state import UsageState  # noqa: E501

class ManagedNFServiceSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_label=None, n_f_service_type=None, s_ap=None, operations=None, administrative_state=None, operational_state=None, usage_state=None, registration_state=None):  # noqa: E501
        """ManagedNFServiceSingleAllOfAttributes - a model defined in OpenAPI

        :param user_label: The user_label of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type user_label: str
        :param n_f_service_type: The n_f_service_type of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type n_f_service_type: NFServiceType
        :param s_ap: The s_ap of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type s_ap: SAP
        :param operations: The operations of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type operations: List[Operation1]
        :param administrative_state: The administrative_state of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type administrative_state: AdministrativeState
        :param operational_state: The operational_state of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type operational_state: OperationalState
        :param usage_state: The usage_state of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type usage_state: UsageState
        :param registration_state: The registration_state of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :type registration_state: RegistrationState
        """
        self.openapi_types = {
            'user_label': str,
            'n_f_service_type': NFServiceType,
            's_ap': SAP,
            'operations': List[Operation1],
            'administrative_state': AdministrativeState,
            'operational_state': OperationalState,
            'usage_state': UsageState,
            'registration_state': RegistrationState
        }

        self.attribute_map = {
            'user_label': 'userLabel',
            'n_f_service_type': 'nFServiceType',
            's_ap': 'sAP',
            'operations': 'operations',
            'administrative_state': 'administrativeState',
            'operational_state': 'operationalState',
            'usage_state': 'usageState',
            'registration_state': 'registrationState'
        }

        self._user_label = user_label
        self._n_f_service_type = n_f_service_type
        self._s_ap = s_ap
        self._operations = operations
        self._administrative_state = administrative_state
        self._operational_state = operational_state
        self._usage_state = usage_state
        self._registration_state = registration_state

    @classmethod
    def from_dict(cls, dikt) -> 'ManagedNFServiceSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManagedNFService_Single_allOf_attributes of this ManagedNFServiceSingleAllOfAttributes.  # noqa: E501
        :rtype: ManagedNFServiceSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_label(self):
        """Gets the user_label of this ManagedNFServiceSingleAllOfAttributes.


        :return: The user_label of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """Sets the user_label of this ManagedNFServiceSingleAllOfAttributes.


        :param user_label: The user_label of this ManagedNFServiceSingleAllOfAttributes.
        :type user_label: str
        """

        self._user_label = user_label

    @property
    def n_f_service_type(self):
        """Gets the n_f_service_type of this ManagedNFServiceSingleAllOfAttributes.


        :return: The n_f_service_type of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: NFServiceType
        """
        return self._n_f_service_type

    @n_f_service_type.setter
    def n_f_service_type(self, n_f_service_type):
        """Sets the n_f_service_type of this ManagedNFServiceSingleAllOfAttributes.


        :param n_f_service_type: The n_f_service_type of this ManagedNFServiceSingleAllOfAttributes.
        :type n_f_service_type: NFServiceType
        """

        self._n_f_service_type = n_f_service_type

    @property
    def s_ap(self):
        """Gets the s_ap of this ManagedNFServiceSingleAllOfAttributes.


        :return: The s_ap of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: SAP
        """
        return self._s_ap

    @s_ap.setter
    def s_ap(self, s_ap):
        """Sets the s_ap of this ManagedNFServiceSingleAllOfAttributes.


        :param s_ap: The s_ap of this ManagedNFServiceSingleAllOfAttributes.
        :type s_ap: SAP
        """

        self._s_ap = s_ap

    @property
    def operations(self):
        """Gets the operations of this ManagedNFServiceSingleAllOfAttributes.


        :return: The operations of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: List[Operation1]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this ManagedNFServiceSingleAllOfAttributes.


        :param operations: The operations of this ManagedNFServiceSingleAllOfAttributes.
        :type operations: List[Operation1]
        """

        self._operations = operations

    @property
    def administrative_state(self):
        """Gets the administrative_state of this ManagedNFServiceSingleAllOfAttributes.


        :return: The administrative_state of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: AdministrativeState
        """
        return self._administrative_state

    @administrative_state.setter
    def administrative_state(self, administrative_state):
        """Sets the administrative_state of this ManagedNFServiceSingleAllOfAttributes.


        :param administrative_state: The administrative_state of this ManagedNFServiceSingleAllOfAttributes.
        :type administrative_state: AdministrativeState
        """

        self._administrative_state = administrative_state

    @property
    def operational_state(self):
        """Gets the operational_state of this ManagedNFServiceSingleAllOfAttributes.


        :return: The operational_state of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: OperationalState
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this ManagedNFServiceSingleAllOfAttributes.


        :param operational_state: The operational_state of this ManagedNFServiceSingleAllOfAttributes.
        :type operational_state: OperationalState
        """

        self._operational_state = operational_state

    @property
    def usage_state(self):
        """Gets the usage_state of this ManagedNFServiceSingleAllOfAttributes.


        :return: The usage_state of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: UsageState
        """
        return self._usage_state

    @usage_state.setter
    def usage_state(self, usage_state):
        """Sets the usage_state of this ManagedNFServiceSingleAllOfAttributes.


        :param usage_state: The usage_state of this ManagedNFServiceSingleAllOfAttributes.
        :type usage_state: UsageState
        """

        self._usage_state = usage_state

    @property
    def registration_state(self):
        """Gets the registration_state of this ManagedNFServiceSingleAllOfAttributes.


        :return: The registration_state of this ManagedNFServiceSingleAllOfAttributes.
        :rtype: RegistrationState
        """
        return self._registration_state

    @registration_state.setter
    def registration_state(self, registration_state):
        """Sets the registration_state of this ManagedNFServiceSingleAllOfAttributes.


        :param registration_state: The registration_state of this ManagedNFServiceSingleAllOfAttributes.
        :type registration_state: RegistrationState
        """

        self._registration_state = registration_state
