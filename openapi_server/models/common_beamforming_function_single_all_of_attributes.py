# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CommonBeamformingFunctionSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coverage_shape=None, digital_azimuth=None, digital_tilt=None):  # noqa: E501
        """CommonBeamformingFunctionSingleAllOfAttributes - a model defined in OpenAPI

        :param coverage_shape: The coverage_shape of this CommonBeamformingFunctionSingleAllOfAttributes.  # noqa: E501
        :type coverage_shape: int
        :param digital_azimuth: The digital_azimuth of this CommonBeamformingFunctionSingleAllOfAttributes.  # noqa: E501
        :type digital_azimuth: int
        :param digital_tilt: The digital_tilt of this CommonBeamformingFunctionSingleAllOfAttributes.  # noqa: E501
        :type digital_tilt: int
        """
        self.openapi_types = {
            'coverage_shape': int,
            'digital_azimuth': int,
            'digital_tilt': int
        }

        self.attribute_map = {
            'coverage_shape': 'coverageShape',
            'digital_azimuth': 'digitalAzimuth',
            'digital_tilt': 'digitalTilt'
        }

        self._coverage_shape = coverage_shape
        self._digital_azimuth = digital_azimuth
        self._digital_tilt = digital_tilt

    @classmethod
    def from_dict(cls, dikt) -> 'CommonBeamformingFunctionSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CommonBeamformingFunction_Single_allOf_attributes of this CommonBeamformingFunctionSingleAllOfAttributes.  # noqa: E501
        :rtype: CommonBeamformingFunctionSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coverage_shape(self):
        """Gets the coverage_shape of this CommonBeamformingFunctionSingleAllOfAttributes.


        :return: The coverage_shape of this CommonBeamformingFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._coverage_shape

    @coverage_shape.setter
    def coverage_shape(self, coverage_shape):
        """Sets the coverage_shape of this CommonBeamformingFunctionSingleAllOfAttributes.


        :param coverage_shape: The coverage_shape of this CommonBeamformingFunctionSingleAllOfAttributes.
        :type coverage_shape: int
        """
        if coverage_shape is not None and coverage_shape > 65535:  # noqa: E501
            raise ValueError("Invalid value for `coverage_shape`, must be a value less than or equal to `65535`")  # noqa: E501

        self._coverage_shape = coverage_shape

    @property
    def digital_azimuth(self):
        """Gets the digital_azimuth of this CommonBeamformingFunctionSingleAllOfAttributes.


        :return: The digital_azimuth of this CommonBeamformingFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._digital_azimuth

    @digital_azimuth.setter
    def digital_azimuth(self, digital_azimuth):
        """Sets the digital_azimuth of this CommonBeamformingFunctionSingleAllOfAttributes.


        :param digital_azimuth: The digital_azimuth of this CommonBeamformingFunctionSingleAllOfAttributes.
        :type digital_azimuth: int
        """
        if digital_azimuth is not None and digital_azimuth > 1800:  # noqa: E501
            raise ValueError("Invalid value for `digital_azimuth`, must be a value less than or equal to `1800`")  # noqa: E501
        if digital_azimuth is not None and digital_azimuth < -1800:  # noqa: E501
            raise ValueError("Invalid value for `digital_azimuth`, must be a value greater than or equal to `-1800`")  # noqa: E501

        self._digital_azimuth = digital_azimuth

    @property
    def digital_tilt(self):
        """Gets the digital_tilt of this CommonBeamformingFunctionSingleAllOfAttributes.


        :return: The digital_tilt of this CommonBeamformingFunctionSingleAllOfAttributes.
        :rtype: int
        """
        return self._digital_tilt

    @digital_tilt.setter
    def digital_tilt(self, digital_tilt):
        """Sets the digital_tilt of this CommonBeamformingFunctionSingleAllOfAttributes.


        :param digital_tilt: The digital_tilt of this CommonBeamformingFunctionSingleAllOfAttributes.
        :type digital_tilt: int
        """
        if digital_tilt is not None and digital_tilt > 900:  # noqa: E501
            raise ValueError("Invalid value for `digital_tilt`, must be a value less than or equal to `900`")  # noqa: E501
        if digital_tilt is not None and digital_tilt < -900:  # noqa: E501
            raise ValueError("Invalid value for `digital_tilt`, must be a value greater than or equal to `-900`")  # noqa: E501

        self._digital_tilt = digital_tilt
