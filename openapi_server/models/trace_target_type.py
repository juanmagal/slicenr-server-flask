# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TraceTargetType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_id_type=None, target_id_value=None):  # noqa: E501
        """TraceTargetType - a model defined in OpenAPI

        :param target_id_type: The target_id_type of this TraceTargetType.  # noqa: E501
        :type target_id_type: str
        :param target_id_value: The target_id_value of this TraceTargetType.  # noqa: E501
        :type target_id_value: str
        """
        self.openapi_types = {
            'target_id_type': str,
            'target_id_value': str
        }

        self.attribute_map = {
            'target_id_type': 'TargetIdType',
            'target_id_value': 'TargetIdValue'
        }

        self._target_id_type = target_id_type
        self._target_id_value = target_id_value

    @classmethod
    def from_dict(cls, dikt) -> 'TraceTargetType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The traceTarget-Type of this TraceTargetType.  # noqa: E501
        :rtype: TraceTargetType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_id_type(self):
        """Gets the target_id_type of this TraceTargetType.


        :return: The target_id_type of this TraceTargetType.
        :rtype: str
        """
        return self._target_id_type

    @target_id_type.setter
    def target_id_type(self, target_id_type):
        """Sets the target_id_type of this TraceTargetType.


        :param target_id_type: The target_id_type of this TraceTargetType.
        :type target_id_type: str
        """
        allowed_values = ["IMSI", "IMEI", "IMEISV", "PUBLIC_ID", "UTRAN_CELL", "E-UTRAN_CELL", "NG-RAN_CELL", "eNB", "RNC", "gNB", "SUPI"]  # noqa: E501
        if target_id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_id_type` ({0}), must be one of {1}"
                .format(target_id_type, allowed_values)
            )

        self._target_id_type = target_id_type

    @property
    def target_id_value(self):
        """Gets the target_id_value of this TraceTargetType.


        :return: The target_id_value of this TraceTargetType.
        :rtype: str
        """
        return self._target_id_value

    @target_id_value.setter
    def target_id_value(self, target_id_value):
        """Sets the target_id_value of this TraceTargetType.


        :param target_id_value: The target_id_value of this TraceTargetType.
        :type target_id_value: str
        """
        if target_id_value is None:
            raise ValueError("Invalid value for `target_id_value`, must not be `None`")  # noqa: E501

        self._target_id_value = target_id_value
