# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.correlated_notification import CorrelatedNotification
from openapi_server.models.source_indicator import SourceIndicator
from openapi_server import util

from openapi_server.models.correlated_notification import CorrelatedNotification  # noqa: E501
from openapi_server.models.source_indicator import SourceIndicator  # noqa: E501

class NotifyMoiAttributeValueChangesAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlated_notifications=None, additional_text=None, source_indicator=None, attribute_list_value_changes=None):  # noqa: E501
        """NotifyMoiAttributeValueChangesAllOf - a model defined in OpenAPI

        :param correlated_notifications: The correlated_notifications of this NotifyMoiAttributeValueChangesAllOf.  # noqa: E501
        :type correlated_notifications: List[CorrelatedNotification]
        :param additional_text: The additional_text of this NotifyMoiAttributeValueChangesAllOf.  # noqa: E501
        :type additional_text: str
        :param source_indicator: The source_indicator of this NotifyMoiAttributeValueChangesAllOf.  # noqa: E501
        :type source_indicator: SourceIndicator
        :param attribute_list_value_changes: The attribute_list_value_changes of this NotifyMoiAttributeValueChangesAllOf.  # noqa: E501
        :type attribute_list_value_changes: List[Dict]
        """
        self.openapi_types = {
            'correlated_notifications': List[CorrelatedNotification],
            'additional_text': str,
            'source_indicator': SourceIndicator,
            'attribute_list_value_changes': List[Dict]
        }

        self.attribute_map = {
            'correlated_notifications': 'correlatedNotifications',
            'additional_text': 'additionalText',
            'source_indicator': 'sourceIndicator',
            'attribute_list_value_changes': 'attributeListValueChanges'
        }

        self._correlated_notifications = correlated_notifications
        self._additional_text = additional_text
        self._source_indicator = source_indicator
        self._attribute_list_value_changes = attribute_list_value_changes

    @classmethod
    def from_dict(cls, dikt) -> 'NotifyMoiAttributeValueChangesAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotifyMoiAttributeValueChanges_allOf of this NotifyMoiAttributeValueChangesAllOf.  # noqa: E501
        :rtype: NotifyMoiAttributeValueChangesAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlated_notifications(self):
        """Gets the correlated_notifications of this NotifyMoiAttributeValueChangesAllOf.


        :return: The correlated_notifications of this NotifyMoiAttributeValueChangesAllOf.
        :rtype: List[CorrelatedNotification]
        """
        return self._correlated_notifications

    @correlated_notifications.setter
    def correlated_notifications(self, correlated_notifications):
        """Sets the correlated_notifications of this NotifyMoiAttributeValueChangesAllOf.


        :param correlated_notifications: The correlated_notifications of this NotifyMoiAttributeValueChangesAllOf.
        :type correlated_notifications: List[CorrelatedNotification]
        """

        self._correlated_notifications = correlated_notifications

    @property
    def additional_text(self):
        """Gets the additional_text of this NotifyMoiAttributeValueChangesAllOf.


        :return: The additional_text of this NotifyMoiAttributeValueChangesAllOf.
        :rtype: str
        """
        return self._additional_text

    @additional_text.setter
    def additional_text(self, additional_text):
        """Sets the additional_text of this NotifyMoiAttributeValueChangesAllOf.


        :param additional_text: The additional_text of this NotifyMoiAttributeValueChangesAllOf.
        :type additional_text: str
        """

        self._additional_text = additional_text

    @property
    def source_indicator(self):
        """Gets the source_indicator of this NotifyMoiAttributeValueChangesAllOf.


        :return: The source_indicator of this NotifyMoiAttributeValueChangesAllOf.
        :rtype: SourceIndicator
        """
        return self._source_indicator

    @source_indicator.setter
    def source_indicator(self, source_indicator):
        """Sets the source_indicator of this NotifyMoiAttributeValueChangesAllOf.


        :param source_indicator: The source_indicator of this NotifyMoiAttributeValueChangesAllOf.
        :type source_indicator: SourceIndicator
        """

        self._source_indicator = source_indicator

    @property
    def attribute_list_value_changes(self):
        """Gets the attribute_list_value_changes of this NotifyMoiAttributeValueChangesAllOf.

        The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.  # noqa: E501

        :return: The attribute_list_value_changes of this NotifyMoiAttributeValueChangesAllOf.
        :rtype: List[Dict]
        """
        return self._attribute_list_value_changes

    @attribute_list_value_changes.setter
    def attribute_list_value_changes(self, attribute_list_value_changes):
        """Sets the attribute_list_value_changes of this NotifyMoiAttributeValueChangesAllOf.

        The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.  # noqa: E501

        :param attribute_list_value_changes: The attribute_list_value_changes of this NotifyMoiAttributeValueChangesAllOf.
        :type attribute_list_value_changes: List[Dict]
        """
        if attribute_list_value_changes is None:
            raise ValueError("Invalid value for `attribute_list_value_changes`, must not be `None`")  # noqa: E501
        if attribute_list_value_changes is not None and len(attribute_list_value_changes) > 2:
            raise ValueError("Invalid value for `attribute_list_value_changes`, number of items must be less than or equal to `2`")  # noqa: E501
        if attribute_list_value_changes is not None and len(attribute_list_value_changes) < 1:
            raise ValueError("Invalid value for `attribute_list_value_changes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._attribute_list_value_changes = attribute_list_value_changes
