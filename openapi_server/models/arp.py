# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.preemption_capability import PreemptionCapability
from openapi_server.models.preemption_vulnerability import PreemptionVulnerability
from openapi_server import util

from openapi_server.models.preemption_capability import PreemptionCapability  # noqa: E501
from openapi_server.models.preemption_vulnerability import PreemptionVulnerability  # noqa: E501

class Arp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority_level=None, preempt_cap=None, preempt_vuln=None):  # noqa: E501
        """Arp - a model defined in OpenAPI

        :param priority_level: The priority_level of this Arp.  # noqa: E501
        :type priority_level: int
        :param preempt_cap: The preempt_cap of this Arp.  # noqa: E501
        :type preempt_cap: PreemptionCapability
        :param preempt_vuln: The preempt_vuln of this Arp.  # noqa: E501
        :type preempt_vuln: PreemptionVulnerability
        """
        self.openapi_types = {
            'priority_level': int,
            'preempt_cap': PreemptionCapability,
            'preempt_vuln': PreemptionVulnerability
        }

        self.attribute_map = {
            'priority_level': 'priorityLevel',
            'preempt_cap': 'preemptCap',
            'preempt_vuln': 'preemptVuln'
        }

        self._priority_level = priority_level
        self._preempt_cap = preempt_cap
        self._preempt_vuln = preempt_vuln

    @classmethod
    def from_dict(cls, dikt) -> 'Arp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Arp of this Arp.  # noqa: E501
        :rtype: Arp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority_level(self):
        """Gets the priority_level of this Arp.

        nullable true shall not be used for this attribute. Unsigned integer indicating the ARP Priority Level (see clause 5.7.2.2 of 3GPP TS 23.501, within the range 1 to 15.Values are ordered in decreasing order of priority, i.e. with 1 as the highest priority and 15 as the lowest priority.    # noqa: E501

        :return: The priority_level of this Arp.
        :rtype: int
        """
        return self._priority_level

    @priority_level.setter
    def priority_level(self, priority_level):
        """Sets the priority_level of this Arp.

        nullable true shall not be used for this attribute. Unsigned integer indicating the ARP Priority Level (see clause 5.7.2.2 of 3GPP TS 23.501, within the range 1 to 15.Values are ordered in decreasing order of priority, i.e. with 1 as the highest priority and 15 as the lowest priority.    # noqa: E501

        :param priority_level: The priority_level of this Arp.
        :type priority_level: int
        """
        if priority_level is None:
            raise ValueError("Invalid value for `priority_level`, must not be `None`")  # noqa: E501
        if priority_level is not None and priority_level > 15:  # noqa: E501
            raise ValueError("Invalid value for `priority_level`, must be a value less than or equal to `15`")  # noqa: E501
        if priority_level is not None and priority_level < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority_level`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority_level = priority_level

    @property
    def preempt_cap(self):
        """Gets the preempt_cap of this Arp.


        :return: The preempt_cap of this Arp.
        :rtype: PreemptionCapability
        """
        return self._preempt_cap

    @preempt_cap.setter
    def preempt_cap(self, preempt_cap):
        """Sets the preempt_cap of this Arp.


        :param preempt_cap: The preempt_cap of this Arp.
        :type preempt_cap: PreemptionCapability
        """
        if preempt_cap is None:
            raise ValueError("Invalid value for `preempt_cap`, must not be `None`")  # noqa: E501

        self._preempt_cap = preempt_cap

    @property
    def preempt_vuln(self):
        """Gets the preempt_vuln of this Arp.


        :return: The preempt_vuln of this Arp.
        :rtype: PreemptionVulnerability
        """
        return self._preempt_vuln

    @preempt_vuln.setter
    def preempt_vuln(self, preempt_vuln):
        """Sets the preempt_vuln of this Arp.


        :param preempt_vuln: The preempt_vuln of this Arp.
        :type preempt_vuln: PreemptionVulnerability
        """
        if preempt_vuln is None:
            raise ValueError("Invalid value for `preempt_vuln`, must not be `None`")  # noqa: E501

        self._preempt_vuln = preempt_vuln
