# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.area_of_interest import AreaOfInterest
from openapi_server import util

from openapi_server.models.area_of_interest import AreaOfInterest  # noqa: E501

class NodeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_of_interest=None, network_domain=None, cp_up_type=None, sst=None):  # noqa: E501
        """NodeFilter - a model defined in OpenAPI

        :param area_of_interest: The area_of_interest of this NodeFilter.  # noqa: E501
        :type area_of_interest: AreaOfInterest
        :param network_domain: The network_domain of this NodeFilter.  # noqa: E501
        :type network_domain: str
        :param cp_up_type: The cp_up_type of this NodeFilter.  # noqa: E501
        :type cp_up_type: str
        :param sst: The sst of this NodeFilter.  # noqa: E501
        :type sst: int
        """
        self.openapi_types = {
            'area_of_interest': AreaOfInterest,
            'network_domain': str,
            'cp_up_type': str,
            'sst': int
        }

        self.attribute_map = {
            'area_of_interest': 'areaOfInterest',
            'network_domain': 'networkDomain',
            'cp_up_type': 'cpUpType',
            'sst': 'sst'
        }

        self._area_of_interest = area_of_interest
        self._network_domain = network_domain
        self._cp_up_type = cp_up_type
        self._sst = sst

    @classmethod
    def from_dict(cls, dikt) -> 'NodeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeFilter of this NodeFilter.  # noqa: E501
        :rtype: NodeFilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_of_interest(self):
        """Gets the area_of_interest of this NodeFilter.


        :return: The area_of_interest of this NodeFilter.
        :rtype: AreaOfInterest
        """
        return self._area_of_interest

    @area_of_interest.setter
    def area_of_interest(self, area_of_interest):
        """Sets the area_of_interest of this NodeFilter.


        :param area_of_interest: The area_of_interest of this NodeFilter.
        :type area_of_interest: AreaOfInterest
        """

        self._area_of_interest = area_of_interest

    @property
    def network_domain(self):
        """Gets the network_domain of this NodeFilter.


        :return: The network_domain of this NodeFilter.
        :rtype: str
        """
        return self._network_domain

    @network_domain.setter
    def network_domain(self, network_domain):
        """Sets the network_domain of this NodeFilter.


        :param network_domain: The network_domain of this NodeFilter.
        :type network_domain: str
        """
        allowed_values = ["CN", "RAN"]  # noqa: E501
        if network_domain not in allowed_values:
            raise ValueError(
                "Invalid value for `network_domain` ({0}), must be one of {1}"
                .format(network_domain, allowed_values)
            )

        self._network_domain = network_domain

    @property
    def cp_up_type(self):
        """Gets the cp_up_type of this NodeFilter.


        :return: The cp_up_type of this NodeFilter.
        :rtype: str
        """
        return self._cp_up_type

    @cp_up_type.setter
    def cp_up_type(self, cp_up_type):
        """Sets the cp_up_type of this NodeFilter.


        :param cp_up_type: The cp_up_type of this NodeFilter.
        :type cp_up_type: str
        """
        allowed_values = ["CP", "UP"]  # noqa: E501
        if cp_up_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cp_up_type` ({0}), must be one of {1}"
                .format(cp_up_type, allowed_values)
            )

        self._cp_up_type = cp_up_type

    @property
    def sst(self):
        """Gets the sst of this NodeFilter.


        :return: The sst of this NodeFilter.
        :rtype: int
        """
        return self._sst

    @sst.setter
    def sst(self, sst):
        """Sets the sst of this NodeFilter.


        :param sst: The sst of this NodeFilter.
        :type sst: int
        """

        self._sst = sst
