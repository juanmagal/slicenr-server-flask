# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.fulfil_status import FulfilStatus
from openapi_server.models.not_fulfilled_state import NotFulfilledState
from openapi_server import util

from openapi_server.models.fulfil_status import FulfilStatus  # noqa: E501
from openapi_server.models.not_fulfilled_state import NotFulfilledState  # noqa: E501

class FulfilmentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fulfil_status=None, not_fullfilled_state=None, not_fulfilled_reasons=None):  # noqa: E501
        """FulfilmentInfo - a model defined in OpenAPI

        :param fulfil_status: The fulfil_status of this FulfilmentInfo.  # noqa: E501
        :type fulfil_status: FulfilStatus
        :param not_fullfilled_state: The not_fullfilled_state of this FulfilmentInfo.  # noqa: E501
        :type not_fullfilled_state: NotFulfilledState
        :param not_fulfilled_reasons: The not_fulfilled_reasons of this FulfilmentInfo.  # noqa: E501
        :type not_fulfilled_reasons: str
        """
        self.openapi_types = {
            'fulfil_status': FulfilStatus,
            'not_fullfilled_state': NotFulfilledState,
            'not_fulfilled_reasons': str
        }

        self.attribute_map = {
            'fulfil_status': 'fulfilStatus',
            'not_fullfilled_state': 'notFullfilledState',
            'not_fulfilled_reasons': 'notFulfilledReasons'
        }

        self._fulfil_status = fulfil_status
        self._not_fullfilled_state = not_fullfilled_state
        self._not_fulfilled_reasons = not_fulfilled_reasons

    @classmethod
    def from_dict(cls, dikt) -> 'FulfilmentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FulfilmentInfo of this FulfilmentInfo.  # noqa: E501
        :rtype: FulfilmentInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fulfil_status(self):
        """Gets the fulfil_status of this FulfilmentInfo.


        :return: The fulfil_status of this FulfilmentInfo.
        :rtype: FulfilStatus
        """
        return self._fulfil_status

    @fulfil_status.setter
    def fulfil_status(self, fulfil_status):
        """Sets the fulfil_status of this FulfilmentInfo.


        :param fulfil_status: The fulfil_status of this FulfilmentInfo.
        :type fulfil_status: FulfilStatus
        """

        self._fulfil_status = fulfil_status

    @property
    def not_fullfilled_state(self):
        """Gets the not_fullfilled_state of this FulfilmentInfo.


        :return: The not_fullfilled_state of this FulfilmentInfo.
        :rtype: NotFulfilledState
        """
        return self._not_fullfilled_state

    @not_fullfilled_state.setter
    def not_fullfilled_state(self, not_fullfilled_state):
        """Sets the not_fullfilled_state of this FulfilmentInfo.


        :param not_fullfilled_state: The not_fullfilled_state of this FulfilmentInfo.
        :type not_fullfilled_state: NotFulfilledState
        """

        self._not_fullfilled_state = not_fullfilled_state

    @property
    def not_fulfilled_reasons(self):
        """Gets the not_fulfilled_reasons of this FulfilmentInfo.

        -> An attribute which is used when FulfilmentInfo is implemented for IntentFulfilmentInfo  # noqa: E501

        :return: The not_fulfilled_reasons of this FulfilmentInfo.
        :rtype: str
        """
        return self._not_fulfilled_reasons

    @not_fulfilled_reasons.setter
    def not_fulfilled_reasons(self, not_fulfilled_reasons):
        """Sets the not_fulfilled_reasons of this FulfilmentInfo.

        -> An attribute which is used when FulfilmentInfo is implemented for IntentFulfilmentInfo  # noqa: E501

        :param not_fulfilled_reasons: The not_fulfilled_reasons of this FulfilmentInfo.
        :type not_fulfilled_reasons: str
        """

        self._not_fulfilled_reasons = not_fulfilled_reasons
