# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.local_address import LocalAddress
from openapi_server.models.remote_address import RemoteAddress
from openapi_server import util

from openapi_server.models.local_address import LocalAddress  # noqa: E501
from openapi_server.models.remote_address import RemoteAddress  # noqa: E501

class EPF1USingleAllOfAttributesAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_address=None, remote_address=None, ep_transport_refs=None):  # noqa: E501
        """EPF1USingleAllOfAttributesAllOf - a model defined in OpenAPI

        :param local_address: The local_address of this EPF1USingleAllOfAttributesAllOf.  # noqa: E501
        :type local_address: LocalAddress
        :param remote_address: The remote_address of this EPF1USingleAllOfAttributesAllOf.  # noqa: E501
        :type remote_address: RemoteAddress
        :param ep_transport_refs: The ep_transport_refs of this EPF1USingleAllOfAttributesAllOf.  # noqa: E501
        :type ep_transport_refs: List[str]
        """
        self.openapi_types = {
            'local_address': LocalAddress,
            'remote_address': RemoteAddress,
            'ep_transport_refs': List[str]
        }

        self.attribute_map = {
            'local_address': 'localAddress',
            'remote_address': 'remoteAddress',
            'ep_transport_refs': 'epTransportRefs'
        }

        self._local_address = local_address
        self._remote_address = remote_address
        self._ep_transport_refs = ep_transport_refs

    @classmethod
    def from_dict(cls, dikt) -> 'EPF1USingleAllOfAttributesAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EP_F1U_Single_allOf_attributes_allOf of this EPF1USingleAllOfAttributesAllOf.  # noqa: E501
        :rtype: EPF1USingleAllOfAttributesAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_address(self):
        """Gets the local_address of this EPF1USingleAllOfAttributesAllOf.


        :return: The local_address of this EPF1USingleAllOfAttributesAllOf.
        :rtype: LocalAddress
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address):
        """Sets the local_address of this EPF1USingleAllOfAttributesAllOf.


        :param local_address: The local_address of this EPF1USingleAllOfAttributesAllOf.
        :type local_address: LocalAddress
        """

        self._local_address = local_address

    @property
    def remote_address(self):
        """Gets the remote_address of this EPF1USingleAllOfAttributesAllOf.


        :return: The remote_address of this EPF1USingleAllOfAttributesAllOf.
        :rtype: RemoteAddress
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this EPF1USingleAllOfAttributesAllOf.


        :param remote_address: The remote_address of this EPF1USingleAllOfAttributesAllOf.
        :type remote_address: RemoteAddress
        """

        self._remote_address = remote_address

    @property
    def ep_transport_refs(self):
        """Gets the ep_transport_refs of this EPF1USingleAllOfAttributesAllOf.


        :return: The ep_transport_refs of this EPF1USingleAllOfAttributesAllOf.
        :rtype: List[str]
        """
        return self._ep_transport_refs

    @ep_transport_refs.setter
    def ep_transport_refs(self, ep_transport_refs):
        """Sets the ep_transport_refs of this EPF1USingleAllOfAttributesAllOf.


        :param ep_transport_refs: The ep_transport_refs of this EPF1USingleAllOfAttributesAllOf.
        :type ep_transport_refs: List[str]
        """

        self._ep_transport_refs = ep_transport_refs
