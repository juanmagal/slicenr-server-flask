# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BeamSingleAllOfAttributesAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beam_index=None, beam_type=None, beam_azimuth=None, beam_tilt=None, beam_horiz_width=None, beam_vert_width=None):  # noqa: E501
        """BeamSingleAllOfAttributesAllOf - a model defined in OpenAPI

        :param beam_index: The beam_index of this BeamSingleAllOfAttributesAllOf.  # noqa: E501
        :type beam_index: int
        :param beam_type: The beam_type of this BeamSingleAllOfAttributesAllOf.  # noqa: E501
        :type beam_type: str
        :param beam_azimuth: The beam_azimuth of this BeamSingleAllOfAttributesAllOf.  # noqa: E501
        :type beam_azimuth: int
        :param beam_tilt: The beam_tilt of this BeamSingleAllOfAttributesAllOf.  # noqa: E501
        :type beam_tilt: int
        :param beam_horiz_width: The beam_horiz_width of this BeamSingleAllOfAttributesAllOf.  # noqa: E501
        :type beam_horiz_width: int
        :param beam_vert_width: The beam_vert_width of this BeamSingleAllOfAttributesAllOf.  # noqa: E501
        :type beam_vert_width: int
        """
        self.openapi_types = {
            'beam_index': int,
            'beam_type': str,
            'beam_azimuth': int,
            'beam_tilt': int,
            'beam_horiz_width': int,
            'beam_vert_width': int
        }

        self.attribute_map = {
            'beam_index': 'beamIndex',
            'beam_type': 'beamType',
            'beam_azimuth': 'beamAzimuth',
            'beam_tilt': 'beamTilt',
            'beam_horiz_width': 'beamHorizWidth',
            'beam_vert_width': 'beamVertWidth'
        }

        self._beam_index = beam_index
        self._beam_type = beam_type
        self._beam_azimuth = beam_azimuth
        self._beam_tilt = beam_tilt
        self._beam_horiz_width = beam_horiz_width
        self._beam_vert_width = beam_vert_width

    @classmethod
    def from_dict(cls, dikt) -> 'BeamSingleAllOfAttributesAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Beam_Single_allOf_attributes_allOf of this BeamSingleAllOfAttributesAllOf.  # noqa: E501
        :rtype: BeamSingleAllOfAttributesAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beam_index(self):
        """Gets the beam_index of this BeamSingleAllOfAttributesAllOf.


        :return: The beam_index of this BeamSingleAllOfAttributesAllOf.
        :rtype: int
        """
        return self._beam_index

    @beam_index.setter
    def beam_index(self, beam_index):
        """Sets the beam_index of this BeamSingleAllOfAttributesAllOf.


        :param beam_index: The beam_index of this BeamSingleAllOfAttributesAllOf.
        :type beam_index: int
        """

        self._beam_index = beam_index

    @property
    def beam_type(self):
        """Gets the beam_type of this BeamSingleAllOfAttributesAllOf.


        :return: The beam_type of this BeamSingleAllOfAttributesAllOf.
        :rtype: str
        """
        return self._beam_type

    @beam_type.setter
    def beam_type(self, beam_type):
        """Sets the beam_type of this BeamSingleAllOfAttributesAllOf.


        :param beam_type: The beam_type of this BeamSingleAllOfAttributesAllOf.
        :type beam_type: str
        """
        allowed_values = ["SSB-BEAM"]  # noqa: E501
        if beam_type not in allowed_values:
            raise ValueError(
                "Invalid value for `beam_type` ({0}), must be one of {1}"
                .format(beam_type, allowed_values)
            )

        self._beam_type = beam_type

    @property
    def beam_azimuth(self):
        """Gets the beam_azimuth of this BeamSingleAllOfAttributesAllOf.


        :return: The beam_azimuth of this BeamSingleAllOfAttributesAllOf.
        :rtype: int
        """
        return self._beam_azimuth

    @beam_azimuth.setter
    def beam_azimuth(self, beam_azimuth):
        """Sets the beam_azimuth of this BeamSingleAllOfAttributesAllOf.


        :param beam_azimuth: The beam_azimuth of this BeamSingleAllOfAttributesAllOf.
        :type beam_azimuth: int
        """
        if beam_azimuth is not None and beam_azimuth > 1800:  # noqa: E501
            raise ValueError("Invalid value for `beam_azimuth`, must be a value less than or equal to `1800`")  # noqa: E501
        if beam_azimuth is not None and beam_azimuth < -1800:  # noqa: E501
            raise ValueError("Invalid value for `beam_azimuth`, must be a value greater than or equal to `-1800`")  # noqa: E501

        self._beam_azimuth = beam_azimuth

    @property
    def beam_tilt(self):
        """Gets the beam_tilt of this BeamSingleAllOfAttributesAllOf.


        :return: The beam_tilt of this BeamSingleAllOfAttributesAllOf.
        :rtype: int
        """
        return self._beam_tilt

    @beam_tilt.setter
    def beam_tilt(self, beam_tilt):
        """Sets the beam_tilt of this BeamSingleAllOfAttributesAllOf.


        :param beam_tilt: The beam_tilt of this BeamSingleAllOfAttributesAllOf.
        :type beam_tilt: int
        """
        if beam_tilt is not None and beam_tilt > 900:  # noqa: E501
            raise ValueError("Invalid value for `beam_tilt`, must be a value less than or equal to `900`")  # noqa: E501
        if beam_tilt is not None and beam_tilt < -900:  # noqa: E501
            raise ValueError("Invalid value for `beam_tilt`, must be a value greater than or equal to `-900`")  # noqa: E501

        self._beam_tilt = beam_tilt

    @property
    def beam_horiz_width(self):
        """Gets the beam_horiz_width of this BeamSingleAllOfAttributesAllOf.


        :return: The beam_horiz_width of this BeamSingleAllOfAttributesAllOf.
        :rtype: int
        """
        return self._beam_horiz_width

    @beam_horiz_width.setter
    def beam_horiz_width(self, beam_horiz_width):
        """Sets the beam_horiz_width of this BeamSingleAllOfAttributesAllOf.


        :param beam_horiz_width: The beam_horiz_width of this BeamSingleAllOfAttributesAllOf.
        :type beam_horiz_width: int
        """
        if beam_horiz_width is not None and beam_horiz_width > 3599:  # noqa: E501
            raise ValueError("Invalid value for `beam_horiz_width`, must be a value less than or equal to `3599`")  # noqa: E501
        if beam_horiz_width is not None and beam_horiz_width < 0:  # noqa: E501
            raise ValueError("Invalid value for `beam_horiz_width`, must be a value greater than or equal to `0`")  # noqa: E501

        self._beam_horiz_width = beam_horiz_width

    @property
    def beam_vert_width(self):
        """Gets the beam_vert_width of this BeamSingleAllOfAttributesAllOf.


        :return: The beam_vert_width of this BeamSingleAllOfAttributesAllOf.
        :rtype: int
        """
        return self._beam_vert_width

    @beam_vert_width.setter
    def beam_vert_width(self, beam_vert_width):
        """Sets the beam_vert_width of this BeamSingleAllOfAttributesAllOf.


        :param beam_vert_width: The beam_vert_width of this BeamSingleAllOfAttributesAllOf.
        :type beam_vert_width: int
        """
        if beam_vert_width is not None and beam_vert_width > 1800:  # noqa: E501
            raise ValueError("Invalid value for `beam_vert_width`, must be a value less than or equal to `1800`")  # noqa: E501
        if beam_vert_width is not None and beam_vert_width < 0:  # noqa: E501
            raise ValueError("Invalid value for `beam_vert_width`, must be a value greater than or equal to `0`")  # noqa: E501

        self._beam_vert_width = beam_vert_width
