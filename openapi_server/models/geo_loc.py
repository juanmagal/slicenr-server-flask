# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.geographical_coordinates import GeographicalCoordinates
from openapi_server import util

from openapi_server.models.geographical_coordinates import GeographicalCoordinates  # noqa: E501

class GeoLoc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geographical_coordinates=None, civic_location=None):  # noqa: E501
        """GeoLoc - a model defined in OpenAPI

        :param geographical_coordinates: The geographical_coordinates of this GeoLoc.  # noqa: E501
        :type geographical_coordinates: GeographicalCoordinates
        :param civic_location: The civic_location of this GeoLoc.  # noqa: E501
        :type civic_location: str
        """
        self.openapi_types = {
            'geographical_coordinates': GeographicalCoordinates,
            'civic_location': str
        }

        self.attribute_map = {
            'geographical_coordinates': 'geographicalCoordinates',
            'civic_location': 'civicLocation'
        }

        self._geographical_coordinates = geographical_coordinates
        self._civic_location = civic_location

    @classmethod
    def from_dict(cls, dikt) -> 'GeoLoc':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeoLoc of this GeoLoc.  # noqa: E501
        :rtype: GeoLoc
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geographical_coordinates(self):
        """Gets the geographical_coordinates of this GeoLoc.


        :return: The geographical_coordinates of this GeoLoc.
        :rtype: GeographicalCoordinates
        """
        return self._geographical_coordinates

    @geographical_coordinates.setter
    def geographical_coordinates(self, geographical_coordinates):
        """Sets the geographical_coordinates of this GeoLoc.


        :param geographical_coordinates: The geographical_coordinates of this GeoLoc.
        :type geographical_coordinates: GeographicalCoordinates
        """

        self._geographical_coordinates = geographical_coordinates

    @property
    def civic_location(self):
        """Gets the civic_location of this GeoLoc.


        :return: The civic_location of this GeoLoc.
        :rtype: str
        """
        return self._civic_location

    @civic_location.setter
    def civic_location(self, civic_location):
        """Sets the civic_location of this GeoLoc.


        :param civic_location: The civic_location of this GeoLoc.
        :type civic_location: str
        """

        self._civic_location = civic_location
