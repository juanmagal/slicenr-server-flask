# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.notification_type import NotificationType
from openapi_server.models.scope1 import Scope1
from openapi_server import util

from openapi_server.models.notification_type import NotificationType  # noqa: E501
from openapi_server.models.scope1 import Scope1  # noqa: E501

class NtfSubscriptionControlSingleAllOfAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification_recipient_address=None, notification_types=None, scope=None, notification_filter=None):  # noqa: E501
        """NtfSubscriptionControlSingleAllOfAttributes - a model defined in OpenAPI

        :param notification_recipient_address: The notification_recipient_address of this NtfSubscriptionControlSingleAllOfAttributes.  # noqa: E501
        :type notification_recipient_address: str
        :param notification_types: The notification_types of this NtfSubscriptionControlSingleAllOfAttributes.  # noqa: E501
        :type notification_types: List[NotificationType]
        :param scope: The scope of this NtfSubscriptionControlSingleAllOfAttributes.  # noqa: E501
        :type scope: Scope1
        :param notification_filter: The notification_filter of this NtfSubscriptionControlSingleAllOfAttributes.  # noqa: E501
        :type notification_filter: str
        """
        self.openapi_types = {
            'notification_recipient_address': str,
            'notification_types': List[NotificationType],
            'scope': Scope1,
            'notification_filter': str
        }

        self.attribute_map = {
            'notification_recipient_address': 'notificationRecipientAddress',
            'notification_types': 'notificationTypes',
            'scope': 'scope',
            'notification_filter': 'notificationFilter'
        }

        self._notification_recipient_address = notification_recipient_address
        self._notification_types = notification_types
        self._scope = scope
        self._notification_filter = notification_filter

    @classmethod
    def from_dict(cls, dikt) -> 'NtfSubscriptionControlSingleAllOfAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NtfSubscriptionControl_Single_allOf_attributes of this NtfSubscriptionControlSingleAllOfAttributes.  # noqa: E501
        :rtype: NtfSubscriptionControlSingleAllOfAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_recipient_address(self):
        """Gets the notification_recipient_address of this NtfSubscriptionControlSingleAllOfAttributes.


        :return: The notification_recipient_address of this NtfSubscriptionControlSingleAllOfAttributes.
        :rtype: str
        """
        return self._notification_recipient_address

    @notification_recipient_address.setter
    def notification_recipient_address(self, notification_recipient_address):
        """Sets the notification_recipient_address of this NtfSubscriptionControlSingleAllOfAttributes.


        :param notification_recipient_address: The notification_recipient_address of this NtfSubscriptionControlSingleAllOfAttributes.
        :type notification_recipient_address: str
        """

        self._notification_recipient_address = notification_recipient_address

    @property
    def notification_types(self):
        """Gets the notification_types of this NtfSubscriptionControlSingleAllOfAttributes.


        :return: The notification_types of this NtfSubscriptionControlSingleAllOfAttributes.
        :rtype: List[NotificationType]
        """
        return self._notification_types

    @notification_types.setter
    def notification_types(self, notification_types):
        """Sets the notification_types of this NtfSubscriptionControlSingleAllOfAttributes.


        :param notification_types: The notification_types of this NtfSubscriptionControlSingleAllOfAttributes.
        :type notification_types: List[NotificationType]
        """

        self._notification_types = notification_types

    @property
    def scope(self):
        """Gets the scope of this NtfSubscriptionControlSingleAllOfAttributes.


        :return: The scope of this NtfSubscriptionControlSingleAllOfAttributes.
        :rtype: Scope1
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this NtfSubscriptionControlSingleAllOfAttributes.


        :param scope: The scope of this NtfSubscriptionControlSingleAllOfAttributes.
        :type scope: Scope1
        """

        self._scope = scope

    @property
    def notification_filter(self):
        """Gets the notification_filter of this NtfSubscriptionControlSingleAllOfAttributes.

        The filter format shall be compliant to XPath 1.0.  # noqa: E501

        :return: The notification_filter of this NtfSubscriptionControlSingleAllOfAttributes.
        :rtype: str
        """
        return self._notification_filter

    @notification_filter.setter
    def notification_filter(self, notification_filter):
        """Sets the notification_filter of this NtfSubscriptionControlSingleAllOfAttributes.

        The filter format shall be compliant to XPath 1.0.  # noqa: E501

        :param notification_filter: The notification_filter of this NtfSubscriptionControlSingleAllOfAttributes.
        :type notification_filter: str
        """

        self._notification_filter = notification_filter
