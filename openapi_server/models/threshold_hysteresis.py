# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ThresholdHysteresis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high=None, low=None):  # noqa: E501
        """ThresholdHysteresis - a model defined in OpenAPI

        :param high: The high of this ThresholdHysteresis.  # noqa: E501
        :type high: float
        :param low: The low of this ThresholdHysteresis.  # noqa: E501
        :type low: float
        """
        self.openapi_types = {
            'high': float,
            'low': float
        }

        self.attribute_map = {
            'high': 'high',
            'low': 'low'
        }

        self._high = high
        self._low = low

    @classmethod
    def from_dict(cls, dikt) -> 'ThresholdHysteresis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ThresholdHysteresis of this ThresholdHysteresis.  # noqa: E501
        :rtype: ThresholdHysteresis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high(self):
        """Gets the high of this ThresholdHysteresis.


        :return: The high of this ThresholdHysteresis.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this ThresholdHysteresis.


        :param high: The high of this ThresholdHysteresis.
        :type high: float
        """
        if high is None:
            raise ValueError("Invalid value for `high`, must not be `None`")  # noqa: E501

        self._high = high

    @property
    def low(self):
        """Gets the low of this ThresholdHysteresis.


        :return: The low of this ThresholdHysteresis.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this ThresholdHysteresis.


        :param low: The low of this ThresholdHysteresis.
        :type low: float
        """

        self._low = low
