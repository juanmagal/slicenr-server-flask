# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.intent_single import IntentSingle
from openapi_server.models.sub_network_single import SubNetworkSingle
from openapi_server import util

from openapi_server.models.intent_single import IntentSingle  # noqa: E501
from openapi_server.models.sub_network_single import SubNetworkSingle  # noqa: E501

class SubNetworkSingle4AllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_network=None, intent=None):  # noqa: E501
        """SubNetworkSingle4AllOf - a model defined in OpenAPI

        :param sub_network: The sub_network of this SubNetworkSingle4AllOf.  # noqa: E501
        :type sub_network: List[SubNetworkSingle]
        :param intent: The intent of this SubNetworkSingle4AllOf.  # noqa: E501
        :type intent: List[IntentSingle]
        """
        self.openapi_types = {
            'sub_network': List[SubNetworkSingle],
            'intent': List[IntentSingle]
        }

        self.attribute_map = {
            'sub_network': 'SubNetwork',
            'intent': 'Intent'
        }

        self._sub_network = sub_network
        self._intent = intent

    @classmethod
    def from_dict(cls, dikt) -> 'SubNetworkSingle4AllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubNetwork_Single_4_allOf of this SubNetworkSingle4AllOf.  # noqa: E501
        :rtype: SubNetworkSingle4AllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_network(self):
        """Gets the sub_network of this SubNetworkSingle4AllOf.


        :return: The sub_network of this SubNetworkSingle4AllOf.
        :rtype: List[SubNetworkSingle]
        """
        return self._sub_network

    @sub_network.setter
    def sub_network(self, sub_network):
        """Sets the sub_network of this SubNetworkSingle4AllOf.


        :param sub_network: The sub_network of this SubNetworkSingle4AllOf.
        :type sub_network: List[SubNetworkSingle]
        """

        self._sub_network = sub_network

    @property
    def intent(self):
        """Gets the intent of this SubNetworkSingle4AllOf.


        :return: The intent of this SubNetworkSingle4AllOf.
        :rtype: List[IntentSingle]
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this SubNetworkSingle4AllOf.


        :param intent: The intent of this SubNetworkSingle4AllOf.
        :type intent: List[IntentSingle]
        """

        self._intent = intent
