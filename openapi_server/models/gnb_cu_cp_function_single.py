# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.danr_management_function_single import DANRManagementFunctionSingle
from openapi_server.models.des_management_function_single import DESManagementFunctionSingle
from openapi_server.models.dlbo_function_single import DLBOFunctionSingle
from openapi_server.models.dmro_function_single import DMROFunctionSingle
from openapi_server.models.epe1_single import EPE1Single
from openapi_server.models.epf1_c_single import EPF1CSingle
from openapi_server.models.epng_c_single import EPNgCSingle
from openapi_server.models.epx2_c_single import EPX2CSingle
from openapi_server.models.epxn_c_single import EPXnCSingle
from openapi_server.models.gnb_cu_cp_function_single_all_of_attributes import GnbCuCpFunctionSingleAllOfAttributes
from openapi_server.models.managed_nf_service_single import ManagedNFServiceSingle
from openapi_server.models.nr_cell_cu_single import NrCellCuSingle
from openapi_server.models.perf_metric_job_single import PerfMetricJobSingle
from openapi_server.models.rrm_policy_ratio_single import RRMPolicyRatioSingle
from openapi_server.models.threshold_monitor_single import ThresholdMonitorSingle
from openapi_server.models.trace_job_single import TraceJobSingle
from openapi_server.models.vs_data_container_single import VsDataContainerSingle
from openapi_server import util

from openapi_server.models.danr_management_function_single import DANRManagementFunctionSingle  # noqa: E501
from openapi_server.models.des_management_function_single import DESManagementFunctionSingle  # noqa: E501
from openapi_server.models.dlbo_function_single import DLBOFunctionSingle  # noqa: E501
from openapi_server.models.dmro_function_single import DMROFunctionSingle  # noqa: E501
from openapi_server.models.epe1_single import EPE1Single  # noqa: E501
from openapi_server.models.epf1_c_single import EPF1CSingle  # noqa: E501
from openapi_server.models.epng_c_single import EPNgCSingle  # noqa: E501
from openapi_server.models.epx2_c_single import EPX2CSingle  # noqa: E501
from openapi_server.models.epxn_c_single import EPXnCSingle  # noqa: E501
from openapi_server.models.gnb_cu_cp_function_single_all_of_attributes import GnbCuCpFunctionSingleAllOfAttributes  # noqa: E501
from openapi_server.models.managed_nf_service_single import ManagedNFServiceSingle  # noqa: E501
from openapi_server.models.nr_cell_cu_single import NrCellCuSingle  # noqa: E501
from openapi_server.models.perf_metric_job_single import PerfMetricJobSingle  # noqa: E501
from openapi_server.models.rrm_policy_ratio_single import RRMPolicyRatioSingle  # noqa: E501
from openapi_server.models.threshold_monitor_single import ThresholdMonitorSingle  # noqa: E501
from openapi_server.models.trace_job_single import TraceJobSingle  # noqa: E501
from openapi_server.models.vs_data_container_single import VsDataContainerSingle  # noqa: E501

class GnbCuCpFunctionSingle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, object_class=None, object_instance=None, vs_data_container=None, attributes=None, perf_metric_job=None, threshold_monitor=None, managed_nf_service=None, trace_job=None, rrm_policy_ratio=None, nr_cell_cu=None, ep_xn_c=None, ep_e1=None, ep_f1_c=None, ep_ng_c=None, ep_x2_c=None, danr_management_function=None, des_management_function=None, dmro_function=None, dlbo_function=None):  # noqa: E501
        """GnbCuCpFunctionSingle - a model defined in OpenAPI

        :param id: The id of this GnbCuCpFunctionSingle.  # noqa: E501
        :type id: str
        :param object_class: The object_class of this GnbCuCpFunctionSingle.  # noqa: E501
        :type object_class: str
        :param object_instance: The object_instance of this GnbCuCpFunctionSingle.  # noqa: E501
        :type object_instance: str
        :param vs_data_container: The vs_data_container of this GnbCuCpFunctionSingle.  # noqa: E501
        :type vs_data_container: List[VsDataContainerSingle]
        :param attributes: The attributes of this GnbCuCpFunctionSingle.  # noqa: E501
        :type attributes: GnbCuCpFunctionSingleAllOfAttributes
        :param perf_metric_job: The perf_metric_job of this GnbCuCpFunctionSingle.  # noqa: E501
        :type perf_metric_job: List[PerfMetricJobSingle]
        :param threshold_monitor: The threshold_monitor of this GnbCuCpFunctionSingle.  # noqa: E501
        :type threshold_monitor: List[ThresholdMonitorSingle]
        :param managed_nf_service: The managed_nf_service of this GnbCuCpFunctionSingle.  # noqa: E501
        :type managed_nf_service: List[ManagedNFServiceSingle]
        :param trace_job: The trace_job of this GnbCuCpFunctionSingle.  # noqa: E501
        :type trace_job: List[TraceJobSingle]
        :param rrm_policy_ratio: The rrm_policy_ratio of this GnbCuCpFunctionSingle.  # noqa: E501
        :type rrm_policy_ratio: List[RRMPolicyRatioSingle]
        :param nr_cell_cu: The nr_cell_cu of this GnbCuCpFunctionSingle.  # noqa: E501
        :type nr_cell_cu: List[NrCellCuSingle]
        :param ep_xn_c: The ep_xn_c of this GnbCuCpFunctionSingle.  # noqa: E501
        :type ep_xn_c: List[EPXnCSingle]
        :param ep_e1: The ep_e1 of this GnbCuCpFunctionSingle.  # noqa: E501
        :type ep_e1: List[EPE1Single]
        :param ep_f1_c: The ep_f1_c of this GnbCuCpFunctionSingle.  # noqa: E501
        :type ep_f1_c: List[EPF1CSingle]
        :param ep_ng_c: The ep_ng_c of this GnbCuCpFunctionSingle.  # noqa: E501
        :type ep_ng_c: List[EPNgCSingle]
        :param ep_x2_c: The ep_x2_c of this GnbCuCpFunctionSingle.  # noqa: E501
        :type ep_x2_c: List[EPX2CSingle]
        :param danr_management_function: The danr_management_function of this GnbCuCpFunctionSingle.  # noqa: E501
        :type danr_management_function: DANRManagementFunctionSingle
        :param des_management_function: The des_management_function of this GnbCuCpFunctionSingle.  # noqa: E501
        :type des_management_function: DESManagementFunctionSingle
        :param dmro_function: The dmro_function of this GnbCuCpFunctionSingle.  # noqa: E501
        :type dmro_function: DMROFunctionSingle
        :param dlbo_function: The dlbo_function of this GnbCuCpFunctionSingle.  # noqa: E501
        :type dlbo_function: DLBOFunctionSingle
        """
        self.openapi_types = {
            'id': str,
            'object_class': str,
            'object_instance': str,
            'vs_data_container': List[VsDataContainerSingle],
            'attributes': GnbCuCpFunctionSingleAllOfAttributes,
            'perf_metric_job': List[PerfMetricJobSingle],
            'threshold_monitor': List[ThresholdMonitorSingle],
            'managed_nf_service': List[ManagedNFServiceSingle],
            'trace_job': List[TraceJobSingle],
            'rrm_policy_ratio': List[RRMPolicyRatioSingle],
            'nr_cell_cu': List[NrCellCuSingle],
            'ep_xn_c': List[EPXnCSingle],
            'ep_e1': List[EPE1Single],
            'ep_f1_c': List[EPF1CSingle],
            'ep_ng_c': List[EPNgCSingle],
            'ep_x2_c': List[EPX2CSingle],
            'danr_management_function': DANRManagementFunctionSingle,
            'des_management_function': DESManagementFunctionSingle,
            'dmro_function': DMROFunctionSingle,
            'dlbo_function': DLBOFunctionSingle
        }

        self.attribute_map = {
            'id': 'id',
            'object_class': 'objectClass',
            'object_instance': 'objectInstance',
            'vs_data_container': 'VsDataContainer',
            'attributes': 'attributes',
            'perf_metric_job': 'PerfMetricJob',
            'threshold_monitor': 'ThresholdMonitor',
            'managed_nf_service': 'ManagedNFService',
            'trace_job': 'TraceJob',
            'rrm_policy_ratio': 'RRMPolicyRatio',
            'nr_cell_cu': 'NrCellCu',
            'ep_xn_c': 'EP_XnC',
            'ep_e1': 'EP_E1',
            'ep_f1_c': 'EP_F1C',
            'ep_ng_c': 'EP_NgC',
            'ep_x2_c': 'EP_X2C',
            'danr_management_function': 'DANRManagementFunction',
            'des_management_function': 'DESManagementFunction',
            'dmro_function': 'DMROFunction',
            'dlbo_function': 'DLBOFunction'
        }

        self._id = id
        self._object_class = object_class
        self._object_instance = object_instance
        self._vs_data_container = vs_data_container
        self._attributes = attributes
        self._perf_metric_job = perf_metric_job
        self._threshold_monitor = threshold_monitor
        self._managed_nf_service = managed_nf_service
        self._trace_job = trace_job
        self._rrm_policy_ratio = rrm_policy_ratio
        self._nr_cell_cu = nr_cell_cu
        self._ep_xn_c = ep_xn_c
        self._ep_e1 = ep_e1
        self._ep_f1_c = ep_f1_c
        self._ep_ng_c = ep_ng_c
        self._ep_x2_c = ep_x2_c
        self._danr_management_function = danr_management_function
        self._des_management_function = des_management_function
        self._dmro_function = dmro_function
        self._dlbo_function = dlbo_function

    @classmethod
    def from_dict(cls, dikt) -> 'GnbCuCpFunctionSingle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GnbCuCpFunction-Single of this GnbCuCpFunctionSingle.  # noqa: E501
        :rtype: GnbCuCpFunctionSingle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GnbCuCpFunctionSingle.


        :return: The id of this GnbCuCpFunctionSingle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GnbCuCpFunctionSingle.


        :param id: The id of this GnbCuCpFunctionSingle.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object_class(self):
        """Gets the object_class of this GnbCuCpFunctionSingle.


        :return: The object_class of this GnbCuCpFunctionSingle.
        :rtype: str
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """Sets the object_class of this GnbCuCpFunctionSingle.


        :param object_class: The object_class of this GnbCuCpFunctionSingle.
        :type object_class: str
        """

        self._object_class = object_class

    @property
    def object_instance(self):
        """Gets the object_instance of this GnbCuCpFunctionSingle.


        :return: The object_instance of this GnbCuCpFunctionSingle.
        :rtype: str
        """
        return self._object_instance

    @object_instance.setter
    def object_instance(self, object_instance):
        """Sets the object_instance of this GnbCuCpFunctionSingle.


        :param object_instance: The object_instance of this GnbCuCpFunctionSingle.
        :type object_instance: str
        """

        self._object_instance = object_instance

    @property
    def vs_data_container(self):
        """Gets the vs_data_container of this GnbCuCpFunctionSingle.


        :return: The vs_data_container of this GnbCuCpFunctionSingle.
        :rtype: List[VsDataContainerSingle]
        """
        return self._vs_data_container

    @vs_data_container.setter
    def vs_data_container(self, vs_data_container):
        """Sets the vs_data_container of this GnbCuCpFunctionSingle.


        :param vs_data_container: The vs_data_container of this GnbCuCpFunctionSingle.
        :type vs_data_container: List[VsDataContainerSingle]
        """

        self._vs_data_container = vs_data_container

    @property
    def attributes(self):
        """Gets the attributes of this GnbCuCpFunctionSingle.


        :return: The attributes of this GnbCuCpFunctionSingle.
        :rtype: GnbCuCpFunctionSingleAllOfAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GnbCuCpFunctionSingle.


        :param attributes: The attributes of this GnbCuCpFunctionSingle.
        :type attributes: GnbCuCpFunctionSingleAllOfAttributes
        """

        self._attributes = attributes

    @property
    def perf_metric_job(self):
        """Gets the perf_metric_job of this GnbCuCpFunctionSingle.


        :return: The perf_metric_job of this GnbCuCpFunctionSingle.
        :rtype: List[PerfMetricJobSingle]
        """
        return self._perf_metric_job

    @perf_metric_job.setter
    def perf_metric_job(self, perf_metric_job):
        """Sets the perf_metric_job of this GnbCuCpFunctionSingle.


        :param perf_metric_job: The perf_metric_job of this GnbCuCpFunctionSingle.
        :type perf_metric_job: List[PerfMetricJobSingle]
        """

        self._perf_metric_job = perf_metric_job

    @property
    def threshold_monitor(self):
        """Gets the threshold_monitor of this GnbCuCpFunctionSingle.


        :return: The threshold_monitor of this GnbCuCpFunctionSingle.
        :rtype: List[ThresholdMonitorSingle]
        """
        return self._threshold_monitor

    @threshold_monitor.setter
    def threshold_monitor(self, threshold_monitor):
        """Sets the threshold_monitor of this GnbCuCpFunctionSingle.


        :param threshold_monitor: The threshold_monitor of this GnbCuCpFunctionSingle.
        :type threshold_monitor: List[ThresholdMonitorSingle]
        """

        self._threshold_monitor = threshold_monitor

    @property
    def managed_nf_service(self):
        """Gets the managed_nf_service of this GnbCuCpFunctionSingle.


        :return: The managed_nf_service of this GnbCuCpFunctionSingle.
        :rtype: List[ManagedNFServiceSingle]
        """
        return self._managed_nf_service

    @managed_nf_service.setter
    def managed_nf_service(self, managed_nf_service):
        """Sets the managed_nf_service of this GnbCuCpFunctionSingle.


        :param managed_nf_service: The managed_nf_service of this GnbCuCpFunctionSingle.
        :type managed_nf_service: List[ManagedNFServiceSingle]
        """

        self._managed_nf_service = managed_nf_service

    @property
    def trace_job(self):
        """Gets the trace_job of this GnbCuCpFunctionSingle.


        :return: The trace_job of this GnbCuCpFunctionSingle.
        :rtype: List[TraceJobSingle]
        """
        return self._trace_job

    @trace_job.setter
    def trace_job(self, trace_job):
        """Sets the trace_job of this GnbCuCpFunctionSingle.


        :param trace_job: The trace_job of this GnbCuCpFunctionSingle.
        :type trace_job: List[TraceJobSingle]
        """

        self._trace_job = trace_job

    @property
    def rrm_policy_ratio(self):
        """Gets the rrm_policy_ratio of this GnbCuCpFunctionSingle.


        :return: The rrm_policy_ratio of this GnbCuCpFunctionSingle.
        :rtype: List[RRMPolicyRatioSingle]
        """
        return self._rrm_policy_ratio

    @rrm_policy_ratio.setter
    def rrm_policy_ratio(self, rrm_policy_ratio):
        """Sets the rrm_policy_ratio of this GnbCuCpFunctionSingle.


        :param rrm_policy_ratio: The rrm_policy_ratio of this GnbCuCpFunctionSingle.
        :type rrm_policy_ratio: List[RRMPolicyRatioSingle]
        """

        self._rrm_policy_ratio = rrm_policy_ratio

    @property
    def nr_cell_cu(self):
        """Gets the nr_cell_cu of this GnbCuCpFunctionSingle.


        :return: The nr_cell_cu of this GnbCuCpFunctionSingle.
        :rtype: List[NrCellCuSingle]
        """
        return self._nr_cell_cu

    @nr_cell_cu.setter
    def nr_cell_cu(self, nr_cell_cu):
        """Sets the nr_cell_cu of this GnbCuCpFunctionSingle.


        :param nr_cell_cu: The nr_cell_cu of this GnbCuCpFunctionSingle.
        :type nr_cell_cu: List[NrCellCuSingle]
        """

        self._nr_cell_cu = nr_cell_cu

    @property
    def ep_xn_c(self):
        """Gets the ep_xn_c of this GnbCuCpFunctionSingle.


        :return: The ep_xn_c of this GnbCuCpFunctionSingle.
        :rtype: List[EPXnCSingle]
        """
        return self._ep_xn_c

    @ep_xn_c.setter
    def ep_xn_c(self, ep_xn_c):
        """Sets the ep_xn_c of this GnbCuCpFunctionSingle.


        :param ep_xn_c: The ep_xn_c of this GnbCuCpFunctionSingle.
        :type ep_xn_c: List[EPXnCSingle]
        """

        self._ep_xn_c = ep_xn_c

    @property
    def ep_e1(self):
        """Gets the ep_e1 of this GnbCuCpFunctionSingle.


        :return: The ep_e1 of this GnbCuCpFunctionSingle.
        :rtype: List[EPE1Single]
        """
        return self._ep_e1

    @ep_e1.setter
    def ep_e1(self, ep_e1):
        """Sets the ep_e1 of this GnbCuCpFunctionSingle.


        :param ep_e1: The ep_e1 of this GnbCuCpFunctionSingle.
        :type ep_e1: List[EPE1Single]
        """

        self._ep_e1 = ep_e1

    @property
    def ep_f1_c(self):
        """Gets the ep_f1_c of this GnbCuCpFunctionSingle.


        :return: The ep_f1_c of this GnbCuCpFunctionSingle.
        :rtype: List[EPF1CSingle]
        """
        return self._ep_f1_c

    @ep_f1_c.setter
    def ep_f1_c(self, ep_f1_c):
        """Sets the ep_f1_c of this GnbCuCpFunctionSingle.


        :param ep_f1_c: The ep_f1_c of this GnbCuCpFunctionSingle.
        :type ep_f1_c: List[EPF1CSingle]
        """

        self._ep_f1_c = ep_f1_c

    @property
    def ep_ng_c(self):
        """Gets the ep_ng_c of this GnbCuCpFunctionSingle.


        :return: The ep_ng_c of this GnbCuCpFunctionSingle.
        :rtype: List[EPNgCSingle]
        """
        return self._ep_ng_c

    @ep_ng_c.setter
    def ep_ng_c(self, ep_ng_c):
        """Sets the ep_ng_c of this GnbCuCpFunctionSingle.


        :param ep_ng_c: The ep_ng_c of this GnbCuCpFunctionSingle.
        :type ep_ng_c: List[EPNgCSingle]
        """

        self._ep_ng_c = ep_ng_c

    @property
    def ep_x2_c(self):
        """Gets the ep_x2_c of this GnbCuCpFunctionSingle.


        :return: The ep_x2_c of this GnbCuCpFunctionSingle.
        :rtype: List[EPX2CSingle]
        """
        return self._ep_x2_c

    @ep_x2_c.setter
    def ep_x2_c(self, ep_x2_c):
        """Sets the ep_x2_c of this GnbCuCpFunctionSingle.


        :param ep_x2_c: The ep_x2_c of this GnbCuCpFunctionSingle.
        :type ep_x2_c: List[EPX2CSingle]
        """

        self._ep_x2_c = ep_x2_c

    @property
    def danr_management_function(self):
        """Gets the danr_management_function of this GnbCuCpFunctionSingle.


        :return: The danr_management_function of this GnbCuCpFunctionSingle.
        :rtype: DANRManagementFunctionSingle
        """
        return self._danr_management_function

    @danr_management_function.setter
    def danr_management_function(self, danr_management_function):
        """Sets the danr_management_function of this GnbCuCpFunctionSingle.


        :param danr_management_function: The danr_management_function of this GnbCuCpFunctionSingle.
        :type danr_management_function: DANRManagementFunctionSingle
        """

        self._danr_management_function = danr_management_function

    @property
    def des_management_function(self):
        """Gets the des_management_function of this GnbCuCpFunctionSingle.


        :return: The des_management_function of this GnbCuCpFunctionSingle.
        :rtype: DESManagementFunctionSingle
        """
        return self._des_management_function

    @des_management_function.setter
    def des_management_function(self, des_management_function):
        """Sets the des_management_function of this GnbCuCpFunctionSingle.


        :param des_management_function: The des_management_function of this GnbCuCpFunctionSingle.
        :type des_management_function: DESManagementFunctionSingle
        """

        self._des_management_function = des_management_function

    @property
    def dmro_function(self):
        """Gets the dmro_function of this GnbCuCpFunctionSingle.


        :return: The dmro_function of this GnbCuCpFunctionSingle.
        :rtype: DMROFunctionSingle
        """
        return self._dmro_function

    @dmro_function.setter
    def dmro_function(self, dmro_function):
        """Sets the dmro_function of this GnbCuCpFunctionSingle.


        :param dmro_function: The dmro_function of this GnbCuCpFunctionSingle.
        :type dmro_function: DMROFunctionSingle
        """

        self._dmro_function = dmro_function

    @property
    def dlbo_function(self):
        """Gets the dlbo_function of this GnbCuCpFunctionSingle.


        :return: The dlbo_function of this GnbCuCpFunctionSingle.
        :rtype: DLBOFunctionSingle
        """
        return self._dlbo_function

    @dlbo_function.setter
    def dlbo_function(self, dlbo_function):
        """Sets the dlbo_function of this GnbCuCpFunctionSingle.


        :param dlbo_function: The dlbo_function of this GnbCuCpFunctionSingle.
        :type dlbo_function: DLBOFunctionSingle
        """

        self._dlbo_function = dlbo_function
